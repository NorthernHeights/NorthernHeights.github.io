[1,["66rJkJcdNHj5kP5rsVFSD/","f6SJZOjTJB/JrJeh5xTdF7","73GHLPwxtB7qTYbHqm1f2O","29EwJJhu9KGooNyHUDhqOJ","a5YAkFqiJIdquzd+BnHiM+","91IZh5i6JClqRsL4vLVhQk","43sl1iBOdPPpn0fr61EH7b","a89fTiqQ9M6rz79RLO6HCx@f9941","09T4P1kEVGjLlxgmcindzw","afHfbVk2BOsbrAD6EMbABl@f9941","377ruD/2BPb6FZgR7hdqw0@dfed1","51i1HIv31Lkrx1F4Kc8XlV","bedIFOPTBI+r4cRp1/BWYc","45vVR4KFxHa5GIWcq2vYwn","6cjxDawSZPhJkrTvD+Ul6u@f9941","e8oA7OKdxIj55B52r2LCvf","adXIZOhNFMk7hRV9vLd08C@d1570","61PvmIXgBKVLPNE6Om4pAz@2588e","464TlzMC9FpIX52yNeT1sE","e04HR8DupLc4tSDvOtWYOo","e2qmWZi9hHa5HEkWJGbnLf@f9941","c1ZO6zf2BE2rqP13WEQwQu@f9941","58/8LuipVI/p0HPjhoCI7F","a3zQCfCrBCDZJ4uf2rk5u8","6blVwSILVMdJSm5gTfAA6/","d1NGQ2rJZCcbhjH0/erZWw","c9oOGCk8xOIqbdCBKtXSqT","84c2Xl+idKXKdiJ46HPTQb@6c48a","f9lgOBfMRNKo9ekC36ZAlz@f9941","65/ab1s35FcYIBsm8GnkAv","cfXJQssDpPp63rjT8zMt11","72SJXCIbdB6IhXlzgyUKl5","1az6uz+wBIgKw84ZW4iVuT","05tVWTrURLe5GIMY8eCcBI","10WXzWYQpHg6Ld5ooFNKLl","bayfeqdpZCRZf0K604di5c","64Cpg4DUhL4I5TJr3in5tc@b47c0","1brw/JvvpFnIvdrxpFCgMZ","13wX4trQNLsoxj6T1+BRSy","83YtfPJqFNB5hZbERzqHRc","d4ZajE1utGtp73YKcj7bsm","044wSnR65GJZsBp2S3X5jF@f9941","a8HOycVDdFs7kn6TkbyOGv@c6e33","90lBE4X9RBTa1WXHnM08Dp","50qxYcrVJIopby+vxNDkuU@f9941","3dFsVRKC9AG4c4gxdjBSOu@f9941","b289HyXf1IL4wz3483+UdC@f9941","738e6bRC9FBKN9Hc43jZS+","e1R2TEUCBEo4u8ZLjO+Tot@08c68","c1uj+9AeROfo2IhfnZhhLi","d1uYJmBWJHP4XFyJ8E065v@f9941","78CLtdbb1GQq7wutA8fiPD@f9941","937tcBSm1HQq2CfaLPzsMP","4dI8w50PZMJLD2EmpyItsz@86d1a","c47snOGPBK2a+4+gpigF5H@c393e","1eg8lKbRVItKJBCs5gcuQP@f9941","a9dBVU795LeaFoxNxjwXwO","aaqJMl7sFKrJwt5rjMEiie","f8BtEoo85LuYsAPk9J9xgZ@210d6","f6aYEu089LKYUasqwSuHTQ","4aphC0Q0JB+KbV41dBGGa4","11i4IVfThKDrMNEe8gsezN@6c48a","79zTPieptGTrW6Tu9jIQ51@9499f","5ahI0dEq1Nc5tGxbZMukja@7b461","18sGi++hFFF5JizSwCy03g@835ce","c03rTZXvhKT54T2puEggNp@6c48a","bd+iHNAxxFapvBMaBIFeM8","e5x9UtkBNKP65lIDe2ODeh@f9941","22+oBwfb9J4r6xLPW1IRJV@f9941","dfXHt5V5dFepUqSRZc5k2P@f9941","a3b7XjBZdA3a8rphCgcnjt@f9941","2azsDusjxKc7iFMi5q8bEP@cc042","39udDHKM1ForD96S9TyluL@4f348","79QANkDEhK+JVArEtgnig6","abY5M53bJCgoTB/qBV4MEA@f9941","3cCxTh8CFBUogZ5kS63Nkc@83f7f","e6KBeeJwtIfL0ntWLna0tg@1108f","b5Mb7MmDRKn6H2bMqutm6H","48/b9mx6NOa6cW1mAHWwqs@6c48a","26MgvlhflFZJ03PyVJwti4@fbb04","20g1ukYUVPvKWKBRznAKo+@f9941","12Y9dMgWdJKJGmTiZyQR9H@fc873","1cdLxrZMlIq4ieIG+68fZw@6c48a","d9cOaClUVBuI0MI3ANfsw7@f9941","52ksoxjbdLrpXawis28n9E@f9941","224hEiSBdLPoZuOQsRpen+@f9941","f3ZcjqJI1HDbymaTWflps0@f9941","a57RNQQIRBv7bC4oZjDEAb@f9941","27A8HZ+ahEFajb4xVpmp59@f9941","30udrHuw1H+bGIB5DHkLRl","58Q+sOaghMULnEKOqPCeDK","f0jlzyEbxClbGsfUb4tr94","12YixywTJF9Z6zfMRarpEO","3dqjhGkvFOZZpY9mxhj1B7","57fSWigrlGfopDCijc/l8f","41V18qlptBnZAjtcBBDx94","4fBBJpORBFFajLOJYX3lSy","e0S6qlVXROyoORBygEOoQj@6c48a","42l2RW0DVMsKzBoreHsNk8","b5SinAWuNJY5zeYNz8yx60@8ee80","0cXuBc9BtDLY6OKbsgcsHL","73kX3z+EVAsYZJHADLQkLS","b1i4Jy4ehFBLFEYPPcFQqD@f9941","60I4JVwstIB6UCgo8wHDr1","05cSNStbVPGLtaUAzh1y/s","b5yd2T+09JnJTQCvYCycoS","d7dPYnAq1JJLVNbzqs2/G+","d7Q1gFvTRD/bXSM4vExeOY","66NeA+eaJAZJDvg80SILPT","95I/lns+dGSZu/pJKuM5Kf","23RAlfdwRG26Gg2oULlEhm","b8PhKhz6BGq64MpSzGd8kO","ddOq9XZsJKA7Bc3/YGdsLV","6bAsPN0g5B2p3tWzMrFl4X","4aT/Kzyn5AeIEBSyxD3dl2@6c48a","cfVn45uvNO35H4L34CxILq@f9941","54jndtIipJRZKcr/lUSVTQ","b5CcOauX9Hf5ZKFex/MuX+@f9941","b7twO5m2NAF7ZoCSGayExx@6c48a","14EzowP6FGWKcMdnikgeZ5","94akxeqc5NspqAakHp0Zvg","d0LiNzRFZC5aEaPqGzyyuF","ffgwKkDXJKarH38wwMLiQT","0cf2aJGwhAhq3+WLWkJtVY","fb1fXy8bRG0bpjq66mgoFm","66tLmUxNlFI50vjNPIRqp5","1dQwAlgc5F77m3hVkC/ADK","6d2D0IMmJFEZG8B6M5qsmN","9d7s+LpepO5IwpxkC1h0jI","36Yr4hWnlP8qEWQiQYQHo2","4dPJ5BoxxECqruvE43JnWo","b3xfrszCxKKp+3QdlkRih0","darIRN2XxNm65IYNv5XDc+","91LR4Je0JLpbpzONMsRWNx","3aoPeaS9RKNZ+bFMxaRiqX","9dzfZ9hjNG3qhqkJilC7g5","7cpYOvNRBLhrk2qDN2Y8rZ","58jtRnZOFFfpBiewNqUUun","dbOlAg+flDWLVefdioej38","aae21BTTNPXpoxvi8z+5aA","0baWot/mRBnZibrFPN0v4B","164xMuP1hJpolE85d4ivS1","faO4SBj8dGfrP5eCYnvWG+","58v0gZle9JuKBQRHT2jGAZ","ccfZVfWfBJ4JmkV3dfkSog","f7+AJfnJBNSK/bHrYXIRML","a4EDs39V9M6p0A8FzW0ALS","0dX+WuZktLoqROYDZzDRAN","13i//LOtpPWabDSVZXiaA7","660XyyrsZFYqXCowjqzkM1","625o9h4LlDq6WrQJnkdnkX","f79Y63SstBPoLCBpYNXMpz","fbVEKglHpJlbAfNgjBvQzY@f9941","2deiJdrz1C84U9svW8z+AG@f9941","f3eAj+wwVAJInY1TSlYgl5","89jE3bkTVL558aJAkPdWC1","0bLy+Zv/5DCI6LeqbdMXfC","23cRNnP0FAJJzPEqm7MhvQ","d1BxZQKbdKCoO9qhiFT7np","e8MdUtopxEIr6EXpIBt2zj","faRFtPUMVNDaZt8AbAa3/F","49hqvAYDBFDJ4Q+u81DxAm","efSGAhKTdKu7+iq1ti1bAg","94PBb37mZPS6y+/VG3B3D5","c8ziS4brhOn6BUB4d7BbXD","2cBeKIEiJNArFFIe4ZyFoc@6c48a","03DAAi1J5BurLvEG9A4hWj","63pBCUAWxIBZ1WsKMK5bSw@6c48a","97r5cip8xHCbchP0PdMNb4@6c48a","a5JQhV05RG7oRNFbNWEVJ8@6c48a","cdKdWlt+dGCZBKGJQ0h+/P@fcb05","41VkfotpRCJb78FvNhqSo+","68A/xDXr5KaZ5LUzI5rvbA@f9941","fc7vVk1PRFOKk6/chckuJR","9epR6+QuBAz5oHUbpnpYzO","f8ukxCnJNNx5RzzwzdJYGN","db/4BWaqJIb7ZZUwNJvzWc@f9941","c7FWvK07ZLFq3q6T2QTNcP@f9941","6aE1RzQ15KprNKl+8Wct7f@f9941","99iUXcst5PEJjPwNBZC99K@f9941","29O76MOvdNUaNy+lFqPkAp@6c48a","d9pCS6Wy5Lw7OU4CcVugMJ@1da0a","f17w4ikdhLWo2t52knaFZA@6c48a","3fgzRqw5xOspIB8xlWp2cK","1f6QPESjtBkLwtln3W2pj+@6c48a","5bkW24uDNPcYUD+fWe9Rqx@6c48a","b96CsRat5A0aGGvU3HjnIl@6ffe5","b5SinAWuNJY5zeYNz8yx60@16779","52GfDyXbhO+5HFO48ZzjsU","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","2bizO+5iBPdoQvq0VbyoMf@f9941","d9Dqmv49dPu72fYrxojObQ@f9941","1a0/Nj/ZlJ67Lll0q8Zdfg@f9941","4cxsAiPs9FprnasCR4P9xe","ebsuErdq1A54PAQDFvMbDZ","7eZUij0xtKD59J7jz3t+Y7","81L2q4Qq9Bs7xpK0pFkKfp","2aZDHWdcVM2L29kC4nso3j@f9941","4fQ6RSLplB9Y2YJqqwK2wV@f9941","372gdSpV1HAqrHm4M1J1Si","adaDPzdrlNNZPNPMz78nzh","bcsVPN2/tFZYitcRXjqqY6","cchH0BLyZPt4dZNkZLj9Hn","50rqZ3cytKZIeiQVY8p+1n","54GHbfFV9ErKZAytTJNAMA","a5COTiolJNdaiqcD4+Eni8@6c48a","d1tYuRexhNboCz9AANR1tN","22STVxaWZNWoj7j3/3ji4l","d7x0XHp4JNc4xZ4DFCbY+A","fcT3L9sFRHxZppADWEamof","6cmxFYaCxBobiDuXr0WHSi","d3rz+xoIlLhY7cX2EZjnBH@6c48a","3bbPjaGJBEIrb/0NzV5NQv","58QuDlL/RHHZ/TWAGGf9tD@c244a","dcwC5iUG9BEbEn6W34bgco","37FQOpycFF9oorSjW2InUF","3agoeFVJtFEbkz97lqIGRJ","22gJ94VTNDFoSSMbc9iKJx","b1RwAZTUhOloqySDiEw9WM@f9941","a7ILzue3NCz7ZS1r41OCJv@f9941","f4HYlrlOVBMomGupbkvkVG","cfklpNRfNMObr6m4boRWiG","faAh00p/9CGZxoYJOH2XtO","09tO1VVbxEVoKaK4r3hK6B@f9941","afBn7aFxlDtZJDfeGVasn7","fdu2CVARdD/a7YMBdUR1LN","f2Qj+S+OBG8o7iooXh/vSm","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","6c4OFTkqJGpry7wJTTZjpF","eb5wcCRtFD2I1ZC+FNbfYD","34miGzpEZKtqX8P8zVSQIb","08Zx76hpZB+I+9dhA7LJqs","2eSQOEIRZHJLuCYJZicD0i","66Bf1COZhJhYnvpyB2TE2U","64WSzqkgpPK4Xh07es/si0@b47c0","14BoodK4BPfZvgdAmNyojg@6c48a","d6zrwMVV9KMpLzZm3Hwwj5","97sXU6rB9DYLfkk9+nIZ1I","67yc9BfS5JUqllcyE2KAYQ","e9KOC1NghOFY1A5r1XGA86@6c48a","0fWkPQDg9LDI2u6YnWkPKo@f9941","b1LkINIQNOgYMoH8nXYpJt","15X4XGH+5B4qE4Ag4gGq8d","7c0pXt7EZI8ZFbHVWatieT","8bFOshCeNEILJBUjaYBmZn","c20CF8rP9L4Y2FlSK3pqeY","02jlB+Sb1KwrzYOl9ZiC8p","69AtSn+w9DHILVCIwklJhw","7fK3nKaiJIxZ6d6C2cWGoD","c3D12oio1AJb1jjpxMtBVV","ecpnNH1HtD34O0nMgx1ulG","10LhM5SYBI44fMTADU5/JK","0fS/iBaK1GybLiUk+q2n9U","63f5ElL69DebGrKCLN0aCp","c7DJvlcc9MHpTLeBd5+fQg","15NzBzvlRK762gkD1fLxe7@6c48a","64WwLEMMNH/JsIFKKw54Pf","7citDtTQ5Bd4tOs9DBQyEz","49TmMerzdPXJH8AGsSrh9X","2eSraOPEtCaJqhV7vWdMCa","24WtfQd4FDk4KbQ2LTBdJ2","d2tEjj+9pBLbdhEJbAhGq3","c51KaYgxVCWpw7mHCoVVqX","58GEsTCwRM85uZ1L0yjiXG","6bQXp2xM1Itb2cw9Ab8SNy","c2JsyL6hRIbqtvUepXsMHO","86sUh8F3dAjqvA4AorkatX","0aUypF9P5JcLdUyvKpuexO@6c48a","469l3F/3dPS76oZy6q8wD5","76r6F8ColMZKup5lFnPwnt","ceB/VfwXtKWoX5B2gIvYNj","934HLPV3lOi52/mIAlukEI","0eDYokmrxB5KruY9Y804uD","79RnHNOItFmb2emV3awxGT","43GvaYk1tCc5RLSRoq8HWu","4aF3xr5qdPS47YuPolRnhb","b5SinAWuNJY5zeYNz8yx60@d3438","b5SinAWuNJY5zeYNz8yx60@d9bda","b5SinAWuNJY5zeYNz8yx60@ca907","b5SinAWuNJY5zeYNz8yx60@5f47f","b5SinAWuNJY5zeYNz8yx60@0cdc1","b5SinAWuNJY5zeYNz8yx60@c1710","b5SinAWuNJY5zeYNz8yx60@887d8","b5SinAWuNJY5zeYNz8yx60@56322","b5SinAWuNJY5zeYNz8yx60@be12b","b5SinAWuNJY5zeYNz8yx60@e99a9","b5SinAWuNJY5zeYNz8yx60@55ed7","b5SinAWuNJY5zeYNz8yx60@c2db9","bf8FwgprJKhKerNDRcI+D8@6c48a","03wnucTYtKfZO0zjAXsSOl@6c48a","cfWvIN+5ZDB5BZiSliMD5P@6c48a","11c5+v86RA6IHtF1jUXpOB","bf2mRkEOtI24rVyQ1DXktz","81x+0THOlNMro3pSwrVeyI","08cIpk/TRBIqBIinj4SBsS","dfJYdBNiNGCren5L1CNl6Q","8cX53IIcpEaINmMuy2FOSY","26h0WWlQdNoKDHkMnkHg+r","e7lBXEGilKXbtpIc2rq3xz","5a6Hth261I7o6t0orNHx1W","8aq6JiSplGTpwlIPBbsCwD","f8NaX1qO9KOaXPHCtZ8p7O","3bF4e23R9GJ6NNt4tCnTAs","a5RTxsumZKCJwYdE4aYZF2","3e4JjJobZPO5bTt51fTzFy","fcGuFbwipEt58St4lpmTn/","22Z61g2G5AW566EcfOWJcg","6cg+gbCFhL97d2ZusZ/1KO","41JmBFM1FLb4kuTfTk2COs","e4bAesQcxIu5CBMMB4zz4L","f3JHpn/8BAraTK7bitXhGU","f9kza1JvZGe4+0b516hyYF@12b8b","fbvCCiMGFLp7Nd2aSdt1A8","25m+wNV3dLOpGAy+QikNl/@6c48a","a20R3RNCxGO4jbFiN6Hi0f@6c48a","fevOve9oxBBa6HvtjF4M8i","f2jhbrjrNMlpw0FghQZf5b","618T+CEVxPtrvOxWcy6nMS","2bQjn5ymhEA7RbfxK4UWiu","c9Lej7V59Cb54wn94o9cQ6","e8+fkAujFKh4xQfrhW3RDs","c30/dCko5OYLPk6vpOsi2I","fdYTHLIsBIFqgFHciqyS5D","3ac86IDjJAuYwAOIFeRsed","80EhiLtq5F250CtfatkPpg","6exl2IqJNA1oHyNobzvc41","45K2hbM7JF9o4F4gLHmB6V","9afCD3JyBLy75JydWA489O","4avyD5r4pKDK+qH3INAr/F","edIDGYMwhJpqGK10lgl3d9","94xLuEI91CFosK/fz34zS5","23fa/RaW1CI4HcS9segyFA","04klzhBXZDDq/lo3sRedHD","63hBM6RSFIaJN8BWQN8XuX","67qS59WllBmq7NCzn0gfut","d5TIR6w2NIaJ41zVfRFbHV","b5snqx50BDmLQHhI/CssiX@6c48a","00/Dc/1KpMFK38wM2IaVOK","7fbCyw9DhLwIJmE/GeGo2y@6c48a","cbZMxJmN1FAI4QkBQlKe8k@0f158","044wSnR65GJZsBp2S3X5jF@6c48a","f7+wNAR11CJo9hFvFKUflz@84824","43/Bcx43BA86+pQd23LrBc@f9941","3be5vxh/dN3KNsWsXR4IsM@f9941","352MXXIzlK7by2NXvc+wen@f9941","daZ1eFzj1EP4RjKBOyxWiM@f9941","8bEGgP7pZI1YCpolC2JxjG","91Jf3gzL1FW4l5GIqZaLQH@f9941","68FVGYH7tMu5XnNpejZxO9@f9941","23aZFoUgtMzbRqhmHO4roG@f9941","d0dbhtqctKSbWnSNXsdZCD@f9941","77hZ0nKodN+4wAzxK4PVkl","7adWato4ZLGJcEWfYZlMYE@f9941","f9j6FGqOBATrbHgpTVelxF","3bCee63BtI3YVx2MFw6n3o@81a96","09tO1VVbxEVoKaK4r3hK6B@6c48a","0boTm0+OJNarYGEtZ/MBGZ@2ffc7","0boTm0+OJNarYGEtZ/MBGZ@5b1d4","8ey2H9SBpOeaP4PbkNaq6/@63563","e5pmTim65Epp4oyHkeWSGC@88b42","0fWkPQDg9LDI2u6YnWkPKo@6c48a","a3Q3VJCiNK8bE9fg5yNHOd@0f158","12G/UTrWxKzYI/jhWDZ+7P@789ee","12G/UTrWxKzYI/jhWDZ+7P@24d2a","48kGtKeQFIi7Yp/wf8QhrM","f6ncXwD0dDXJE0WFO+JgE7","13wnb7fhVHEKHVu7a/NnnH@44b84","13wnb7fhVHEKHVu7a/NnnH@2feb1","18sGi++hFFF5JizSwCy03g@2ced3","18sGi++hFFF5JizSwCy03g@10a86","1a0/Nj/ZlJ67Lll0q8Zdfg@6c48a","49ZywgZtVGdqQ0kJHW5Mqa","12Y9dMgWdJKJGmTiZyQR9H@17020","1dKdKMkh9F7KFfYE4ih9sX@7196a","1dKdKMkh9F7KFfYE4ih9sX@73684","28iGz55S5PQrYnZGxYXyFx@9bcc1","f6II3vFH1E54l/A/bwBcod","1eg8lKbRVItKJBCs5gcuQP@6c48a","17iuWmWM9PpbJiC9EUVQ3M@0f158","20g1ukYUVPvKWKBRznAKo+@6c48a","22SSnmuNlK47Fg/PguFvA4@b7bcb","22SSnmuNlK47Fg/PguFvA4@33532","2d/E+2ixNO5pp4XB853GTK@6c48a","224hEiSBdLPoZuOQsRpen+@6c48a","de4oCW5dlCQ5xXNrsRG79f@5e790","23aZFoUgtMzbRqhmHO4roG@6c48a","88uJriR9FJBb1ndPbX+zfY","d3+UvTwLpAgZygqfC54tTj","56H4doJVVNqbF71irr3BR6","d8zYANoNJLnoxjilJ7qOkm","26MgvlhflFZJ03PyVJwti4@0e809","26MgvlhflFZJ03PyVJwti4@efa89","27A8HZ+ahEFajb4xVpmp59@6c48a","28iGz55S5PQrYnZGxYXyFx@ee040","28iGz55S5PQrYnZGxYXyFx@db9ab","2aZDHWdcVM2L29kC4nso3j@6c48a","2azsDusjxKc7iFMi5q8bEP@891b6","2azsDusjxKc7iFMi5q8bEP@55ded","2bizO+5iBPdoQvq0VbyoMf@6c48a","2deiJdrz1C84U9svW8z+AG@6c48a","4foVY06EpEB68ENoAwuiLv@b55d4","96LV0fn1BMpq0lmqgoe9qt@f9941","b5kQhDeTdIyrZg4EcSClS/@f9941","480fs/GY1Hx5X/bPJwqUZV","c1ckZKtH5PxbiBBeORuP3H","50ARG5zfRNp77FYU7V5riW","e9fghjlhhJ3JJDThazQnB7","987qsMuaRJ4JdquOzUxzdq","d12gUELhJAErpY/UNub+e+","cevaTjIEVPqKNHAa3Exu4d","45ROcb3IZCPqEOogl1pYJG","44oStoCCpKfI40+I6VUmFQ","89pssOcOdGwrW1O3wAKbqe","63EOhQek5Cr7sgdIbofBcn","37J3lEo1ZLyY2uXZ1eb2Et","97+qZGDdJIaormy8fBJNKK","da+n6+aTJNaIR3peqn/ket","14LoFtpnVGbbF/A573gg6v","f1oCTgPFFMDJmU2sYQ5XqM","d8hud+sqJE0LejbaJyX7tE","89L33s1XFLD57gX48vsq4P","beMWpTXVlCR7MZONrur50M","d2XzjRkPtB+akcYk2sEjqj","e5rHVJFg9H2r+9wseMTl1r","edYIGgo49AcrOWODNMqDt3","72J+Pc2x9KsJxaC3vMbTCE","d6JFnRVlZEM7WWHI0oEg6p","ecb61UrTFGL4AsGtlwlYTi","9ekcmpyrlKjJDbvUkG/20Q","d2HvZmpHxEKanhMU1YsGrh","0b23Bp+wxOPLRTuVDXwiJY","90zWWwKdFDVZhLA7LkWgGG","20eFgvwnhEVZqs/V7sHKFW","50YaAfkahEHb/UGm+sNqtq@eb7ec","352MXXIzlK7by2NXvc+wen@6c48a","85u/Df+t5IEr37AhpTf67n@e9f5e","37JNr1crBF3Ir6AQQYMAOb@81306","37JNr1crBF3Ir6AQQYMAOb@4271d","377ruD/2BPb6FZgR7hdqw0@c9210","377ruD/2BPb6FZgR7hdqw0@83add","39udDHKM1ForD96S9TyluL@c952c","39udDHKM1ForD96S9TyluL@d33b5","37JNr1crBF3Ir6AQQYMAOb@ececd","3bCee63BtI3YVx2MFw6n3o@73654","3bCee63BtI3YVx2MFw6n3o@a5889","3be5vxh/dN3KNsWsXR4IsM@6c48a","3cCxTh8CFBUogZ5kS63Nkc@e2053","3cCxTh8CFBUogZ5kS63Nkc@2d903","3dFsVRKC9AG4c4gxdjBSOu@6c48a","400t3Tj8hNZ6mnXS5VI9Q9@0f158","43/Bcx43BA86+pQd23LrBc@6c48a","c0rjzHO85HAptfEbBgX1uZ@c774c","55KWal3QtK07im5i002qZh@f9941","b6Sx+I6dlGnogrWaMOyc/1@f9941","e5Lfqc5BZDcrlOmwq2r8N9","41rgG2crtJspvKWxQxcj5d","45ftz1QJFIIpGNMJHwoom+@5f807","45ftz1QJFIIpGNMJHwoom+@d78fc","59jhlW1HdEqbt5gKveVS00@554d2","e4S/nMBJxNXK/BmD5fg2fn@20e49","6a0kcUVPdN/aVuc2WNR4jQ@71eb3","83CT9u6iNLx5F0KjkmHRhM@0f158","4dI8w50PZMJLD2EmpyItsz@c3cc7","4dI8w50PZMJLD2EmpyItsz@bdd91","7f3EGsrgBL65X40sX5dLkZ@77eb0","4dohbSVwpAvoYajZxCMX4z@39955","4dohbSVwpAvoYajZxCMX4z@7ee09","4fQ6RSLplB9Y2YJqqwK2wV@6c48a","4foVY06EpEB68ENoAwuiLv@78b5a","4foVY06EpEB68ENoAwuiLv@50c97","50YaAfkahEHb/UGm+sNqtq@01b50","50YaAfkahEHb/UGm+sNqtq@5af93","50qxYcrVJIopby+vxNDkuU@6c48a","52ksoxjbdLrpXawis28n9E@6c48a","53Cr1TemlMcLzxNMWIzuxF@0cf55","53Cr1TemlMcLzxNMWIzuxF@f352c","54TknWPwVPqJqeCR+Y/Czo@6c48a","55KWal3QtK07im5i002qZh@6c48a","55vgjF6itL9rO65anwtZIL@9e731","55vgjF6itL9rO65anwtZIL@32aeb","9acOsyapZL7Z07RFrKDEBC@6c48a","173rzDCmtLirAL3Fi4hVge","56SZY2e/1AbrS4j0nuX9vF@04d33","56SZY2e/1AbrS4j0nuX9vF@ed341","59jhlW1HdEqbt5gKveVS00@fba94","59jhlW1HdEqbt5gKveVS00@597d3","5ahI0dEq1Nc5tGxbZMukja@71c91","5ahI0dEq1Nc5tGxbZMukja@baef2","9ehHwGfWpCwphP6OsQe8zq@c6dcd","81aCoXPfJL6qirpQyUucY6","03B0L8ZoZDbrhc4zfGu+Qy","4bOmh1BkFEIpoDuKud49mm","d4VqTe8Z9DZLsky/lLG1Oy","a0b7OjHVhDmLLgOkS1sxsA","43hCtWmH5H5awkobSNguhu","20CiolxztPHKWNvZvrUKsr","0fjRlJNrpH6qwYH+WDdEVg","a8MNMNl1hLcIc33fOsSetp","964zxp/UJHZZGTUgZPWIPm","daN7kiu11DA46V4BUoJFEC@92075","7fS3Yq+jhCEIJTFZhBdAka@b47c0","9av89gZrtEn48gkou5Qafr@6c48a","0boTm0+OJNarYGEtZ/MBGZ@57028","22SSnmuNlK47Fg/PguFvA4@d1a6a","68A/xDXr5KaZ5LUzI5rvbA@6c48a","68FVGYH7tMu5XnNpejZxO9@6c48a","68aKZ/y9NLf7dC+cxbNMcb@b0c13","68aKZ/y9NLf7dC+cxbNMcb@45f73","81z3iyNvVHqoqgudmmGOFY@b47c0","6aE1RzQ15KprNKl+8Wct7f@6c48a","6a0kcUVPdN/aVuc2WNR4jQ@b0874","6a0kcUVPdN/aVuc2WNR4jQ@9b423","eeyhBp1HVM36lQzrO0+zGB@1ed29","6cjxDawSZPhJkrTvD+Ul6u@6c48a","96CDFkGKVLC57g8aPLZR8Y@6c48a","1dKdKMkh9F7KFfYE4ih9sX@e5703","13wnb7fhVHEKHVu7a/NnnH@01a45","fcQczchllPC4nWJ/8C8lMw","96ShmpzAhBqZe6T4Ob5cCj","67kGEV6GVLYIuyBmGqjhV+@b47c0","6eCnmAyfFGdq44rvEuF96l@49295","6eCnmAyfFGdq44rvEuF96l@d8494","6eT1R49JBD860MTx6SEamN@d7d07","6eT1R49JBD860MTx6SEamN@52ffd","d6zFXZMCVC8Jc4IclhD8Mq","81ECpFvf5BFod2+KPzJoVI","38rYtTg5JHQZ6Q5+DAvCHc","78CLtdbb1GQq7wutA8fiPD@6c48a","79zTPieptGTrW6Tu9jIQ51@19659","79zTPieptGTrW6Tu9jIQ51@d40c2","7adWato4ZLGJcEWfYZlMYE@6c48a","56SZY2e/1AbrS4j0nuX9vF@ea6e6","00w/CVbNxN8Jv4hY06dp0l@6c48a","7dj5uJT9FMn6OrOOx83tfK@6c48a","7eIAAuQUdKiqSYUf/4jcv6@6c48a","31V8ctK0hMzLQfE4DNdGGj","69VF1CYcJM35nTduTZhcCy","7f3EGsrgBL65X40sX5dLkZ@093d0","7f3EGsrgBL65X40sX5dLkZ@7100a","b9iwZ1y1FBn48lC/tdKB3j@89406","33gJUBdX5M4ZeIjL8VWWLe","caHlQjtONEg5diSXRTfqxR@6c48a","85u/Df+t5IEr37AhpTf67n@255c0","85u/Df+t5IEr37AhpTf67n@c9d57","b2fODDfBRJE5zaQZSqwfD3@979a6","c18RGmLq1OpoBY+sR2+kaj","11LnlDU0JEA5tSATYgLEG+","3dEYHESntD7IQ2EokZOu9b","35LU2skxdBnpGghQk6sM2L","2eSRSQK+pF673zC4VJFMOY","61Mm6M9BdEPKNZYIHd+oqX","eb7oyQM7pHCYcB1zZZCuxE","ac87Rt/ftJGId0BeVS0CGv","1daqUrms5H/YlpOKzyWfA1","e3BYrLQepLWqBvEqUDDrX6","1e5aXJr15KT4bm2qbbPegN","cciNNd6ZJIDZE4+Wz/Nw6X","57/QzxqlVBTp+8z+93UkVb","69PJjc34BFmLuBUeYYKNg+","9e/qB66jlGsbZMpq7GIjtZ","6dtAVlya1H2qePyZlsvckV","13LW1zWKtODqwJSfEK5c+Y","307ta27jNF178qNpzZGwgj","bcdRqxlgFIVJd7+NSWRFa6","1bUyBWmnlMLYA7+uSP1NAH","8ey2H9SBpOeaP4PbkNaq6/@8aa38","8ey2H9SBpOeaP4PbkNaq6/@12b8b","91Jf3gzL1FW4l5GIqZaLQH@6c48a","f5zixqCfpLBJ6SIOIeYye/@7cc96","93+retm9pCVbEsk7428T5s@6c48a","cayZEVgYBHbJwRCaeiTYbI@a36a1","95EkngnxZFbYuFpsqVTaFr@6c48a","e6z7nKF15M74KPb9hmRg19@de9dc","96LV0fn1BMpq0lmqgoe9qt@6c48a","eeHd1X/NdLBat0O9uxvoBl@0f158","99iUXcst5PEJjPwNBZC99K@6c48a","12G/UTrWxKzYI/jhWDZ+7P@c7a05","9ehHwGfWpCwphP6OsQe8zq@c4b22","9ehHwGfWpCwphP6OsQe8zq@be004","9ehHwGfWpCwphP6OsQe8zq@194d6","94MP00shREHLvKNm+lozKP@0f158","a3b7XjBZdA3a8rphCgcnjt@6c48a","a57RNQQIRBv7bC4oZjDEAb@6c48a","a7ILzue3NCz7ZS1r41OCJv@6c48a","50ItLFoXxH+p3e/QnYBsZ6@0f158","a89fTiqQ9M6rz79RLO6HCx@6c48a","abY5M53bJCgoTB/qBV4MEA@6c48a","7breXJ/ERFELLR/YlcXcgV@b47c0","afHfbVk2BOsbrAD6EMbABl@6c48a","afxHkx8GZGsJC+n+YfITQo@6c48a","b1RwAZTUhOloqySDiEw9WM@6c48a","b1i4Jy4ehFBLFEYPPcFQqD@6c48a","b289HyXf1IL4wz3483+UdC@6c48a","b5CcOauX9Hf5ZKFex/MuX+@6c48a","b5SinAWuNJY5zeYNz8yx60@0788f","b5SinAWuNJY5zeYNz8yx60@d40c2","b5SinAWuNJY5zeYNz8yx60@438fe","b5SinAWuNJY5zeYNz8yx60@29078","b5SinAWuNJY5zeYNz8yx60@0fb69","b5kQhDeTdIyrZg4EcSClS/@6c48a","b6Sx+I6dlGnogrWaMOyc/1@6c48a","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","e3C8kb8SNLG5j7S/Df7mbs@ead9a","b9iwZ1y1FBn48lC/tdKB3j@0f158","b96CsRat5A0aGGvU3HjnIl@9f61a","b96CsRat5A0aGGvU3HjnIl@57ecb","8dD0oxD4hF07ICO2OcEEJX","24f7QJJ7ZKsKma7/QqLNVY","5czDDCjY1Bu4Bi6gYRJZZS","75P9cG481GEoLBCOemnSHM","d1xc9XwrZNwoouOGZ3ywp8","2fIJj9+BFOM7+oLC/A9DHj","45MDXyA7tE+4hew6YYZtNG","ecusJq4s9LeIwMD1Y3HlLk","06cG4oNONNSIKiMp1IKemi","7dj5uJT9FMn6OrOOx83tfK@f9941","ffuIqPr2JI9I8dPLYGRDpD@f9941","241nuXqklGdIyxF2A3CFtb","54TOz4ZV5DtZ0Y4xI+BmG1","0dpz+ndDhPdZ0JcG02Z3jy","3dhD51cd5LU4mNCZ+zVSnm","2feGZmWp5G+a6Jhyk+52LL","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","afxHkx8GZGsJC+n+YfITQo@f9941","78/ljuWoJOgrVx3ZGSh3uC","bfoYAQGGlBrKmkzJOw2xa7@25885","bfoYAQGGlBrKmkzJOw2xa7@ce9cf","c0rjzHO85HAptfEbBgX1uZ@2f023","c0rjzHO85HAptfEbBgX1uZ@bf09d","ee9vyytvVBUZ4nGFvmfUxk@b2a12","c47snOGPBK2a+4+gpigF5H@afdc3","c47snOGPBK2a+4+gpigF5H@c6578","c7FWvK07ZLFq3q6T2QTNcP@6c48a","cayZEVgYBHbJwRCaeiTYbI@50641","cayZEVgYBHbJwRCaeiTYbI@e8415","76oN9AvdVLSad6zB4oBDHe@b47c0","cdKdWlt+dGCZBKGJQ0h+/P@cee30","cdKdWlt+dGCZBKGJQ0h+/P@9883f","68aKZ/y9NLf7dC+cxbNMcb@8ad8a","cfVn45uvNO35H4L34CxILq@6c48a","d0dbhtqctKSbWnSNXsdZCD@6c48a","d1uYJmBWJHP4XFyJ8E065v@6c48a","9axG0QDxdC55xuq74NrpWv","b1GIvf0kRNJKI0inRZiD+v","0dcC/dpidGVpWCI1rdykjB@0f158","53Cr1TemlMcLzxNMWIzuxF@ee0cf","45ftz1QJFIIpGNMJHwoom+@cd5c8","d9Dqmv49dPu72fYrxojObQ@6c48a","d9cOaClUVBuI0MI3ANfsw7@6c48a","d9pCS6Wy5Lw7OU4CcVugMJ@e150b","d9pCS6Wy5Lw7OU4CcVugMJ@90597","daN7kiu11DA46V4BUoJFEC@50780","daN7kiu11DA46V4BUoJFEC@2e991","daZ1eFzj1EP4RjKBOyxWiM@6c48a","db/4BWaqJIb7ZZUwNJvzWc@6c48a","55vgjF6itL9rO65anwtZIL@0f8f1","de4oCW5dlCQ5xXNrsRG79f@fc2d1","de4oCW5dlCQ5xXNrsRG79f@6809c","bcYQyUKJtJMpt2peby649S@b47c0","dfXHt5V5dFepUqSRZc5k2P@6c48a","e2qmWZi9hHa5HEkWJGbnLf@6c48a","e9+qz+6s5C2JxgZo2c9bB+","bcGpRWKd9FOLiopXZAOT0I@b47c0","e3C8kb8SNLG5j7S/Df7mbs@6b188","e3C8kb8SNLG5j7S/Df7mbs@408eb","e4S/nMBJxNXK/BmD5fg2fn@5559c","e4S/nMBJxNXK/BmD5fg2fn@ad880","e5pmTim65Epp4oyHkeWSGC@a4905","e5pmTim65Epp4oyHkeWSGC@2554d","e5x9UtkBNKP65lIDe2ODeh@6c48a","e6KBeeJwtIfL0ntWLna0tg@bc1fa","e6KBeeJwtIfL0ntWLna0tg@e7596","e6z7nKF15M74KPb9hmRg19@3e1fa","e6z7nKF15M74KPb9hmRg19@ddd5a","6eCnmAyfFGdq44rvEuF96l@55508","eadHiwQI1AUrcD8NI1Xglf","93+retm9pCVbEsk7428T5s@f9941","7eIAAuQUdKiqSYUf/4jcv6@f9941","8a4Iww+IlJ9arc7Vh8Fku0","660vtZtE1JCY4nI+J4wqJk","f2NUdnFHFHOo2LthyTKcuP","0f+gKxMzJPfLKLirGcXfll","5ewYiEoD5FgY7EELloHWh+","4dohbSVwpAvoYajZxCMX4z@30b3c","eeyhBp1HVM36lQzrO0+zGB@fa8bf","eeyhBp1HVM36lQzrO0+zGB@82b64","ee9vyytvVBUZ4nGFvmfUxk@dfc8b","ee9vyytvVBUZ4nGFvmfUxk@5223d","19TAOeJ9NGJKQr3KN9wbcH","f3ZcjqJI1HDbymaTWflps0@6c48a","f5zixqCfpLBJ6SIOIeYye/@067d2","f5zixqCfpLBJ6SIOIeYye/@cf1a7","f7+wNAR11CJo9hFvFKUflz@22379","f7+wNAR11CJo9hFvFKUflz@0dff9","f8BtEoo85LuYsAPk9J9xgZ@829fd","f8BtEoo85LuYsAPk9J9xgZ@7a58d","f9lgOBfMRNKo9ekC36ZAlz@6c48a","fbVEKglHpJlbAfNgjBvQzY@6c48a","6eT1R49JBD860MTx6SEamN@5cc25","bfoYAQGGlBrKmkzJOw2xa7@eedbe","ffuIqPr2JI9I8dPLYGRDpD@6c48a"],["node","root","targetInfo","_spriteFrame","data","asset","value","_mesh","_effectAsset","from","to","_parent","_font","_textureSource","target","clip","mainTexture","_mainTexture","_particleSystem","_defaultClip","_material","_target","_normalSprite","graph","_anyState","_exitState","_entryState","emissiveMap","source","_skyboxTexture","_animator","base","ending","_meshTilingGround","_meshTilingRoad","_label","_holderUIOpacity","_pivotSnowboard","_pivotHelmet","prefabRootNode","_animUpgraded","_buttonAdPurchase","_buttonPurchase","_labelCurrent","_animationGachaRouletteResult","_pivotStunt","_pivotBodyColor","_prefabParticle","_anim","_clipIntro","_hoverSprite","_pressedSprite","_disabledSprite","_display","_labelPrice","_labelCurrentSpeed","_labelPriceNext","_labelGachaPullPrice","_containerPages","_buttonGachaPull","_pageView","_buttonNext","_buttonPrevious","_animController","_indicator","_prefabStorePage","_prefabStoreButton","_movement","_pivotGameplay","_pivotGameOver","_prefabStuntTrigger","_container","_pivotTo","_labelCountShadow","_labelCount","_controller","_button","_xpDisplay","_pivot","_matAccent","noise1Texture","_debugSphere","_skeleton","_canvas","scene","_scrollView","_playerPrefab","_audioData","_envmapHDR","_envmapLDR","_model","_rewardTheme","_rewardCoin"],[["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_prefab","_components","_parent","_children","_lpos","_lrot","_euler","_lscale"],-3,4,9,1,2,5,5,5,5],"cc.SpriteFrame","cc.ImageAsset",["cc.Widget",["_alignFlags","_alignMode","_top","_originalWidth","_originalHeight","_right","_bottom","_left","_enabled","_horizontalCenter","_verticalCenter","node","__prefab"],-8,1,4],["cc.Node",["_name","_layer","_active","_id","_components","_prefab","_children","_lpos","_parent","_lrot","_euler","_lscale"],-1,12,4,2,5,1,5,5,5],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_fontSize","_lineHeight","_horizontalAlign","_overflow","_enableWrapText","_cacheMode","node","__prefab","_font","_color"],-6,1,4,6,5],["cc.Sprite",["_sizeMode","_type","_fillRange","_isTrimmedMode","_name","_enabled","_fillStart","node","_spriteFrame","__prefab","_color"],-4,1,6,4,5],["cc.ParticleSystem",["duration","_simulationSpace","loop","playOnAwake","simulationSpeed","_capacity","_dataCulling","startSize3D","startRotation3D","_enabled","node","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_shapeModule","_sizeOvertimeModule","_textureAnimationModule","renderer","_materials","_colorOverLifetimeModule","__prefab","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_trailModule","bursts"],-7,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,4,4,4,4,4,4,4,9],["cc.ShapeModule",["_enable","radius","_shapeType","length","radiusThickness","_angle","alignToDirection","emitFrom","randomPositionAmount","sphericalDirectionAmount","arcSpread","randomDirectionAmount","arcSpeed","_scale","_position","_rotation"],-9,4,5,5,5],["cc.Node",["_name","_layer","_active","_components","_prefab","_parent","_lpos","_lrot","_lscale","_euler","_children"],0,2,4,1,5,5,5,5,2],["cc.Button",["_transition","_zoomScale","_interactable","_enabled","node","__prefab","_target","clickEvents","_normalSprite","_normalColor","_hoverSprite","_pressedSprite","_disabledSprite"],-1,1,4,1,9,6,5,6,6,6],"cc.TextureCube",["cc.Animation",["_enabled","playOnLoad","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.CurveRange",["mode","multiplier","constantMax","constant","constantMin","spline"],-2,4],["cc.RealKeyframeValue",["interpolationMode","rightTangent","leftTangent","value","rightTangentWeight","leftTangentWeight"],-3],["cc.ParticleSystemRenderer",["_renderMode","_alignSpace","_velocityScale","_lengthScale","_mainTexture","_mesh"],-1,6,6],["cc.UITransform",["_name","node","__prefab","_contentSize","_anchorPoint"],2,1,4,5,5],["cc.Layout",["_layoutType","_resizeMode","_spacingX","_paddingLeft","_paddingRight","_paddingTop","_spacingY","_isAlign","_constraint","_constraintNum","_paddingBottom","node","__prefab"],-8,1,4],["cc.GradientRange",["_mode","colorMax","gradient","colorMin","gradientMin","gradientMax","color"],2,5,4,5,4,4,5],["cc.animation.AnimationTransition",["duration","exitConditionEnabled","relativeDuration","_exitCondition","from","to","conditions"],-1,1,1,9],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode","mountedComponents","mountedChildren"],2,9,1,9,9],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.ParticleSystem",["duration","loop","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts"],0,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.LabelOutline",["_width","_enabled","node","__prefab","_color"],1,1,4,5],["cc.Material",["_defines","_states","_name","_techIdx","_props"],-1,12],["4a587hdoeRPaoMhtXF2Qk+F",["_curveSpace","_alignOffset","_alignType","node","__prefab","_rotation","_widthCurve","_heightCurve","_material","_mesh"],0,1,4,5,4,4,6,6],["cc.ColorKey",["time","color"],2,5],["cc.Camera",["_clearFlags","_visibility","_far","_priority","_name","_projection","_orthoHeight","node","_color","__prefab"],-4,1,5,4],["cc.PrefabInfo",["fileId","root","instance","asset","targetOverrides","nestedPrefabInstanceRoots"],2,1,4,6,9,2],["ba4bb5BJC1KA6PJOVhqu22q",["node","_panels","__prefab","_holderUIOpacity"],3,1,2,4,1],["cc.animation.AnimationController",["_enabled","node","__prefab","graph"],2,1,4,6],["9173aMkALVIoLKQ9YSJ5EVS",["_audioKey","_key","_enabled","node","__prefab"],0,1,4],["cc.Mask",["_type","node","__prefab","_spriteFrame"],2,1,4,6],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","rowIndex","_enable","cycleCount","randomRow","animation","frameOverTime","startFrame"],-4,4,4],["MinMaxRange",["_max","_min"],1],["cc.animation.Layer",["name","weight","_stateMachine"],1,4],["ea25fgiLE9K94BRKQOBQ6rg",["node","__prefab","_direction","_position"],3,1,4,5,5],["2e277X10MFKhaMm7u6eqC9a",["_spacing","_ignoreSampleRotation","_spacingRange","_scale","_scaleRange","node","__prefab","_translation","_translationRange","_prefabs","_minRotation","_maxRotation"],-2,1,4,5,5,3,5,5],["cc.RotationOvertimeModule",["_enable","_separateAxes","x","y","z"],1,4,4,4],["cc.TrailModule",["widthFromParticle","_enable","_space","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],0,4,4,4,4,1],["cc.TargetOverrideInfo",["propertyPath","target","targetInfo","source","sourceInfo"],2,1,4,1,4],["cc.Prefab",["_name"],2],["cc.Node",["_objFlags","__editorExtras__","_name","_prefab","_parent","_children","_lpos","_lrot","_euler"],0,4,4,12,5,5,5],["cc.Node",["_name","_children","_prefab","_lpos","_lrot","_euler","_parent"],2,9,4,5,5,5,1],["cc.MeshRenderer",["_name","node","__prefab","_materials","lightmapSettings","_mesh"],2,1,4,3,4,6],["2022ebMdchE2pNL1SpqTm8g",["_debug","node","__prefab","_animator"],2,1,4,1],["Data",["_key","_actions"],2,9],["c5e67vDKvxD6bIO4FmHkSSl",["_category","node","__prefab","_animator"],2,1,4,1],["da750P4YkNMQaDYb6vs4+jf",["_eventID","_delay","node","__prefab","_onEventRaised"],1,1,4,9],["cc.Burst",["_time","count"],2,4],["cc.UIMeshRenderer",["__prefab","node"],3,4,1],["cc.animation.Transition",["from","to","conditions"],3,1,1,9],["cc.animation.EmptyStateTransition",["duration","from","to","conditions"],2,1,1,9],["cc.animation.ClipMotion",["clip"],3,6],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["alphaKeys","colorKeys"],3,9,9],["cc.AlphaKey",["alpha","time"],1],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["dampen","limitX","limitY","limitZ","limit"],2,4,4,4,4],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["AudioItem",["_audioKey","_key","_volume","_loopMode","_sfxs"],-1,3],["cc.animation.UnaryCondition",["operator","operand"],2,4],["cc.animation.PlainVariable",["_type","_value"],1],["abbc67cNQxDuJ3vQ9bKAb0F",["_levelUpAnimationDuration","node","__prefab","_levelLabel","_xpDisplay","_totalCoinsDisplay","_coinsDisplayToast","_animator"],2,1,4,1,1,1,1,1],["b2e8cJmV2lHfLO8Dt8AHway",["_xpFillType","_fillingDuration","node","__prefab","_xpFill"],1,1,4,1],["cc.animation.AnimationBlend1DItem",["threshold","motion"],2,4],["cc.PrefabInfo",["fileId","targetOverrides","root","instance","asset"],1,1,4,6],["cc.PrefabInfo",["fileId","targetOverrides","root","asset"],1,1,1],["cc.MeshRenderer",["_materials","node","__prefab","lightmapSettings","_mesh"],2,1,4,4,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["53d3fTbnFxPOLwJ9KE2Kruy",["node","__prefab","_animationEvents"],3,1,4,9],["9df7eULd0xL9YoeTQn6dXdL",["node","__prefab","_container","_pageView","_buttonGachaPull","_containerPages","_labelGachaPullPrice","_prefabStorePage","_prefabStoreButton"],3,1,4,1,1,1,1,1,6,6],["6107bBCvtJHpbyrosM9DUC0",["node","__prefab","_label"],3,1,4,1],["51cbayfFYRI0b4PXBU6JCiq",["_eventID","node","__prefab"],2,1,4],["89809SEwNdEF7xmaZgSjTo+",["node","__prefab","_pivotHelmet","_pivotBodyColor","_pivotSnowboard","_pivotStunt","_animationGachaRouletteResult"],3,1,4,1,1,1,1,1],["d8801bg2ndDDJYXAenG0A5o",["node","__prefab","_buttonPrevious","_buttonNext"],3,1,4,1,1],["d1211Et/SJNYq2ml8IrDiXQ",["node","__prefab","_animController"],3,1,4,1],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.RealCurve",["_times","_values"],2,9],["cc.PageView",["_name","horizontal","node","__prefab","_content"],1,1,4,1],["11b26AUiYtLFKzQW0ZHlFhK",["_keyTrigger","_durationParticle","node","__prefab","_container","_inputBlocker","_pageView","_prefabParticle"],1,1,4,1,1,1,6],["cc.PageViewIndicator",["spacing","node","__prefab","_cellSize"],2,1,4,5],["341e0hyWp5HSLUdBf23SGLc",["_smoothness","_coinChance","_coinBatchStartOffset","_minDistanceBetweenBatches","node","__prefab","_hillsCount","_nodesDistance","_nodesDescent","_startingHeight","_hillHeight","_valleyHeight","_lastHillHeight","_coinsCountByBatch","_finishLineHeight"],-1,1,4,4,4,4,4,4,4,4,4,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.AudioClip",["_name","_native","_duration"],0],["cc.animation.AnimationGraph",["_layers","_variables"],3,9,11],["cc.animation.StateMachine",["_states","_transitions","_entryState","_exitState","_anyState"],3,2,9,1,1,1],["cc.animation.StateMachine",["_states","_entryState","_exitState","_anyState"],3,12,1,1,1],["cc.animation.TriggerCondition",["trigger"],2],["cc.animation.TriggerVariable",["_flags"],2],["cc.animation.State",["name"],2],["cc.animation.EmptyState",["name"],2],["cc.animation.Motion",["name","motion"],2,4],["9851eJAn9NOq432++9hrLHT",["node","__prefab","_meshTilingRoad","_meshTilingGround"],3,1,4,1,1],["4f3betNZrFAk5ghozl0TFWc",["node","__prefab","_nodes"],3,1,4,2],["67bcbtx+KNDHJuD7BkACoxk",["node","__prefab","_skyboxTexture"],3,1,4,6],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["fd467mBhNdNCq1ds6go5aYW",["node","__prefab","_movement"],3,1,4,1],["780226dOlhDIrdAjU8V8UfR",["node","__prefab"],3,1,4],["b8ec5UpzwNLCpUCnwVfEfGe",["node","__prefab","_pivotGameOver","_pivotGameplay"],3,1,4,1,1],["c3826EUBfJH8bUlN6c3s2yC",["node","__prefab"],3,1,4],["6f996lTjWBJGpr7uxb9uDjp",["node","__prefab"],3,1,4],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.SkeletalAnimation.Socket",["path","target"],2,1],["7c846AQLhFPZ6PYQFTpbYJ1",["_useLerp","node","__prefab","_offset"],2,1,4,5],["5da5dQjv+RPqpiDhhsOtgok",["_speedMin","_speedMax","_groundAcceleration","_diveAcceleration","node","__prefab"],-1,1,4],["f6d5dYZBKtCJYgHvEdMbPcu",["_minVelocityPercentage","_minAngle","_coinsPrize","_debug","node","__prefab","_animator"],-1,1,4,1],["e0435Ow6r9FjZvXBaEtsaYW",["_delayToGroundedFalse","node","__prefab","_animator"],2,1,4,1],["804ceb1gVhNvoAwnZGDvyqC",["_changeDelay","node","__prefab","_particle"],2,1,4,1],["73cd2NGeOJJhYbeJFnsxKGc",["node","__prefab","_pivotTo","_container","_prefabParticle"],3,1,4,1,1,6],["8d1a5HBFaJAEqYKVdCITCqO",["node","__prefab","_container"],3,1,4,1],["5261cWBHa1A/7ccgJGwY/2s",["node","__prefab","_label","_anim"],3,1,4,1,1],["33851QDQUdG6LHOkF672LEc",["node","__prefab","_label","_anim"],3,1,4,1,1],["c391aYPfsJM0ohejbpAeNaA",["node","__prefab","_container","_labelCount","_labelCountShadow"],3,1,4,1,1,1],["3f2963/PeNLNYYbHUDhEOzN",["node","__prefab","_button","_holder","_controller","_clipIntro"],3,1,4,1,1,1,6],["aaf09Ao+q5OhKsNi2Dc5zdI",["node","__prefab","_items"],3,1,4,9],["3c6cfgNwaZCOJF1E3IwW0Qc",["_spacing","_spacingRange","node","__prefab","_translation","_prefabs"],1,1,4,5,3],["cc.animation.BindableBoolean",["variable"],2],["04734e5Zp1KiYseHUCwDl6y",["node","__prefab","_display"],3,1,4,1],["d97b7uthpROcqUQ04yZ+xyO",["node","__prefab"],3,1,4],["9e183Z8FttPLqhupw1qxuAZ",["node","__prefab","_labelCurrentSpeed","_containerPrice","_labelPrice","_buttonPurchase","_containerMax","_buttonAdPurchase","_containerNotEnoughCoin","_animUpgraded"],3,1,4,1,1,1,1,1,1,1,1],["44376l1KA1AOp3fDmlMjzI4",["node","__prefab","_labelCurrent","_containerPrice","_labelPriceNext","_buttonPurchase","_containerMax","_buttonAdPurchase","_containerNotEnoughCoin","_animUpgraded"],3,1,4,1,1,1,1,1,1,1,1],["9d9a6wp7o9EhKuBE3Gfx3FR",["node","__prefab","_container","_clipIntro"],3,1,4,1,6],["13a7dRukLhG9rmrFdVQEGfp",["_spacing","node","__prefab","_pivot","_prefabNumbers","_matAccent"],2,1,4,1,3,6],["cc.animation.SubStateMachine",["name","_stateMachine"],2,4],["cc.animation.AnimationBlend1D",["name","_items","param"],2,9,4],["cc.animation.BindableNumber",["variable"],2],["f3a37vVNBFELJbEG2VNB7Km",["node","__prefab"],3,1,4],["71d87wBb5tF/4IZBHLvd5JY",["node","__prefab"],3,1,4],["3b6c130jadK6oihLPAC7jM/",["_firstNodeBackDistance","_debug","_debugAssemble","node","__prefab","_levels","_themes","_debugSphere"],0,1,4,3,9,6],["LevelThemeSetting",["colorAccent","colorBorder","base","ending"],3,5,5,6,6],["3d1c3WHsy5Nxo2aJxjlUBBQ",["node","__prefab"],3,1,4],["5cdb7MWdTxPGYy//nec49yM",["node","__prefab"],3,1,4],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.SceneAsset",["_name"],2],["43dd4fs+g5ND7pQtSnq4dis",["node"],3,1],["a9dd7S8gPpP9LjR6e3PGpUP",["node","_canvas"],3,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_type","_maxReceived","_shadowColor"],1,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["99672sUg5NFw4x7bEPAiyHE",["node"],3,1],["da1826xovZC4ZZz1JDgNjre",["_value","node","_label"],2,1,1],["6cb4bJHCfFOPaDirQn2j/2X",["node"],3,1],["7cf24Q2YqRMQL5EmYda+ogI",["node"],3,1],["6a35dv/VthJt7aJNBa24tiS",["node"],3,1],["ca89anhPeZOI5EercUv3UBE",["node"],3,1],["c0ef8RiVztCBYL8f8P5oTKL",["node"],3,1],["9d064W5a/tP3p612/jCmNTV",["node","_container"],3,1,1],["4be75QIksxNmpYOFRGfeTN5",["node"],3,1],["ebfc1BiC+hK0ZzSjTH0Ohtd",["node"],3,1],["b738dqUDJdPWLI7QYjSEYUQ",["node"],3,1],["2c4e8xIPOZENLhcYAIWTYzQ",["_autoLoadAds","node"],2,1],["ee907ePu/xM7YXNZM1ALelz",["node"],3,1],["cc.DirectionalLight",["_shadowEnabled","_shadowPcf","node","_staticSettings"],1,1,4],["cc.StaticLightSettings",[],3],["134d2SXIXlCIKY8SpE6eQ+f",["node","_playerPrefab"],3,1,6],["60769n1dzpCI67JrPW1Z/rv",["node"],3,1],["82f9ahrLtFPJYMbm1g2SJoM",["node"],3,1],["cc.ScrollBar",["_direction","node","_handle"],2,1,1],["cc.ScrollView",["bounceDuration","brake","horizontal","node","_content","_verticalScrollBar"],0,1,1,1],["cc.Canvas",["_enabled","node","_cameraComponent"],2,1,1],["ce979HL66xKTauu7hz7XVUw",["node"],3,1],["e638ajtZ9xGNJqPUA/g/vww",["node","_audioData"],3,1,6],["a2ab5ATdt5HP4FarDLY133k",["node"],3,1],["76692KI6ixKj40rrfHOhqVc",["node"],3,1],["62075QmSKFMNagBqV4YGCG/",["node"],3,1],["96888WVOXFM65z6EN7eFCyc",["node"],3,1],["db4f0hnRppErK/DfI03wBev",["node"],3,1],["66efblFsIVGSq4UFCK0d3Ii",["node","__prefab","_model"],3,1,4,1],["30bcaNDHcxMp7Ur+QdmRGPz",["node","__prefab"],3,1,4],["cc.TTFFont",["_name","_native"],1],["7f5cdtXOUxDqqJTvbc17DYf",["_detectionOffsetY","node","__prefab"],2,1,4],["aecc3eyrV5CIJ3gY0IvvvqR",["node","__prefab"],3,1,4],["16712dmX+9HK7Fn0ZmuVZWV",["node","__prefab","_labelCurrent"],3,1,4,1],["b217eKNn0lHt40ES+zIBx3v",["node","__prefab","_onGameOver"],3,1,4,9],["73751ztvL5O3plk+OTJc7Dx",["node","__prefab","_label"],3,1,4,1],["a2904hJ73FIZZGvsAnIQZ4d",["node","__prefab","_label"],3,1,4,1],["427feWHduZGbph90heWl/hn",["node","__prefab","_rewardCoin","_rewardTheme"],3,1,4,1,1],["fba3f+FZw9DFaNAZYiJHxY0",["node","__prefab","_label"],3,1,4,1],["f9fe013MwFNZb49dpCxXP29",["node","__prefab","_label"],3,1,4,1]],[[72,0,2],[13,1],[20,0,1,2,2],[74,0,2],[77,0,1,2,2],[16,1,2,3,1],[76,0,1,2,3],[13,3,2],[79,0,1,2,3],[29,0,1,2,3,2],[0,4,5,8,6,3],[0,0,9,6,2],[44,0,2],[21,0,2,1,2],[78,0,1,2,2],[13,0,4,2,4],[20,0,1,2,3,2],[0,0,8,7,6,2],[59,0,1,3],[40,0,2,3,4,1,5,6,10,11,7,8,9,6],[18,1],[80,0,1,2,2],[0,0,1,8,7,6,10,3],[73,1],[9,0,5,3,4,2],[47,1,2,3,4,5,1],[0,0,1,8,7,6,3],[16,1,2,1],[0,0,8,7,6,11,12,2],[99,0,1,2,3],[0,0,2,8,7,6,3],[6,0,7,9,8,2],[94,0,1,2],[106,0,2],[6,7,9,10,8,1],[56,0,1],[44,1],[25,2,1,0,4,4],[39,0,1,3,2,1],[6,0,7,9,10,8,2],[27,0,1,2],[16,1,2,3,4,1],[22,0,1,3,3],[108,0,1,2],[135,0,2],[16,1,3,1],[0,0,1,8,7,6,10,11,12,3],[14,0,3,1,2,5],[19,0,1,4,5,6,3],[0,0,1,8,9,7,6,10,3],[3,0,3,4,11,12,4],[112,0,1,2,1],[36,7,8,1],[61,1,2,3,4,1],[40,0,2,1,5,6,10,11,7,8,9,4],[42,3,4,5,6,7,1],[25,1,0,4,3],[57,0,1,2],[59,0,2],[18,0,2,2],[14,0,3,3],[15,4,1],[60,1,2,3,4,1],[35,0,2,3,4,5,2],[14,0,1,2,4],[13,0,1,5,3],[13,0,5,2],[104,0,2],[0,0,1,8,9,7,6,3],[0,0,1,8,9,7,6,10,11,12,3],[6,7,9,8,1],[100,0,1,2,4],[64,0,1,2],[37,1,0,3],[51,0,2,3,4,2],[14,0,3,1,4,2,5,7],[53,1,0,1],[105,0,2],[58,1,0,1],[0,0,8,9,6,2],[0,0,1,8,7,10,3],[22,0,1,2,3,4],[34,1,2,1],[52,0,1,2],[64,1,1],[13,0,2,3],[27,0,2],[41,0,2,3,4,2],[0,0,9,7,6,2],[102,0,1,2,3,4,1],[3,0,3,4,1,11,12,5],[24,0,2,3,4,2],[54,0,1,1],[110,0,1,2,1],[111,0,1,2,1],[40,0,1,5,6,7,8,9,3],[6,0,3,7,9,8,3],[31,1,2,1],[52,1,1],[5,0,1,3,4,2,9,10,11,6],[58,0,1],[41,2,3,4,1],[0,0,1,9,7,6,3],[43,0,3,4,1,2,2],[89,0,1,2,2],[17,1,0,2,11,12,4],[18,0,1,2],[13,3,1,3],[5,0,1,3,4,2,9,10,12,11,6],[0,0,8,7,6,10,11,13,12,2],[10,0,1,4,5,7,6,8,3],[25,3,1,0,4,4],[63,0,1,2,4,4],[0,0,1,8,9,7,10,3],[16,1,3,4,1],[6,7,8,1],[14,0,3,4,5,5],[4,0,1,8,4,5,3],[12,1,2,3,4,5,2],[101,0,1,1],[55,0,1,2,3,2],[65,0,1,3],[0,0,8,6,10,11,12,2],[4,0,1,8,4,5,7,3],[3,0,3,1,11,12,4],[6,0,3,7,9,10,8,3],[6,7,10,8,1],[32,0,3,4,2],[8,12,1],[38,2,1],[0,0,8,9,6,10,11,12,2],[0,0,8,7,2],[4,0,1,6,4,5,7,3],[83,0,1,2,2],[12,0,2,3,4,5,2],[7,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,1],[18,0,3,1,2],[107,0,2],[43,0,3,1,2,2],[148,0,1,2,3,1],[0,0,9,6,13,2],[0,0,2,1,8,7,6,10,11,12,4],[0,0,8,9,6,10,2],[4,0,8,6,4,5,2],[9,0,5,3,4,6,7,8,9,2],[49,0,1,2],[8,0,2,12,14,13,3],[109,0,1,2,3,1],[39,0,1,2,1],[39,0,1,1],[26,0,1,3,4,5,6,7,3],[26,0,2,3,4,5,6,7,3],[26,0,2,3,4,5,6,7,8,9,3],[26,0,1,3,4,5,6,7,8,9,3],[134,0,1,2,3,4,5,3],[0,0,2,1,8,7,6,10,4],[0,0,1,9,7,6,10,3],[0,0,2,1,8,9,7,6,10,13,4],[4,0,1,8,4,5,7,9,10,3],[10,0,1,4,5,6,3],[35,0,1,2,3,4,5,3],[36,3,0,1,4,5,2,7,8,7],[121,0,1,2],[4,0,1,6,4,5,3],[21,0,1,2],[3,0,7,5,2,6,3,4,11,12,8],[12,2,3,4,1],[48,1,2,3,1],[8,0,6,8,1,4,3,5,12,13,8],[37,0,2],[43,0,1,2,2],[68,0,1,2],[0,0,1,8,7,6,10,11,13,12,3],[0,0,7,6,2],[0,0,1,9,7,10,13,3],[4,0,2,1,8,6,4,5,7,11,4],[47,0,1,2,3,4,5,2],[81,0,1,2,2],[3,0,7,9,1,11,12,5],[6,0,7,10,8,2],[10,0,1,4,7,6,3],[32,0,1,3,4,3],[7,0,2,4,3,6,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,24,25,26,27,6],[7,0,2,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,3],[18,6,1],[35,2,3,4,5,1],[24,2,3,4,1],[38,0,2,2],[54,0,1,2,1],[27,1],[120,0,1,1],[63,0,1,2,3,4,5],[19,0,4,5,2],[19,1,4,5,6,2],[0,0,2,1,8,9,7,6,4],[0,0,1,7,6,3],[0,4,5,6,3],[0,0,1,8,9,7,10,11,12,3],[46,0,6,1,2,3,4,5,2],[75,0,1,2,3],[12,1,2,3,4,2],[6,1,0,2,7,9,8,4],[10,0,1,4,5,6,8,3],[17,1,0,2,11,4],[34,1,1],[5,0,5,1,3,4,2,9,10,12,7],[57,1,1],[60,0,1,2,3,4,2],[0,0,1,8,6,10,11,12,3],[0,0,1,8,6,11,12,3],[0,0,1,8,9,7,6,10,11,13,12,3],[0,0,2,1,8,9,7,6,10,4],[0,0,3,8,7,3],[4,0,1,8,6,4,5,7,9,10,3],[4,0,1,8,6,4,5,7,11,3],[21,0,2,4,3,1,2],[82,0,1,2,2],[84,0,1,2,2],[85,0,1,2,2],[3,8,0,3,4,11,12,5],[3,8,0,7,5,2,6,3,4,1,11,12,10],[3,0,7,1,11,12,4],[10,0,1,4,5,3],[10,2,0,1,4,5,6,4],[31,1,2,3,1],[18,0,4,5,2],[8,0,2,1,12,4],[5,0,5,1,3,4,6,7,2,9,10,9],[5,0,5,1,3,4,2,9,10,12,11,7],[5,0,5,1,2,9,10,12,5],[5,0,5,1,3,4,2,9,11,7],[24,1,0,2,3,4,3],[98,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,5],[37,1],[118,0,1,1],[0,0,1,8,7,6,10,13,3],[0,0,8,9,6,11,12,2],[4,0,1,6,4,5,7,11,3],[4,0,1,6,4,5,7,9,10,3],[4,0,1,8,6,4,5,7,3],[9,0,1,5,3,4,3],[20,0,1,2,4,3,2],[29,0,1,2,4,3,2],[16,2,1],[3,0,5,2,1,11,12,5],[3,0,9,1,11,12,4],[3,0,2,1,11,12,4],[12,0,1,2,3,4,5,3],[12,0,2,3,4,2],[86,0,1,2,1],[30,0,2,3,1,1],[50,0,1,2,3,2],[93,0,1,1],[23,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,29,19,20,21,22,23,24,25,26,27,28,3],[8,0,7,1,3,5,12,15,6],[14,0,4,5,4],[15,0,2,3,1,5],[53,0,1],[5,0,1,3,2,9,10,12,11,5],[5,0,5,1,3,4,2,9,10,7],[5,0,5,1,3,4,2,9,10,11,7],[62,0,1,2,4],[0,0,2,1,8,7,6,4],[0,0,1,8,9,7,6,10,13,3],[0,0,1,8,7,6,13,3],[0,0,8,7,6,10,11,12,2],[0,0,1,7,6,10,11,12,3],[0,0,9,7,6,10,2],[0,0,2],[0,0,1,8,7,3],[0,0,3,8,9,3],[0,0,1,9,7,6,10,13,3],[4,0,1,6,4,5,9,10,3],[4,0,1,8,6,4,5,3],[4,0,1,8,6,4,7,3],[4,0,1,8,4,7,3],[45,0,1,4,3,3],[46,0,1,2,3,4,5,2],[16,0,1,2,3,2],[3,8,0,7,5,2,6,3,4,11,12,9],[3,0,7,5,6,3,1,11,12,7],[3,0,2,9,11,12,4],[3,0,3,11,3],[12,2,3,4,5,1],[48,0,1,2,3,2],[22,1],[88,0,1,2,1],[6,1,0,2,7,9,10,8,4],[6,1,0,2,7,9,10,4],[6,1,0,7,8,3],[6,0,7,8,2],[10,0,4,5,7,2],[90,0,1,2,3,4,5,6,1],[17,1,0,3,4,11,12,5],[33,0,1,2,3,2],[7,5,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,2],[7,3,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,3],[23,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,29,19,20,21,22,23,24,25,26,27,28,2],[8,0,7,1,3,5,12,6],[8,0,2,7,6,1,4,3,12,8],[8,0,2,9,8,12,5],[14,3,1,4,2,5,6],[14,1,4,2,5,5],[15,0,1,5,4,3],[15,0,2,3],[15,2,4,2],[15,0,1,5,3],[5,0,1,3,4,6,2,9,10,7],[27,1,1],[28,2,7,9,2],[28,4,3,0,1,7,8,5],[19,0,2,1,4,5,6,4],[19,0,4,5,6,2],[136,0,1,2,1],[138,0,1,2,3,4,5,6,7,8,9,1],[139,0,1,2,3,4,5,6,7,8,9,1],[142,0,1,2],[146,0,1,1],[196,0,1,1],[0,0,2,1,9,7,6,4],[0,0,1,7,6,10,3],[0,0,1,9,7,6,13,3],[0,0,1,8,9,7,6,13,3],[0,0,1,9,6,3],[0,0,8,6,10,2],[0,0,9,6,10,2],[0,0,9,6,10,11,12,2],[0,0,9,6,11,12,2],[0,0,2,1,9,7,4],[0,0,1,9,7,10,3],[0,0,3,8,9,7,10,11,12,3],[0,0,1,8,9,7,3],[0,0,1,8,7,10,11,12,3],[0,0,1,8,7,10,11,13,12,3],[0,0,3,8,7,11,12,3],[0,0,1,3,8,9,10,4],[0,0,1,8,9,3],[0,0,1,8,9,6,3],[4,0,6,4,5,9,10,2],[4,0,2,1,8,6,4,5,7,4],[4,0,1,6,4,5,11,3],[4,0,1,3,6,4,7,4],[4,0,1,8,4,5,7,9,11,10,3],[4,0,2,1,8,4,5,7,4],[4,0,1,4,5,3],[9,0,1,5,10,3,4,6,7,8,9,3],[9,0,1,5,3,4,6,3],[9,0,5,3,4,6,2],[9,0,2,1,5,3,4,4],[9,0,1,10,3,4,3],[9,0,1,3,3],[9,0,5,3,6,2],[9,0,1,3,4,3],[45,2,5,3,6,7,8,2],[20,0,4,3,2],[29,0,1,2,5,3,2],[69,0,1,2,3,4,3],[70,0,1,2,3,3],[71,0,1,2,3,4,2],[21,0,2,3,1,2],[3,0,2,6,4,11,12,5],[3,0,2,6,3,4,11,12,6],[3,0,2,3,1,11,12,5],[3,6,1,11,12,3],[3,0,7,5,2,3,1,11,12,7],[3,0,10,1,11,12,4],[3,0,2,4,1,11,12,5],[3,0,2,6,4,1,11,12,6],[3,11,12,1],[3,0,2,6,11,4],[3,0,11,2],[3,0,5,2,11,4],[3,0,2,3,4,11,5],[3,0,7,5,2,6,3,4,11,8],[3,0,4,1,11,4],[3,0,5,3,4,11,5],[3,0,3,4,11,4],[3,0,7,2,11,4],[3,8,0,2,9,10,1,11,12,7],[3,0,5,11,12,3],[3,8,0,7,5,6,3,1,11,12,8],[12,2,3,1],[49,0,2],[22,0,1,3],[30,0,3,1,1],[30,0,2,1,1],[87,0,1,2,3,4,5,6,7,8,1],[6,4,5,1,0,7,9,8,5],[6,0,2,7,9,8,3],[6,1,2,7,9,10,8,3],[6,1,0,7,10,8,3],[6,1,0,7,3],[6,0,6,2,7,9,10,8,4],[10,3,2,0,1,4,5,7,6,8,5],[10,0,4,5,7,9,6,2],[10,0,4,7,9,6,8,10,11,12,2],[31,0,1,2,3,2],[32,2,0,1,3,4,4],[91,0,1,2,3,1],[50,1,2,3,1],[92,0,1,2,1],[17,1,0,7,11,12,4],[17,0,3,4,5,2,6,8,9,11,12,9],[17,0,5,10,6,11,5],[17,0,11,12,2],[33,1,2,1],[33,1,1],[51,1,0,2,3,4,3],[34,0,1,2,2],[7,8,0,2,3,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,6],[7,1,10,30,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,2],[7,7,3,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,4],[7,8,3,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,4],[7,7,0,4,6,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,26,27,5],[7,2,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,2],[7,0,10,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,2],[7,10,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,1],[7,0,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,2],[7,7,0,4,6,5,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,26,27,6],[7,0,2,4,5,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,6],[7,9,0,2,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,36,29,24,25,31,32,33,34,26,35,27,4],[7,0,5,1,10,30,28,11,12,13,14,15,16,17,18,19,20,21,22,23,29,24,25,31,32,33,34,26,35,27,4],[23,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[23,0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,3],[13,0,4,2,1,5],[8,2,1,4,12,4],[8,0,6,1,4,3,5,12,14,13,7],[8,0,2,1,10,12,5],[8,0,7,6,11,9,8,1,4,3,5,12,13,11],[8,0,2,1,12,15,4],[8,0,2,12,3],[36,0,1,6,2,7,8,5],[15,1,4,2],[15,0,2,4,3],[5,0,5,1,3,6,2,9,10,11,7],[5,0,5,1,3,6,2,9,10,7],[5,0,5,1,3,4,7,2,8,9,10,9],[5,0,1,2,9,11,4],[5,0,5,1,3,4,2,9,7],[5,0,5,1,3,4,7,2,9,10,11,8],[5,0,5,1,3,4,7,2,9,10,12,11,8],[5,0,1,3,4,6,2,9,10,11,7],[5,0,5,1,3,4,7,2,9,10,8],[5,0,1,3,4,2,9,10,12,6],[24,2,3,1],[95,0,1,2,3,4,3],[96,0,1,2,3,4,5,6,7,3],[97,0,1,2,3,2],[25,0,4,2],[38,0,1,2,3],[103,0,1,2,3,1],[55,1,2,3,1],[56,1],[61,0,1,2,3,4,2],[41,1,2,3,4,2],[42,1,0,3,4,5,6,7,3],[42,0,2,3,4,5,6,7,3],[62,0,3,1,2,5],[113,0,1,2,1],[114,0,1,1],[115,0,1,2,3,1],[116,0,1,1],[117,0,1,1],[119,0,1,1],[28,0,1,7,3],[28,5,3,6,2,0,1,7,8,7],[122,0,1,2,3,2],[123,0,1,2,3,4,5,5],[124,0,1,2,3,4,5,6,5],[125,0,1,2,3,2],[126,0,1,2,3,2],[127,0,1,2,3,4,1],[128,0,1,2,1],[129,0,1,2,3,1],[130,0,1,2,3,1],[131,0,1,2,3,4,1],[132,0,1,2,3,4,5,1],[133,0,1,2,1],[19,0,3,4,5,3],[65,1],[137,0,1,1],[140,0,1,2,3,1],[66,1,2,3,1],[66,0,1,2,3,4,5,6,7,2],[67,2,3,4,1],[67,0,1,2,3,4,3],[141,0,1,2,3,4,5,2],[143,0,1,2,2],[68,1,1],[144,0,2],[145,0,1,1],[147,0,1,2,3,4,5,6,7,4],[149,0,1,1],[150,0,1,1],[151,0,1,2,3,4],[152,0,1,2,3,1],[153,0,1,2,3,4,5,6,1],[154,0,2],[155,0,1],[156,0,1,1],[157,0,1,2,3,2],[158,0,1,2,3,4,1],[159,0,1,2,3,4,2],[160,0,1,2,3],[161,0,1,2,2],[162,1],[163,1],[164,0,1],[165,0,1,2,2],[166,0,1],[167,0,1],[168,0,1],[169,0,1],[170,0,1],[171,0,1,1],[172,0,1],[173,0,1],[174,0,1],[175,0,1,2],[176,0,1],[177,0,1,2,3,3],[178,1],[179,0,1,1],[180,0,1],[181,0,1],[182,0,1,2,2],[183,0,1,2,3,4,5,4],[184,0,1,2,2],[185,0,1],[186,0,1,1],[187,0,1],[188,0,1],[189,0,1],[190,0,1],[191,0,1],[192,0,1,2,1],[193,0,1,1],[194,0,1,3],[195,0,1,2,2],[197,0,1,2,1],[198,0,1,2,1],[199,0,1,2,1],[200,0,1,2,1],[201,0,1,2,3,1],[202,0,1,2,1],[203,0,1,2,1]],[[[[12,"NorthernHeights_02_EndFlag_01"],[11,"NorthernHeights_02_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[19,42]],[[[12,"SM_Number_1"],[140,"SM_Number_1",[-2],[2,"898tq3Q+FeIJKsZdApLi7g",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_1",1,[[25,-3,[0,"74TH4Z5upeEJiKzuCdzY0R"],[0],[23],1]],[2,"45xINmDJZbkLkMeSXwjlJZ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,340]],[[[12,"NorthernHeights_06_Snowman_01"],[11,"NorthernHeights_06_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"d6ZfKOhiBP1JGSkMpo5vAh",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,22]],[[{"name":"UI_Button_Store Shadow","rect":{"x":0,"y":0,"width":92,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[341]],[[[12,"NorthernHeights_Spring_DeadTree_02"],[11,"NorthernHeights_Spring_DeadTree_02",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["2cxL6p7a1ZpocvH+ANJ3Kn"]],[10,0,null,1,[9,"2cxL6p7a1ZpocvH+ANJ3Kn",-4,[13,"17DKJxLNNIQq42SgAb71cN",1,[[6,"SM_DeadTreeSpring_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["a34v/yDaVayo4nrN+1Gp18"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[342,6]],[[[12,"NorthernHeights_01_Snowman_03"],[11,"NorthernHeights_01_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"d6ZfKOhiBP1JGSkMpo5vAh",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,8]],[[[12,"Content Holder_Store"],[163,"Content Holder_Store",33554432,[-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[5,-2,[0,"92rU7acLBBA4ggmgKAneTo"],[5,414,896]],[90,45,100,100,1,-3,[0,"dcjgxUL2pIf522RYy0Ky/y"]],[134,false,-4,[0,"15UKD/hJNKxK23o4yFGKrc"],[153,154,155,156,157,158],159],-5,[167,-7,[0,"abFY1edytDqoHrIDrh6bFm"],-6],[249,-9,[0,"57/e10xkVBt7s9NJUms4QU"],[[145,"playWindTransition",[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-8]]],[145,"playMenuIntro",[[285]]],[145,"playRewardsIntro",[[285]]]]],-10,[250,-16,[0,"15Q8ZmUAFL04sqj6noOZz4"],-15,[-11,-12,-13,-14]]],4,4,4,1,4,4,1,4],[2,"cbSeFN+YtN9b2RO/aItXVo",-1,0]],[102,"UIStore",33554432,[-34,-35,-36],[[27,-26,[0,"40blpI3nZDvJR88EJ7k/oI"]],[386,-31,[0,"a2SQ1orIpEFprg6zBpoiAY"],1,-30,-29,-28,-27,81,82],[286,-33,[0,"21RI8PHl1FO5X80oD0Vmnh"],-32]],[2,"5eqyYVIi9BtKHtlq6ZRhV7",1,0]],[132,"Button_Wish",33554432,[-48,-49,-50,-51],[[[5,-37,[0,"0e4dNC8NlILqqR0lX+D7IF"],[5,140,136]],[125,0,false,-38,[0,"9aT7UhnT9DobptlTcMScNa"],[4,4281539080],79],[110,3,0.9,-42,[0,"3d/a5nud9L+KbEN1EdbcyX"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-40],[42,"9df7eULd0xL9YoeTQn6dXdL","purchaseOrEquip",2],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","click",-41]],-39,83],[104,13,-43,[0,"58/IIyGE1BPZHO0OX+lMNb"]],[247,false,true,-44,[0,"e4RpppYfdKtq95RlfOePov"],[84,85,86,87,88],89],-45,[167,-47,[0,"05l+VMHkxH/ZS9LU4sx8ob"],-46]],4,4,4,4,4,1,4],[2,"0cpNt0GlpNYZs+xcaQY9b+",1,0],[1,115.94,135.828,0]],[102,"Button_StoreItem",33554432,[-66,-67,-68,-69],[[5,-52,[0,"65O5rR5z5OU7xTXsww99Ms"],[5,82,78]],[39,0,-53,[0,"d1B0wLPNxNPY6H5iuO6mlh"],[4,4294563521],134],[393,false,false,3,0.9,-56,[0,"f5SnoWs8xGQLX4zxAu09/S"],[[42,"89809SEwNdEF7xmaZgSjTo+","onClick",-55]],-54,135],[292,-62,[0,"f69CaPOkxJc5zP2TK5WanN"],-61,-60,-59,-58,-57],[134,false,-63,[0,"17s4FBdHBDHqTaDh5ljfjX"],[136,137,138,139,140,141,142,143,144,145],146],[396,false,-64,[0,"4bZ3uDMMVCVrqVx8rlsW2x"],147],[397,false,"sfx_ui_generic_tap",null,-65,[0,"72GfmJiJ5IRpOpws/wqEET"]]],[2,"0e+NYyXftAG5jZG6PChnSi",1,0]],[102,"Holder_Snow Panel",33554432,[-72,-73,-74,-75,-76,-77,-78,-79,3],[[5,-70,[0,"60LYIX8fxCmaUf/kmCX5U9"],[5,414,100]],[124,44,100,1,-71,[0,"f3rv0UyztMWrT8Z/SpFJH3"]]],[2,"51nJ354+lFJ47diKcQlGpv",1,0]],[237,"Button_Yes",33554432,[-91,-92],[[[5,-80,[0,"37Dn4b0jBDZr1w7sqxtger"],[5,140,136]],[125,0,false,-81,[0,"a7W16AZyJJiK67ixePQlhs"],[4,4281539080],100],[110,3,0.5,-85,[0,"0a6c8Puo9GHIdsjgVkTic6"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-83],[42,"9df7eULd0xL9YoeTQn6dXdL","gachaPull",2],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","click",-84]],-82,101],[104,13,-86,[0,"2aSEkELDhMdbKAUvJaOuIp"]],[247,false,true,-87,[0,"0diKtGbOVPxr5884IJe63K"],[102,103,104,105,106],107],-88,[167,-90,[0,"baqHgX/UhK+p98lHo3jkBN"],-89]],4,4,4,4,4,1,4],[2,"bdsllWz2tJrJXqffMlh72z",1,0],[1,93.936,-119.448,0],[1,0.6,0.6,1]],[237,"Button_No",33554432,[-104,-105],[[[5,-93,[0,"bdpQszyhBPaJSWJzogD+Iz"],[5,140,136]],[125,0,false,-94,[0,"d6tKBTWOVKCqrL6NUNWViY"],[4,4281539080],111],[110,3,0.35,-98,[0,"3fK77Fv5pMV4psFFME3YwU"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-96],[42,"9df7eULd0xL9YoeTQn6dXdL","gachaPull",2],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","click",-97]],-95,112],[104,13,-99,[0,"d3TPeAK5tOjJovybnqp38t"]],[247,false,true,-100,[0,"726JTnfjhAApbTD3yaZtQI"],[113,114,115,116,117],118],-101,[167,-103,[0,"91KzwDpLBIb6SvT6mWuL35"],-102]],4,4,4,4,4,1,4],[2,"bd728hHJlLQZVHjmKMYKYF",1,0],[1,-29.233,-147.754,0],[1,0.45,0.45,1]],[272,"PageView",33554432,[-113,-114],[[[278,"pageView-horizontal<UITransform>",-106,[0,"ed35PA+BZLG67nNeabFc2O"],[5,414,220]],[50,45,500,400,-107,[0,"01PC1CFntAj7rft/89fBN8"]],[387,"pageView-horizontal<Sprite>",false,1,0,-108,[0,"4cKgzR0KRAs54adLIMRL3w"],3],-109,[398,-112,[0,"77eI2UhLhG1aN7nfDjBJoj"],-111,-110]],4,4,4,1,4],[2,"12m+LpzldLOJH/ZIPQcZC1",1,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[132,"Button_Tab01",33554432,[-125],[[[5,-115,[0,"b1PIjwSwFInIcrsKwiL7hj"],[5,54,54]],[31,0,-116,[0,"0cPBbzXE1IzJ3QnxEq8C0n"],23],[110,3,0.9,-119,[0,"966y/26mhE9rDhfgI2NsBD"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-118]],-117,24],[134,false,-120,[0,"58T01lGSNMx5Qv5VCDWy8l"],[25,26],27],-121,[104,9,-122,[0,"7dUnSnWQZDW5QhpOyYleNr"]],[399,-124,[0,"90KzI0iGdB+ZGzFD+OLs6g"],-123]],4,4,4,4,1,4,4],[2,"c8BT/fMwFClrjuKn0Qb3ZP",1,0],[1,27,0,0]],[132,"Button_Tab02",33554432,[-136],[[[5,-126,[0,"09BkU92vlP4Z7DxZ8RPAMS"],[5,54,54]],[31,0,-127,[0,"89HfIed8VOdpyt/kapKgBK"],31],[110,3,0.9,-130,[0,"adb4Rc6aNBnIoRfTbzOeSr"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-129]],-128,32],[134,false,-131,[0,"14FFil/q5GfaCzQ58iVWtk"],[33,34],35],-132,[104,10,-133,[0,"fcrh+5YxFEB5cJvxB+7HG9"]],[251,1,-135,[0,"6erLQFZX9LBJp+8LQTb9m8"],-134]],4,4,4,4,1,4,4],[2,"047QWq7qlG0qgZky7Hoq4S",1,0],[1,89,0,0]],[132,"Button_Tab03",33554432,[-147],[[[5,-137,[0,"89AJV5iFtNNLsd8aLcpS83"],[5,54,54]],[31,0,-138,[0,"09os0cBslNebj57dwvbTz2"],39],[110,3,0.9,-141,[0,"79V7qS1RtOdLfVr8XW8bXc"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-140]],-139,40],[134,false,-142,[0,"72XBWTVl9BP5Ve2D1UtmGp"],[41,42],43],-143,[104,11,-144,[0,"92Qz+ULxhB0qjmXzAfCu4H"]],[251,2,-146,[0,"710jnyhPZHaJK/BadXdpGQ"],-145]],4,4,4,4,1,4,4],[2,"a2qv0KvwNF1ren9OqUyuW5",1,0],[1,151,0,0]],[132,"Button_Tab04",33554432,[-158],[[[5,-148,[0,"15tUQgZQZIZKFSFPPhk+LH"],[5,54,54]],[31,0,-149,[0,"5f9pWswmdCO7n99AayU6ZP"],47],[110,3,0.9,-152,[0,"3f28ysCFNML7GyZ+n6Alpx"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-151]],-150,48],[134,false,-153,[0,"7c/Ipws5tHtrhQuA7u/ysf"],[49,50],51],-154,[104,12,-155,[0,"93toZzfwVOY5OGKG8POL/P"]],[251,3,-157,[0,"315335vxVCkL6MeffaNTyb"],-156]],4,4,4,4,1,4,4],[2,"95G2eSawRMwoOZnHdl16wG",1,0],[1,213,0,0]],[49,"Button_Back",33554432,5,[-167,-168,-169],[[5,-159,[0,"9bIJ+3xIpLRLQWcUv0mRXh"],[5,96,86]],[31,0,-160,[0,"5eQqBekJtKebjamt3cXuuE"],55],[110,3,0.9,-163,[0,"1fuuFneHhLMYbxPsQBacqA"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickBack",1],[42,"d1211Et/SJNYq2ml8IrDiXQ","onClick",-162]],-161,56],[400,-165,[0,"cb3C8q9hhNL4TNGOJF1M4g"],-164],[381,-166,[0,"62Q1XVaG5PQpEREDINGpS8"]]],[2,"33RVENEYdNIphjVq9mE6D5",1,0],[1,140.339,9.243,0]],[319,"Holder_TabIndicator",false,33554432,[-172,-173,-174,-175,-176,-177],[[5,-170,[0,"4drKk9q2FK56E9y0Io7gU8"],[5,54,20]],[105,1,1,6,-171,[0,"eb+or0Y8xPw6WO9m+37OOO"]]],[2,"59cvO3Cc9ASKfeNsd3TWzF",1,0]],[102,"VFX",33554432,[-180,-181,-182,-183,-184,-185],[[27,-178,[0,"dfqpQSyhFFnrWvCfBdRn3K"]],[118,true,-179,[0,"f8FFDWkJpDvo+HCAdMp66I"],[72],73]],[2,"e4zQIwRq9KFZIAKiZWPVIO",1,0]],[102,"Panel_Outline",33554432,[-188,-189,6,7,-190,-191],[[5,-186,[0,"217I3yT+1G+p5/5EgqgImt"],[5,352,340]],[34,-187,[0,"c9BCjDkVdIeonGNKq/tcr/"],[4,4281539080],152]],[2,"f4jbU0i6pPfrWsL4fsycEI",1,0]],[49,"Holder_Tabs",33554432,5,[9,10,11,12],[[41,-192,[0,"1cprlfRWpNfZnyBklpqtPb"],[5,240,100],[0,0,0.5]],[178,4,24,-68,1,-193,[0,"97Edgt2zdOwZqKEE8HXcE6"]],[105,1,1,8,-194,[0,"2eUsv1ipxE5byjd9bs2t0H"]]],[2,"efC5Gy5IdNW5fef9B5ijZA",1,0],[1,-183,0,0]],[68,"Button_Color",33554432,3,[-197,-198,-199],[[5,-195,[0,"faYPF65n1Oja763uTo/ZDU"],[5,140,136]],[96,0,false,-196,[0,"0cLihDGURIfIZZFA514Rcz"],65]],[2,"69C+Zq9g9F47ExD0IkHvey",1,0]],[68,"Button_Outline",33554432,4,[-203,-204,-205],[[5,-200,[0,"1bdjvARQpMK7MWbd71H5HP"],[5,82,78]],[31,0,-201,[0,"59Jgy3I5JGEYpkZ7bW9FKc"],122],[50,45,92,88,-202,[0,"a8QG19tVlPsZ/puEVY0Oet"]]],[2,"ba1dzGrQBBbqQykXOM2tRV",1,0]],[273,"PivotGachaItems",33554432,4,[-208,-209,-210,-211],[[[27,-206,[0,"a5G/1xrwBJnYtwnzIcEyJN"]],-207],4,1],[2,"c01KCAJK1Pq5b1V8n3uWPB",1,0]],[49,"Status_Panel (New)",33554432,4,[-215,-216,-217],[[5,-212,[0,"97b6jR73tKiKdbWzeH2S7U"],[5,35,34]],[39,0,-213,[0,"a1+d81BrNIzK1xOOePzNst"],[4,4281539080],133],[279,false,45,45.494,1.5060000000000002,37.25,6.75,84,36,-214,[0,"98y1cJ7OZJA6M67FdjmtQl"]]],[2,"58gWy8o7JKYrntDYrk7qRG",1,0],[1,23.164,-16.654,0]],[49,"BotPanel",33554432,1,[5],[[5,-218,[0,"7btcOI2CxAdZaGmEz9QeX8"],[5,414,100]],[124,44,100,1,-219,[0,"a2HOkzzjJKE5mDrqE8co0m"]]],[2,"9bvK2urlFOYYlHkeXR1kr6",1,0],[1,0,-398,0]],[320,"content",33554432,[[41,-220,[0,"73anae+PFDW51Lk22N0XbR"],[5,1242,360],[0,0,0.5]],[401,1,1,true,-221,[0,"8aKiJ8Z8VL+KOWA3HMaRWZ"]],[360,5,4.7748263676261615e-15,-4.7748263676261615e-15,300,-222,[0,"1aRI4jDYVLn706qzFyvPgV"]]],[2,"d0ouGCSUJCgqrCUXOi07kV",1,0],[1,-203,0,0]],[69,"Holder_Divider&Pages",33554432,5,[-225,14,-226],[[5,-223,[0,"87eTUiVVVHaIyKyhbreCQp"],[5,-30,20]],[105,1,1,30,-224,[0,"eczFEOp/xPKqCjlF2A1IvC"]]],[2,"135tyb1pNIFZpvDaON+rxX",1,0],[1,20.487,198.207,0],[3,0,0,0.10452846326765347,0.9945218953682733],[1,0,0,12]],[102,"Button_Color",33554432,[-230],[[5,-227,[0,"7eqCeAoTlIIb8jd7NZ38mu"],[5,54,54]],[39,0,-228,[0,"88/AE8AppAcpdYDHmNGaAY"],[4,4282876415],21],[219,false,45,52,52,-229,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"33ZIElvdRKT4/NNiQq8eWa",1,0]],[102,"Button_Color",33554432,[-234],[[5,-231,[0,"77sXpiK9JFUoirAps4D8yL"],[5,54,54]],[39,0,-232,[0,"80rhNEArBCEZ4of1jf5evm"],[4,4282876415],29],[219,false,45,52,52,-233,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"84Fs2Wbo5MkoDJrgCgaOLl",1,0]],[102,"Button_Color",33554432,[-238],[[5,-235,[0,"0bIZLp7u1F9LhbZZCCWyKI"],[5,54,54]],[39,0,-236,[0,"64Bh/TNOVGfL43Uc0Q2uJS"],[4,4282876415],37],[219,false,45,52,52,-237,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"00FjyT031EGL0FRvnPVjoA",1,0]],[102,"Button_Color",33554432,[-242],[[5,-239,[0,"82zfbcAIBAFrZJQgbGo4h1"],[5,54,54]],[39,0,-240,[0,"36b5NcSqJOhqQLVy9JpScz"],[4,4282876415],45],[219,false,45,52,52,-241,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"1bsGv+0dFKMoOniEcCn2QR",1,0]],[321,"GlowMask",33554432,[-246,-247],[[5,-243,[0,"d5RYFDYEFAiLhQmy7VQBHN"],[5,130,130]],[294,3,-244,[0,"ec9af5eWhCIblTDOcpRH8w"],76],[118,true,-245,[0,"e1XIYaPh1ML4oB6RWrB8mp"],[77],78]],[2,"68nprpYghMpKOoYcGRgnqP",1,0],[1,1.1,1.1,1]],[26,"StoreEventsTabs",33554432,2,[[27,-248,[0,"1aoPyzzoRNVLYdF3LCmrq5"]],[74,9,-249,[0,"1fqZvLwjBAT4TAYpqrAaDm"],[[42,"9df7eULd0xL9YoeTQn6dXdL","showHelmets",2]]],[74,10,-250,[0,"c8KkPpWzlNHqPtM+pYQJgb"],[[42,"9df7eULd0xL9YoeTQn6dXdL","showBodyColors",2]]],[74,11,-251,[0,"1dbC3teZNM0obwvIt2N3Xk"],[[42,"9df7eULd0xL9YoeTQn6dXdL","showSnowboards",2]]],[74,12,-252,[0,"ff9TVO37tMGJurS5QJrB5K"],[[42,"9df7eULd0xL9YoeTQn6dXdL","showStunts",2]]]],[2,"a8ow6tckVK4p8WtyJ16k14",1,0]],[194,"Holder_VFX",false,33554432,1,[-255,-256],[[5,-253,[0,"f7hnMOxBhDEaQk4duKVw6C"],[5,414,896]],[50,45,100,100,-254,[0,"62QYPSNzpI26uDBh0zoCvw"]]],[2,"95sGGAxwBFqqPlcsx5XfmI",1,0]],[194,"MidPanel",false,33554432,1,[-259],[[5,-257,[0,"0cqiKLFWRM/KFXbsiV+3Tn"],[5,414,896]],[90,45,100,100,1,-258,[0,"041dfcIJVE77XlM3gy+3Zr"]]],[2,"2dCzjnTstMeYXAT0fCFaaG",1,0]],[69,"Panel_Color BG",33554432,5,[-263],[[41,-260,[0,"e2ts/fzkFPYJB+3iFJZn57"],[5,852,640],[0,0.5,0]],[201,3,0,1,-261,[0,"acTlX5baFNILqHEDlCmlIS"],2],[280,44,-173,-265,-223.75900000000001,60,1,-262,[0,"30gAvwBU5P+rv0xeqU3UpY"]]],[2,"60d87xWd5G+ZLH7goPXkV5",1,0],[1,46,-273.759,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[49,"view",33554432,8,[23],[[5,-264,[0,"5cVA3uZb1GN6FIFR34Moa/"],[5,414,360]],[405,-265,[0,"555XIDjI1NjagEm8bVcjTi"]],[361,45,-73.5,-66.5,500,300,-266,[0,"d4p6SAgyVHfZYix4zFaBTM"]]],[2,"6aGWudWjdDG4wXqLlchlN8",1,0],[1,0,3.5,0]],[238,"Holder_ButtonBack",33554432,[-269,-270],[[[5,-267,[0,"7ebrv1DjdN/JQYD/z+nBGO"],[5,50,50]],-268],4,1],[2,"beIG+8pixO1ap9iuU1PQU0",1,0],[1,-174,0,0],[3,0,0,-0.043619387365336,0.9990482215818578],[1,0,0,-5]],[238,"Holder_ButtonNext",33554432,[-273,-274],[[[5,-271,[0,"d3okH/fO9A6qobh7FDp/UX"],[5,50,50]],-272],4,1],[2,"1eOhuwHbxPjbcQAQ6tPC8A",1,0],[1,179,2,0],[3,0,0,-0.10452846326765347,0.9945218953682733],[1,0,0,-12]],[69,"Panel_Color Bot",33554432,5,[-278],[[41,-275,[0,"1eaiRf9kZP076A/pE1EXWU"],[5,852,420],[0,0.5,0]],[287,3,0,1,-276,[0,"34QWjAu5BKxa/LVa3Ki9jV"],[4,4281539080],17],[280,44,-173,-265,-223.75900000000001,60,1,-277,[0,"1focCtubpKwb5WzdBkmVtc"]]],[2,"0dcwpRHuNDXb71mkN5Wjp0",1,0],[1,46,-273.759,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[49,"Holder_Currency Total",33554432,5,[-281,-282],[[5,-279,[0,"87rNtdvzFC1Kzn0x5Ouv3b"],[5,180,90]],[82,-280,[0,"ce2lxWN0hBOZmND8ka31vN"]]],[2,"50MfWCW6ZC+YLeCHYzh84n",1,0],[1,-94.628,86.342,0]],[68,"Button_Outline",33554432,9,[25],[[5,-283,[0,"622YWdx/RP2ZqZZ1elMCV4"],[5,54,54]],[31,0,-284,[0,"52HWaSUt9JmqhvI+5PznVy"],22],[90,45,52,52,1,-285,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"7aAlwdl9JNgq8Dl/54tBi5",1,0]],[68,"Button_Outline",33554432,10,[26],[[5,-286,[0,"e0y/kOXk9DLp6x/FNhHEVV"],[5,54,54]],[31,0,-287,[0,"0chr94Db5FvaebboniVQYu"],30],[90,45,52,52,1,-288,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"56FiZCMAxNsJNUYZo7pgd4",1,0]],[68,"Button_Outline",33554432,11,[27],[[5,-289,[0,"53Yi2fbjxKVIAQPuBMSVMx"],[5,54,54]],[31,0,-290,[0,"052CIC3rJKM6zgWYlZ6ijQ"],38],[90,45,52,52,1,-291,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"ceCy1yOkVI/5/24A5j+rPN",1,0]],[68,"Button_Outline",33554432,12,[28],[[5,-292,[0,"62mbFOY+xMN6Pd+GhRY760"],[5,54,54]],[31,0,-293,[0,"d3tv28L3lNc4R7OTR10esN"],46],[90,45,52,52,1,-294,[0,"bcqs0mbClNIZMXCtQEabOp"]]],[2,"4c3/js6O5FsZPKz7LXwLih",1,0]],[26,"Button_Color",33554432,13,[[5,-295,[0,"8eSoxsjQlEUJrlry+nQAXo"],[5,96,86]],[39,0,-296,[0,"66T0hMpdFKf5/n2vhJuY61"],[4,4294400626],53],[50,45,88,76,-297,[0,"bdoQ82VkdG07mMm3PnDBLF"]]],[2,"d1p68GJu1P2rJFvHvS2AUz",1,0]],[322,"GlowMask",33554432,18,[-300,-301],[[5,-298,[0,"57C3S8dQVAGa/HxrQMHv31"],[5,130,130]],[294,3,-299,[0,"d1j8uA0GtCSIJOE1EFbo1T"],61]],[2,"53wX5ehURG+r+3fxa5Q+QI",1,0],[1,1.1,1.1,1]],[49,"Panel_Cost",33554432,18,[-304,-305],[[5,-302,[0,"14CJNqgChFebL4KqrmgeJ3"],[5,96,36]],[125,0,false,-303,[0,"0b69c/gbFBuJAosEMBhcm3"],[4,4281539080],64]],[2,"dfkDqWxslKDKYKSfiZnfI7",1,0],[1,-6.588000000000022,-9.573000000000008,0]],[26,"InputBlocker",33554432,1,[[5,-306,[0,"41VkcqgTJHrZZkvQUW+Olv"],[5,914,1396]],[252,-307,[0,"310Zp3y3JMWKEQf4586a8h"]],[165,45,-250,-250,-250,-250,100,100,-308,[0,"69sU+Jp0FJXrtPYVKA8tA8"]]],[2,"3f3YQQ0dpCsZ9v7IeILuKZ",1,0]],[46,"Particle_Transition",33554432,31,[[182,1,false,4,false,true,-309,[0,"69/Wr3Hy5I15kSk5XB0Y2l"],[[90,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,1,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,91]],[76,-310,[0,"acFEtPjopAbqy/XQ3wULPx"]],[5,-311,[0,"75rb3PN4lHkpGNMAmzvZp4"],[5,100,900]],[178,16,-1088.915,-930,1,-312,[0,"14PSFrKChFLLDUq+0RVXzH"]]],[2,"34H0qP+E5ODI5LPST40Y9a",1,0],[1,-930,-164.343,300],[3,0.067773181554978,-0.703851401832742,0.067773181554978,0.7038514018327422],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[46,"Particle_TransitionBack",33554432,31,[[182,1,false,4,false,true,-313,[0,"63beotwtZHxJDa2+csApsp"],[[92,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,1,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,93]],[76,-314,[0,"c7ql+upNFO65sC+n6dBQq5"]],[5,-315,[0,"2fbV8F6B9HEKGSz4pScC1+"],[5,100,900]],[178,16,-1088.915,-930,1,-316,[0,"39Uof8jvhO7qlp7FWAjg8a"]]],[2,"ba3Y8IXDdOnrsdoQcO13L2",1,0],[1,-930,-164.343,300],[3,0.067773181554978,-0.703851401832742,0.067773181554978,0.7038514018327422],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[194,"ConfirmationPanel",false,33554432,1,[-319,16],[[5,-317,[0,"57BGtbcA5CHoskd1lFgeqM"],[5,414,896]],[90,45,100,100,1,-318,[0,"3dVT/r8l5AoqHut63FvuqL"]]],[2,"cfRX6KuCdGTYd933R4baco",1,0]],[26,"Overlay",33554432,49,[[5,-320,[0,"73vJR4ciBEGLssYo4kiCpj"],[5,414,896]],[39,0,-321,[0,"1eMtfRhq1OV4tTBOtqfAtz"],[4,3694336520],94],[90,45,40,36,1,-322,[0,"d2rIO0UTtLxIIr7HtbkOWU"]],[252,-323,[0,"a4TXlOE8FAYJOj1HmA+yr9"]]],[2,"9eDpmAP5ZLN4jqufKnXU5Q",1,0]],[68,"Button_Color",33554432,6,[-326],[[5,-324,[0,"aaycPYDFhCv4zkrU5YK9k0"],[5,140,136]],[96,0,false,-325,[0,"458piqUYhDXYj83vjd33hB"],99]],[2,"4dAU48VNBL462U2DJ1qMEO",1,0]],[68,"Button_Color",33554432,7,[-329],[[5,-327,[0,"96kX6uxbpMoIqu4w6iyNsc"],[5,140,136]],[96,0,false,-328,[0,"f1bwdcvA1FZKl/D6BQMqQI"],110]],[2,"6a6I7jzgtCY4L775g9OUet",1,0]],[26,"Button_Color",33554432,19,[[5,-330,[0,"5fEb95yHVEt4H4E9aJqKxX"],[5,82,78]],[39,0,-331,[0,"6dlfmYO6JE+rDapXSIldbS"],[4,4294632254],120],[50,45,92,88,-332,[0,"ef2jtnVwlGC55zWt1O5y5k"]]],[2,"d07N43U/RN7pIyE6UIwZ6K",1,0]],[102,"Panel_Cost",33554432,[-335,-336],[[5,-333,[0,"baqM0ES41LcJOIwmO2XZzp"],[5,96,36]],[125,0,false,-334,[0,"66/27C/gpNGIrvmUvzJhGO"],[4,4281539080],151]],[2,"9eAO+bX8RFRboYTEsBVoIj",1,0]],[22,"TopPanel",33554432,1,[[5,-337,[0,"30tBfY0ZlMNrHoAZLQ0l5j"],[5,414,100]],[124,41,100,1,-338,[0,"e7kUpA2s9JcLOeJbTEzVN8"]]],[2,"c5hvzdjeNMrLVdRdToMkpN",1,0],[1,0,398,0]],[262,"Overlay_BG",false,33554432,32,[[5,-339,[0,"cc9ry3vTdIfoi9/++3QV4g"],[5,414,896]],[39,0,-340,[0,"fecGxSPeVOXLaugkwgtSfp"],[4,4294400569],0],[50,45,40,36,-341,[0,"eb5rHzRMJKcIG3SBJ/QuRR"]]],[2,"28Xbn/fOJEtbLTYeAGOVPx",1,0]],[22,"Panel_Edge",33554432,33,[[5,-342,[0,"17jDtkYOZLy6uOrE79sdVH"],[5,852,100]],[388,0,1,-343,[0,"cePawyWDVMl6KOseph9F37"],1],[362,41,-100,852.761,1,-344,[0,"35z761aQhFC73+M3Nld1gt"]]],[2,"9d0ZQ4+NZEGI7Ky99o56ue",1,0],[1,0,690,0]],[69,"Holder_ShopItens",33554432,5,[8],[[5,-345,[0,"82s0jUIn5D15D3gn6sF1yO"],[5,414,220]],[363,281.656,1,-346,[0,"4eGWhe5jhHB4+wbQF0+nhz"]]],[2,"38F7v6GzNGuavVRL2pLUdO",1,0],[1,0.636,305.254,0],[3,0,0,0.008726535498373935,0.9999619230641713],[1,0,0,1]],[69,"Holder_Back & Next Buttons",33554432,5,[36,35],[[5,-347,[0,"71wyt320xPKK8gIuVZF+3M"],[5,670,20]]],[2,"34e8uMtpJL47sP8D3ZtEFn",1,0],[1,1.441,312.561,0],[3,0,0,0.10452846326765347,0.9945218953682733],[1,0,0,12]],[22,"Panel_Edge",33554432,37,[[5,-348,[0,"9b+w5jrU9KpL8rZFJg/IUO"],[5,852,100]],[287,3,0,1,-349,[0,"5cQUwsNYZBAo8uzClDK1dR"],[4,4281539080],16],[364,41,-2.3646883062777846e-14,2.3646883062777846e-14,-46.57400000000001,852.761,1,-350,[0,"2dwLtG3vBO7IdGhc8gP8sE"]]],[2,"a6djpHN/xJY7EKeezRcCgC",1,0],[1,0,416.574,0]],[69,"Panel_Color",33554432,38,[-353],[[5,-351,[0,"22J6Uwr0ZFaoXUDQItTxhd"],[5,132,64]],[34,-352,[0,"2dU7SNwHBM4bTu9YhMqjrh"],[4,4281539080],18]],[2,"1clNgpPj1CtqcUvaujKJrE",1,0],[1,18.007,3.769,0],[3,0,0,-0.008726535498373935,0.9999619230641713],[1,0,0,-1]],[22,"Icon_Skin",33554432,25,[[5,-354,[0,"b9jD3YZO1DKZ71dLSrVZrE"],[5,50,50]],[96,0,false,-355,[0,"082WTdQLJFxoF3h30r6W04"],20],[220,false,45,-1.879999999999999,5.879999999999999,-4.710000000000001,8.71,48,48,1,-356,[0,"62TL1+UvJDnancdu8Ls0q/"]]],[2,"11kdy9z2FAvKBnJ2E7KcqT",1,0],[1,-3.8799999999999955,6.710000000000001,0]],[22,"Icon_Skin",33554432,26,[[5,-357,[0,"57/6XIAY5LbJs0s9ionzbx"],[5,50,50]],[96,0,false,-358,[0,"4e171To6JIG5jixuvxOW7y"],28],[220,false,45,4.779,-0.7789999999999999,-3.3640000000000008,7.364000000000001,48,48,1,-359,[0,"f7EzyZEBVA56Ayf7nYcPp3"]]],[2,"6bbVUAdWFM3rpbTdDtpmd3",1,0],[1,2.7789999999999964,5.364000000000004,0]],[22,"Icon_Skin",33554432,27,[[5,-360,[0,"88vIBKzXpJ8pdcP7G/AW9N"],[5,50,50]],[96,0,false,-361,[0,"7fta8UA5BJ9b+UwajOmL8D"],36],[220,false,45,1.8069999999999986,2.1930000000000014,-1.036999999999999,5.036999999999999,48,48,0,-362,[0,"2efJ48aXhFdZhiB2+werzV"]]],[2,"f2gbJtiN9InbxEpAPO+B9w",1,0],[1,-0.19300000000001205,3.036999999999999,0]],[46,"Icon_Skin",33554432,28,[[5,-363,[0,"aa7MH+bBVOxbcobB+RCp3q"],[5,48,48]],[96,0,false,-364,[0,"6aVmE8h6xA1p5iKANfk4vc"],44],[220,false,45,2.5040000000000013,3.4959999999999987,1.186,4.814,46,46,1,-365,[0,"06KvZLyQxGdIvvwi4Usbdn"]]],[2,"adn8n3YaJDMLjCqo3Lah2p",1,0],[1,-0.4960000000000093,1.814,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5.000000000000001]],[26,"Button_Outline",33554432,13,[[5,-366,[0,"55TRQa2EZLB4683mEj9HaO"],[5,96,86]],[31,0,-367,[0,"0eP4gepkpC0YP+kXRBKOh5"],52],[50,45,88,76,-368,[0,"c6OC2mfbtJ7JlmENDW9zpU"]]],[2,"98bZFwE2RM47LCFaK1pSvM",1,0]],[46,"Text_Wish!",33554432,18,[[5,-369,[0,"17TFgwcYZA77FtFlqCV8Y1"],[5,89.84,33.16]],[99,"Unlock",26,26,26,false,-370,[0,"1f7CQcXwZN26jMe5q1C/8e"],62],[91,0.2,-371,[0,"91nkTEWVNLEYPiDaKPij7d"],[4,4281539080]]],[2,"2cBh1Ozl5OZ5diTcZOizf6",1,0],[1,-2.505,21.22,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5]],[68,"Holder_VFX",33554432,3,[15,29],[[27,-372,[0,"3bJOWGaKlGI6jm9JxfAO1M"]]],[2,"11WttSd/9CB6TvQeDVWluO",1,0]],[68,"Scripts",33554432,1,[-374,2],[[27,-373,[0,"01nDeu2J1GR71OdDTWGORd"]]],[2,"42ympbktlJsazbsZto2s2g",1,0]],[26,"StoreEventOpen",33554432,2,[[27,-375,[0,"dc7+o4s+JGoKdcqTTjMqYh"]],[74,1,-376,[0,"15eDtFXAtNvbQf3wsOr2Ti"],[[42,"9df7eULd0xL9YoeTQn6dXdL","show",2]]],[74,2,-377,[0,"4aWvmTlHlD67b9/p2WNPV3"],[[42,"9df7eULd0xL9YoeTQn6dXdL","show",2]]]],[2,"1baasJn4NI97A42RRxTq2T",1,0]],[26,"StoreEventHide",33554432,2,[[27,-378,[0,"07kEokSppEkoVx6B0dPYDE"]],[74,3,-379,[0,"bcdlcZGDlJ/p9+Kvr9EkHA"],[[42,"9df7eULd0xL9YoeTQn6dXdL","reloadCosmetics",2]]],[74,4,-380,[0,"9aKC+LHRFIk5QUKroMQ/mS"],[[42,"9df7eULd0xL9YoeTQn6dXdL","applyCosmetics",2]]]],[2,"60c+r/iwJFpp9YrwpDyfSj",1,0]],[46,"Text_Wish!",33554432,51,[[5,-381,[0,"92Hnk1z79KwrpadhpStx0s"],[5,59.589999999999996,33.16]],[108,"Yes",34,34,26,false,-382,[0,"20O2a6WtJB3LK1vrHZRpJr"],[4,4281539080],98],[91,0.2,-383,[0,"93ozBI71JGo6npCP/R/ARG"],[4,4281539080]]],[2,"65FUdfSLlIm66/NzaqfOub",1,0],[1,-2.505,10.55,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5]],[46,"Text_Wish!",33554432,52,[[5,-384,[0,"e0befcQfFJ7K8SUsxGkckx"],[5,45.62,33.16]],[108,"No",34,34,26,false,-385,[0,"fbi+ZGPEFFMY1noHQicwmt"],[4,4281539080],109],[91,0.2,-386,[0,"2eRvlnsBVKRai5WuvA5tbc"],[4,4281539080]]],[2,"48RCA8tPxIlJKjVIUh9asI",1,0],[1,-2.505,10.55,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5]],[26,"Gacha Color",33554432,19,[[5,-387,[0,"aeJyF32/NDEYt2mlPG7l2Q"],[5,82,78]],[39,0,-388,[0,"8bI4QWQdVBn4IGS1UKSkIB"],[4,16442174],121],[50,45,92,88,-389,[0,"deFqCBcuFOno1zpE8RNWaS"]]],[2,"43rLeXJNhAZ6vQaN6deWWk",1,0]],[172,"PivotBodyColors",8388608,20,[[27,-390,[0,"2eiUsRJUZEUZlBt9dvd4cL"]],[118,true,-391,[0,"616MwOtXJIC7OsCGSo7zjF"],[125],126]],[2,"c868WSxdRJg4rUW1rA94HV",1,0],[1,-4,-7,-1.5],[3,0.2355291986754818,0.057138667278520815,0.08925437835773739,0.9660718530300393],[1,47.99999999999999,48,47.99999999999999],[1,26.999999999999982,4,11.499999999999998]],[172,"PivotSnowboards",8388608,20,[[27,-392,[0,"e3KCoX05FPQZs4iYp7ok5r"]],[118,true,-393,[0,"bcS4dZiXNNmL3/K6+yGRcV"],[127],128]],[2,"19N6npXYNJPb+kdi6b2uc4",1,0],[1,-20.081999999999994,23.619000000000028,-5.182],[3,0.4770174817116392,0.8314580111451306,0.2171783212747037,-0.18429724526528177],[1,30.000000000000004,29.999999999999996,30.000000000000007],[1,-49.999999999999986,-132.879,45.495000000000005]],[26,"Gacha Status_Panel",33554432,21,[[5,-394,[0,"b4gmyNfGFFjpx509Mv82Op"],[5,35,34]],[39,0,-395,[0,"a9A1oQmGJH2oIKOfyQAHst"],[4,11482590],130],[50,45,84,36,-396,[0,"1fsaLLc0hIXq3/79ZTZNe0"]]],[2,"28awsyPCZPzInacdgx+IaH",1,0]],[69,"Holder_Price",33554432,16,[-398,54],[[27,-397,[0,"8dIY1IhMpByosSz01pAAQH"]]],[2,"2fCJarN9VMk7e0mf0J7pvq",1,0],[1,66.051,-15.585,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[195,"RaiseTransition",33554432,[[27,-399,[0,"c2jjVroXtHb700r1pGQmJ1"]],[104,15,-400,[0,"77hynf3dtKR75DDgeD+jmd"]]],[2,"74i2v7TsJCCYOXvgxCzm6W",1,0]],[68,"EventListeners",33554432,1,[-402,-403],[[27,-401,[0,"bbQQHzlbNPnpUW1BPXLu34"]]],[2,"c7OwMN+7dAhr9y0dhCU8bv",1,0]],[123,"indicator",33554432,8,[[[5,-404,[0,"5bQZYsjw5LlZD2mhSoU4ls"],[5,500,33.878]],-405],4,1],[2,"d88En1TOdCx4g2vz7V/1cW",1,0],[1,2.492,-111.38,0]],[445,"pageView-horizontal<PageView>",false,8,[0,"faNyw8eEJBfpNWv5YgbCUs"],23],[22,"Button_Shadow",33554432,36,[[5,-406,[0,"fczLMEozNFVp5WXt4ADp5p"],[5,32,35]],[39,0,-407,[0,"2cT71MwzVDs5G75TZG8BBs"],[4,1009981960],4]],[2,"5fEYfAlfdKNIHGr++/i+fW",1,0],[1,-1.321,-4.492,0]],[26,"Button_NextTab",33554432,36,[[5,-408,[0,"d3YltqHHJFDrE3sGh3uGc1"],[5,32,35]],[39,0,-409,[0,"5avJhYgq9IhLu2IA22B8JM"],[4,4281539080],5]],[2,"d0hcg51ZpP75VbIjiWCH3t",1,0]],[46,"Button_Shadow",33554432,35,[[5,-410,[0,"8dxOmpUgpF448kcyUannzy"],[5,27,35]],[39,0,-411,[0,"48vdM4LM1MwbC882mSCP2g"],[4,1009981960],6]],[2,"f2YPAZvwNFQaXPvYR3caMt",1,0],[1,-2.133,-0.332,0],[3,0,0,0.9961946980917455,0.08715574274765814],[1,0,0,170]],[46,"Button_NextTab",33554432,35,[[5,-412,[0,"6423s5/xJPNp1N9xCYNOVv"],[5,27,35]],[39,0,-413,[0,"42S0kJqbNGA5FVjMLeIKkO"],[4,4281539080],7]],[2,"d9mXt920xADbtcp9zj0poA",1,0],[1,-4.552,4.356,0],[3,0,0,0.9961946980917455,0.08715574274765814],[1,0,0,170]],[155,"Divider_Left",false,33554432,24,[[5,-414,[0,"b6FOQTyNROJ5zc74IIgRHn"],[5,278,10]],[34,-415,[0,"5cDyQjeG1FHLSD1pFTgxNs"],[4,4292467168],8]],[2,"63P7PTF7NK55ba2pwANmkw",1,0],[1,-196,0,0]],[22,"TabCircle 01",33554432,14,[[5,-416,[0,"92N3J92a5Ksr2X4xH1A8po"],[5,14,14]],[39,0,-417,[0,"08T3JAT7RJrKELAsqvKOTl"],[4,4290670659],9]],[2,"d24Igx3KBMDphtEofBElTu",1,0],[1,-20,0,0]],[26,"TabCircle 02",33554432,14,[[5,-418,[0,"feGPCLqjFNDb+YeKMNAguC"],[5,14,14]],[39,0,-419,[0,"d7wUF/grFNeIktYdDoZNU1"],[4,4290670659],10]],[2,"63VrKT4QlCzY2SQW4cy6IU",1,0]],[22,"TabCircle 03",33554432,14,[[5,-420,[0,"50RPwXen1KkZQ7tQevS0L1"],[5,14,14]],[39,0,-421,[0,"f9fI5VfVpO8aZTKmThryby"],[4,4290670659],11]],[2,"32rXbPrX1Iuqj29jMzj01n",1,0],[1,20,0,0]],[155,"TabCircle 04",false,33554432,14,[[5,-422,[0,"dfkhv0jJtJ2q+kOYp1NRca"],[5,14,14]],[39,0,-423,[0,"28/zRut4NDeqHW8tP7RDva"],[4,4290670659],12]],[2,"1dvwU00ttIqLkTDiLPkucR",1,0],[1,20,0,0]],[155,"TabCircle 05",false,33554432,14,[[5,-424,[0,"c7b2X9zXZDoKe5fVsD6Q4J"],[5,14,14]],[39,0,-425,[0,"a5KylqaLRLZorB66cDoddv"],[4,4290670659],13]],[2,"ba/YBaRz5EDaO00NfA6yUz",1,0],[1,40,0,0]],[155,"TabCircle 06",false,33554432,14,[[5,-426,[0,"1bJqIDicpEV5chEBpew7Al"],[5,14,14]],[39,0,-427,[0,"39NmnooKBBGbK6P1S5qFUk"],[4,4290670659],14]],[2,"e9S9otDbpPzqqv21zHM+jw",1,0],[1,50,0,0]],[155,"Divider_Right",false,33554432,24,[[5,-428,[0,"7fu4eYJCpAzY4+M+Vn96RC"],[5,278,10]],[34,-429,[0,"45iSha109NZpruFWXcVOvy"],[4,4292467168],15]],[2,"96jdqPGxtPJLAJZPRJa+xd",1,0],[1,196,0,0]],[158,"Text_Currency Total",33554432,61,[[[41,-430,[0,"6bs/dHZLRAsZxqqti/k2nE"],[5,96,50.4],[0,0,0.5]],-431],4,1],[2,"01m3vqCvxFzLUMtU3T+bfq",1,0],[1,-37.689,-8.376,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[22,"Icon_Currency",33554432,38,[[5,-432,[0,"19g5jxs59LHpRamwxjvvQx"],[5,58,58]],[31,0,-433,[0,"a5EyBW421MI5ym38L7yAt7"],19]],[2,"b4lAlBed1CcYoWdGeWBNo0",1,0],[1,-51.92700000000001,-9.631,0]],[46,"Text_Skin",33554432,13,[[5,-434,[0,"818eoh7tJIw7wJcvqmEeOV"],[5,59.26,31.5]],[108,"Back",24,24,25,false,-435,[0,"382V/ZJGlJeKUy3aatTaKX"],[4,4286587440],54]],[2,"38OR1peIZGtI2VJOFeG4Xu",1,0],[1,1.858,6.038,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5]],[97,1,[0,"dbo/Zu0+lOmpn/oXFf0+QH"]],[26,"VFX_Expand",33554432,3,[[5,-436,[0,"70epWNSjZBKZWzOp5qBIRv"],[5,140,136]],[96,0,false,-437,[0,"53CEZtpC9LpJ6wdt4sFssv"],57]],[2,"5fMBEn2RJHrbcTUy9+OMHy",1,0]],[26,"Button_Outline",33554432,3,[[5,-438,[0,"83sj6sdcBHGYBx+hpXVzsW"],[5,140,136]],[96,0,false,-439,[0,"3arfBrYutOY4AWkf9sjJsl"],58]],[2,"5bVC/9VyJJ4rLF/Gt2NVt/",1,0]],[46,"GlowSprite",33554432,44,[[5,-440,[0,"a6PbjAUW9K8alugKYbRlwS"],[5,40,200]],[39,0,-441,[0,"906ntJ/zJM56VYKj2UqbCj"],[4,16777215],59]],[2,"9e4dxlzApJNZHfDgEPXuyK",1,0],[1,1.402,3.734,0],[3,0,0,0.25881904510252074,0.9659258262890683],[1,0,0,30]],[26,"GlowSquare",33554432,44,[[5,-442,[0,"2eIihnjqdMa6buZyFweCSv"],[5,200,200]],[39,0,-443,[0,"61Oq61+nNGXJR2cde77J6R"],[4,16777215],60]],[2,"716v8ZD25EX5Yu+SAZ/tR3",1,0]],[158,"Text_Cost",33554432,45,[[[5,-444,[0,"49ReWub9dDbZrbIkWVJcr6"],[5,76,50.4]],-445],4,1],[2,"a6iShgJylH+bh76bmKdegd",1,0],[1,-4.23,-0.405,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[22,"Icon_Currency",33554432,45,[[5,-446,[0,"147vx1zgBLkJeZ/l2PBxLH"],[5,36,36]],[31,0,-447,[0,"45RFHHvxRDX6Jrm9FHjWPE"],63]],[2,"ffPi6K5dhGaKO/5hyYd4bd",1,0],[1,50.696,2.6,0]],[22,"Glow 01",33554432,15,[[5,-448,[0,"18rAkfxe9Aa54uGHNx7jtt"],[5,24,24]],[31,0,-449,[0,"5es9R5kuFC1bscaTltjjm3"],66]],[2,"43vxtpMlJO7qzhAkEwTedr",1,0],[1,3.454,49.868,0]],[22,"Glow 02",33554432,15,[[5,-450,[0,"b2ztx+BDdNMLhRy6BHKqQA"],[5,16,16]],[31,0,-451,[0,"e4Cq/C65JG0pcfmEMW/uoF"],67]],[2,"1f0H0FlwBNh5TlajyqsoYM",1,0],[1,-46.901,2.771,0]],[22,"Glow 03",33554432,15,[[5,-452,[0,"9dk3C+wUNMXLXcoQ+tdHUF"],[5,16,16]],[31,0,-453,[0,"79kDPm469MK6ZVJxBuk2eJ"],68]],[2,"3c75bypWpC652p+WgZ00P9",1,0],[1,-15.476,-30.302,0]],[22,"Glow 04",33554432,15,[[5,-454,[0,"10CzviaLtIlprIp7JBZeiF"],[5,8,8]],[31,0,-455,[0,"58axRuKedMrrByEFApZfQG"],69]],[2,"96XlLo4S9LuaCYQLwgmNRf",1,0],[1,13.212,-32.296,0]],[22,"Glow 05",33554432,15,[[5,-456,[0,"0107Qzx8BHd7iwojsEN59I"],[5,8,8]],[31,0,-457,[0,"d5glTGElVD8o8d5ibl/RYj"],70]],[2,"38iR0VBZ1GbJtdcNuo92aS",1,0],[1,41.427,39.152,0]],[22,"Glow 06",33554432,15,[[5,-458,[0,"07JpTp6ypHOqV6U/xL4uog"],[5,8,8]],[31,0,-459,[0,"a4ggeUyTZJLowPmvvIm/TY"],71]],[2,"38zYmL3mZGMLjve5quyF+B",1,0],[1,-29.566,44.158,0]],[46,"GlowSprite",33554432,29,[[5,-460,[0,"9e2N9lKLpLu7F9/haHvXkr"],[5,40,200]],[39,0,-461,[0,"d1GwD1sqlCLoBhKsD+7Vb2"],[4,16777215],74]],[2,"9efnigY21Ed6s3jnQsf2V5",1,0],[1,1.402,3.734,0],[3,0,0,0.25881904510252074,0.9659258262890683],[1,0,0,30]],[26,"GlowSquare",33554432,29,[[5,-462,[0,"48po04mLFEpKQRCFuH6viR"],[5,200,200]],[39,0,-463,[0,"0a1zVQtnpD5oVVYzm/LTbK"],[4,16777215],75]],[2,"a9398Ll1hDi5VlWrPa87xP",1,0]],[26,"GachaRoulette",33554432,69,[[27,-464,[0,"88ux9+7ChKSIbUZeqzFXHe"]],[446,"gachaRoll",2,-465,[0,"ccib3lHmxHa5Jr+ajD1Oau"],22,46,82,80]],[2,"a6bFcy4ldLk4/aWSeK4gi4",1,0]],[26,"Panel_Color",33554432,16,[[5,-466,[0,"aeV2zXWGBAxqpxngO6SVnt"],[5,336,324]],[34,-467,[0,"58Nb81kGJIBJMTPEa3GCsW"],[4,4294174947],95]],[2,"1ak3N7LNhAx5oV87Kj9hyj",1,0]],[46,"Text_Confirm",33554432,16,[[5,-468,[0,"32AeVV+dZAmqy/h/nAPRWR"],[5,195.76,50.4]],[258,"Comfirm purchase?",20,20,false,-469,[0,"70cKO/KBpDT4v2Q/90mS1N"],[4,4286677377],96]],[2,"24kkX7889LK6eXIq37Zfhs",1,0],[1,-19.122000000000014,76.48599999999999,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[26,"Button_Outline",33554432,6,[[5,-470,[0,"53OdWq/OFKsIEnzFCxhHrq"],[5,140,136]],[96,0,false,-471,[0,"aaTYASZ7xOJo8ECz9SKTIR"],97]],[2,"658GoaNYVDprDAlrFGkN8Q",1,0]],[26,"Button_Outline",33554432,7,[[5,-472,[0,"b7r7ApbmBCFYvqp+9uPCUn"],[5,140,136]],[96,0,false,-473,[0,"e4W9enzWVNhpWgdPE0eitl"],108]],[2,"94Dah4bvFOk4qxTtR2RUdz",1,0]],[263,"Holder_Item",33554432,16,[4],[[27,-474,[0,"12SA5EAIRNEoMfhCz5GAGO"]]],[2,"43Oz/pt9VKRL7M4PgJL8ah",1,0],[1,-55.121,-30.925,0],[1,1.2,1.2,1.2]],[26,"Gacha Color_Outline 1",33554432,19,[[5,-475,[0,"82O6t2BCZIsIF073OL6WA0"],[5,84,80]],[39,0,-476,[0,"47CNmU3TpBJpsHNRzW8Dgr"],[4,11482590],119]],[2,"14NueITfBM54EPMwEy1ziX",1,0]],[172,"PivotHelmet",8388608,20,[[118,true,-477,[0,"69PUy2GdpJF6CbP7Hs2YMB"],[123],124]],[2,"2fiuEGhttKC4frAQ3Nzx8B",1,0],[1,-5.699999999999989,-2.8000000000000114,7.4],[3,0.21390732870680887,0.3229411149012301,0.15654743068252022,0.9085403639787113],[1,48,48.00000000000001,48.00000000000001],[1,18.50000000000001,35.00000000000001,25.000000000000004]],[26,"PivotStunts",33554432,20,[[5,-478,[0,"7fc/WsvVZJo7iBHD3x7CKP"],[5,82,78]]],[2,"ddjxq43ApEC7gtojGmZDDJ",1,0]],[141,"Icon_Lock",false,33554432,21,[[5,-479,[0,"e7bJgh94dF+KxvFjGef590"],[5,24,30]],[39,0,-480,[0,"788D040mRMIYBbPiBMGzKO"],[4,4293979371],131]],[2,"f3ZwDVC8hDqYwI/wMl5B0s",1,0],[1,-1.463,1.93,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[46,"Icon_Equipped",33554432,21,[[5,-481,[0,"14hl/NcMZNAYYRl9j3Rvzj"],[5,26,26]],[96,0,false,-482,[0,"25r5hvVCFFH43rpVsfsHIi"],132]],[2,"2fKu+PldtHW53XP89ITGKk",1,0],[1,-1.677,0.498,0],[3,0,0,0.052335956242943835,0.9986295347545738],[1,0,0,6]],[46,"Text_for",33554432,78,[[5,-483,[0,"9f5UqYExVLzpPJTBb/p+m+"],[5,30.02,50.4]],[258,"for",20,20,false,-484,[0,"b4pQ3wn4NFlq4b0X382iFo"],[4,4281539080],148]],[2,"b8DyjzAN9DNIiz2fMte/1D",1,0],[1,-1.976,26.834,0],[3,0,0,0.026176948307873153,0.9996573249755573],[1,0,0,3]],[46,"Text_Cost",33554432,54,[[5,-485,[0,"fdSGYVeblPVK3Kq7xPaC4D"],[5,76,50.4]],[434,"2500",2,25,24,2,false,-486,[0,"efA9qITsxMx6aLm+jfy2In"],149]],[2,"d8m1Nk7A1MwYqzcRwxqyY+",1,0],[1,-4.23,-0.405,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[22,"Icon_Currency",33554432,54,[[5,-487,[0,"67Wv28y2xC56UQEexIL10j"],[5,36,36]],[31,0,-488,[0,"9ceBXCV9FM75b1y55Y2jO+"],150]],[2,"d2k1+L9mtEfp980UpDNsul",1,0],[1,50.696,2.6,0]],[68,"EventRaisers",33554432,1,[79],[[27,-489,[0,"d1EDAR919JUosoPsZhL9jM"]]],[2,"56do0kkvpNqKPwjnvMcc7s",1,0]],[26,"ListenOpenFromMenu",33554432,80,[[27,-490,[0,"94qM5LLcdJtoXP9cEFtT5s"]],[74,1,-491,[0,"53np67YYpAaLha791QJvII"],[[81,"2022ebMdchE2pNL1SpqTm8g","setBool","fromMenu,true",1],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStore",1]]]],[2,"71JrbEcKhHG7IvyBZrjvzh",1,0]],[26,"ListenOpenFromRewards",33554432,80,[[27,-492,[0,"3f/qDyhXhFAp3qGxyTYLKy"]],[74,2,-493,[0,"c2ffT8YANKXrufR6R8gzbo"],[[81,"2022ebMdchE2pNL1SpqTm8g","setBool","fromMenu,false",1],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStore",1]]]],[2,"60Na8LM8ZN0Ybzatx3bkEF",1,0]],[447,6,81,[0,"dddjjljSFFeJLYRtpBc0BD"],[5,14,14]],[291,3,35,[0,"1b8phVqNhABI11vIyhU18Y"],[[42,"d8801bg2ndDDJYXAenG0A5o","previousPage",8]]],[291,3,36,[0,"47rv9519pJo77xYpgX89eA"],[[42,"d8801bg2ndDDJYXAenG0A5o","nextPage",8]]],[227,"99999",0,29,32,32,2,false,false,95,[0,"d8dsoHXhdGI73rMau3kMQP"]],[97,9,[0,"63fcOvN+FLa52bM7+FyZQX"]],[97,10,[0,"984hRGXWtBJqX52MZOb2UY"]],[97,11,[0,"352Drkm2lADKoOfc08PJeg"]],[97,12,[0,"2dg4owNbpLM55ju6GmDljq"]],[435,"2500",2,25,24,2,false,103,[0,"75zLqxl49B5rpJzkqbyTl8"]],[97,3,[0,"72Gc6kplRMA7kdMGeF7dVW"]],[97,6,[0,"131Dw9GFdGJp66W7762EjG"]],[97,7,[0,"15rxTkBO1MNY7ietqoyyOk"]],[26,"Pivot_VFX_GachaRouletteResult",33554432,4,[[27,-494,[0,"25kqMp6MdM5a5C5r8CJZW9"]]],[2,"b9xvUh+QJCQY/vKShI1e/h",1,0]],[166,20,[0,"495CjHMepG2IK+OTa43mlu"],[129]],[82,1,[0,"18V1f573NC/Ir+mIvLeq9d"]]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-4,98,0,30,98,0,0,1,0,14,79,0,0,1,0,-7,144,0,-1,55,0,-2,32,0,-3,22,0,-4,31,0,36,144,0,0,1,0,-1,55,0,-2,32,0,-3,22,0,-4,31,0,-5,49,0,-6,127,0,-7,80,0,-8,69,0,-9,46,0,0,2,0,57,138,0,58,23,0,59,3,0,60,82,0,0,2,0,35,133,0,0,2,0,-1,70,0,-2,71,0,-3,30,0,0,3,0,0,3,0,21,18,0,14,3,0,14,3,0,0,3,0,0,3,0,0,3,0,-6,139,0,30,139,0,0,3,0,-1,99,0,-2,100,0,-3,18,0,-4,68,0,0,4,0,0,4,0,21,53,0,14,4,0,0,4,0,44,143,0,45,121,0,37,76,0,46,75,0,38,120,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,19,0,-2,142,0,-3,20,0,-4,21,0,0,5,0,0,5,0,-1,33,0,-2,58,0,-3,24,0,-4,59,0,-5,37,0,-6,38,0,-7,17,0,-8,13,0,0,6,0,0,6,0,21,51,0,14,6,0,14,6,0,0,6,0,0,6,0,0,6,0,-6,140,0,30,140,0,0,6,0,-1,116,0,-2,51,0,0,7,0,0,7,0,21,52,0,14,7,0,14,7,0,0,7,0,0,7,0,0,7,0,-6,141,0,30,141,0,0,7,0,-1,117,0,-2,52,0,0,8,0,0,8,0,0,8,0,-4,82,0,61,132,0,62,131,0,0,8,0,-1,34,0,-2,81,0,0,9,0,0,9,0,21,25,0,14,9,0,0,9,0,0,9,0,-5,134,0,0,9,0,30,134,0,0,9,0,-1,39,0,0,10,0,0,10,0,21,26,0,14,10,0,0,10,0,0,10,0,-5,135,0,0,10,0,30,135,0,0,10,0,-1,40,0,0,11,0,0,11,0,21,27,0,14,11,0,0,11,0,0,11,0,-5,136,0,0,11,0,30,136,0,0,11,0,-1,41,0,0,12,0,0,12,0,21,28,0,14,12,0,0,12,0,0,12,0,-5,137,0,0,12,0,30,137,0,0,12,0,-1,42,0,0,13,0,0,13,0,21,43,0,14,13,0,0,13,0,63,98,0,0,13,0,0,13,0,-1,66,0,-2,43,0,-3,97,0,0,14,0,0,14,0,-1,88,0,-2,89,0,-3,90,0,-4,91,0,-5,92,0,-6,93,0,0,15,0,0,15,0,-1,105,0,-2,106,0,-3,107,0,-4,108,0,-5,109,0,-6,110,0,0,16,0,0,16,0,-1,114,0,-2,115,0,-5,118,0,-6,78,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,-1,44,0,-2,67,0,-3,45,0,0,19,0,0,19,0,0,19,0,-1,119,0,-2,53,0,-3,74,0,0,20,0,-2,143,0,-1,120,0,-2,75,0,-3,76,0,-4,121,0,0,21,0,0,21,0,0,21,0,-1,77,0,-2,122,0,-3,123,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,-1,87,0,-3,94,0,0,25,0,0,25,0,0,25,0,-1,62,0,0,26,0,0,26,0,0,26,0,-1,63,0,0,27,0,0,27,0,0,27,0,-1,64,0,0,28,0,0,28,0,0,28,0,-1,65,0,0,29,0,0,29,0,0,29,0,-1,111,0,-2,112,0,0,30,0,0,30,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,-1,47,0,-2,48,0,0,32,0,0,32,0,-1,56,0,0,33,0,0,33,0,0,33,0,-1,57,0,0,34,0,0,34,0,0,34,0,0,35,0,-2,131,0,-1,85,0,-2,86,0,0,36,0,-2,132,0,-1,83,0,-2,84,0,0,37,0,0,37,0,0,37,0,-1,60,0,0,38,0,0,38,0,-1,61,0,-2,96,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,-1,101,0,-2,102,0,0,45,0,0,45,0,-1,103,0,-2,104,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,-1,50,0,0,50,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,-1,72,0,0,52,0,0,52,0,-1,73,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,-1,125,0,-2,126,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,-1,95,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,69,0,-1,113,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,-1,124,0,0,79,0,0,79,0,0,80,0,-1,128,0,-2,129,0,0,81,0,-2,130,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,-2,133,0,0,96,0,0,96,0,0,97,0,0,97,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,-2,138,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,0,117,0,0,118,0,0,119,0,0,119,0,0,120,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,128,0,0,128,0,0,129,0,0,129,0,0,142,0,4,1,2,11,69,3,11,5,4,11,118,5,11,22,6,11,16,7,11,16,8,11,58,9,11,17,10,11,17,11,11,17,12,11,17,14,11,24,15,11,68,16,11,49,23,11,34,25,11,39,26,11,40,27,11,41,28,11,42,29,11,68,35,11,59,36,11,59,54,11,78,79,11,127,82,64,130,494],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,133,134,135,136,137,98,138,139,140,141,143],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,22,-1,-2,19,3,3,3,3,22,-1,-2,19,3,3,3,3,22,-1,-2,19,3,3,3,3,22,-1,-2,19,3,3,12,3,22,3,3,3,3,3,12,3,3,3,3,3,3,3,3,3,-1,19,3,3,3,-1,19,3,47,65,66,22,-1,-2,-3,-4,-5,19,-1,17,-1,17,3,3,12,3,12,3,3,22,-1,-2,-3,-4,-5,19,3,12,3,3,22,-1,-2,-3,-4,-5,19,3,3,3,3,-1,19,-1,19,-1,19,-1,3,3,3,3,3,22,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,19,23,12,12,3,3,3,-1,-2,-3,-4,-5,-6,19,3,12,23,23,23,23,23,12,23,23,23,19],[21,84,21,189,67,67,67,67,190,68,68,68,68,68,68,190,191,21,152,28,343,85,86,51,51,77,43,43,344,85,86,51,51,77,43,43,345,85,86,51,51,77,43,43,346,85,86,51,51,77,43,43,7,9,0,20,20,87,87,88,88,153,0,28,192,153,69,69,69,69,69,69,193,193,88,88,153,194,194,70,195,347,196,70,89,59,90,91,92,59,60,61,60,61,21,348,0,87,0,349,70,70,89,59,90,91,92,59,87,0,350,70,70,89,59,90,91,92,59,44,45,45,44,93,93,94,94,95,95,52,46,197,198,46,46,46,154,155,156,157,158,159,52,160,161,162,52,199,0,0,28,192,351,200,201,352,202,203,163,163,353,0,96,96,96,96,354,0,164,164,164,52]],[[[12,"NorthernHeights_Spring_Snowman_03"],[11,"NorthernHeights_Spring_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["fdtTQJ29dV9rRj2w7jmDnV"]],[10,0,null,1,[9,"fdtTQJ29dV9rRj2w7jmDnV",-4,[13,"a9FMP9VqlLN7vt03/Aj7Xc",1,[[6,"SM_SnowmanSpring_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["314zUsDhRVAbDIw4DMD60F"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[355,6]],[[[12,"Level1"],[173,"Level1",[[232,8,0.3,-5,15,-2,[0,"b1Wc0B9G5Lyr0Zq6Qyan1F"],[73,20,24],[73,22,45],[169,5],[73,5,15],[73,5,15],[169,5],[73,25,35],[73,4,6],[233]]],[2,"30ri/pS/pO+ZMkTG+GtXvT",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[],[],[]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[165,23]],[[{"name":"UI_Smooth Outline","rect":{"x":11,"y":12,"width":206,"height":58},"offset":{"x":0,"y":3},"originalSize":{"width":228,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[356]],[[[12,"NorthernHeights_07_Tree_01"],[11,"NorthernHeights_07_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,24]],[[[37,"SM_FlowerSpring_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_FlowerSpring_02",[-2],[2,"311UjcO1NaB4MfVax75Hcn",-1,0]],[28,"SM_FlowerSpring_02",1,[[25,-3,[0,"37HwQkELtShbbm+KHwqQ/Q"],[0],[23],1]],[2,"3aG+SwUplTfYV0DwU8/Bh8",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[357,358]],[[[29,".bin",3901273871,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7344,"length":1572,"count":393,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7344,"count":153,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8888059854507446,-0.8936827778816223,-0.6796016693115234],"maxPosition",8,[1,0.6246675848960876,0.3762877583503723,1.794540524482727]]],-1],0,0,[],[],[]],[[[71,"sfx_ui_speed_level_up",".mp3",0.417959],-1],0,0,[],[],[]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[78,25]],[[[12,"NorthernHeights_Candy_SugarCane_01"],[11,"NorthernHeights_Candy_SugarCane_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["1eJGL4DTpQBru9cN0bIXZ+"]],[10,0,null,1,[9,"1eJGL4DTpQBru9cN0bIXZ+",-4,[13,"dcaH6ShrpIJo0cgDEOUZ77",1,[[6,"SM_SugarCane_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cfrZa53gFYlrAP6gytjkjP"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[359,15]],[[[12,"NorthernHeights_Autumn_Tree_04"],[11,"NorthernHeights_Autumn_Tree_04",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["84XkwkP29X8ZzAyABT0pML"]],[10,0,null,1,[9,"84XkwkP29X8ZzAyABT0pML",-4,[13,"75PWV3/vxEQammVbaBqsHj",1,[[6,"SM_TreeAutumn_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["db9mz7wxFdJYS1lx48iTd3"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[360,18]],[[[29,".bin",3301756486,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7872,"length":1944,"count":486,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7872,"count":164,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24076400697231293,-0.008920573629438877,0],"maxPosition",8,[1,0.2828725278377533,0.6243954300880432,0]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Christmas_Igloo"],[11,"NorthernHeights_Christmas_Igloo",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,29]],[[[12,"NorthernHeights_02_Snowman_02"],[11,"NorthernHeights_02_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"b2YmRoDQVB1opd/Tjk59lJ",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,19]],[[{"name":"UI_Panel_XP Outline","rect":{"x":0,"y":0,"width":220,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":220,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[361]],[[[12,"SM_Number_7"],[140,"SM_Number_7",[-2],[2,"ebydAkCKFZXoVobZNVAO5o",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_7",1,[[25,-3,[0,"4bTDTp++RXC4bTu+60C+Xq"],[0],[23],1]],[2,"82k60kfntUOLsMm8bd9/Qc",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,362]],[[[119,[[129,[89,[-8,-9,-10,-11,-12],[[92,-5,-4],[451,-7,-6,[[67,"levelUp"]]]],-3,-2,-1]]],[{},"levelUp",4,[77,2]]],[33,"Entry"],[137,"Empty"],[33,"Exit"],[33,"Any"],[43,"LevelBar_LevelUp",[35,0]]],0,[0,24,4,0,25,3,0,26,1,0,10,2,0,9,1,0,10,5,0,9,2,0,-1,1,0,-2,3,0,-3,4,0,-4,2,0,-5,5,12],[0],[15],[166]],[[[12,"NorthernHeights_02_Snowman_01"],[11,"NorthernHeights_02_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,19]],[[[12,"Level4"],[173,"Level4",[[232,8,0.3,-6,15,-2,[0,"b1Wc0B9G5Lyr0Zq6Qyan1F"],[73,20,24],[73,30,45],[73,-2,5],[73,20,20],[73,5,25],[169,5],[73,25,35],[73,5,7],[233]]],[2,"30ri/pS/pO+ZMkTG+GtXvT",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[],[],[]],[[[12,"NorthernHeights_Autumn_EndFlag_01"],[11,"NorthernHeights_Autumn_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[18,42]],[[[29,".bin",1504656723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":166656,"length":19968,"count":4992,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":166656,"count":3472,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.2548134326934814,-1.250575304031372,-2.8358912467956543],"maxPosition",8,[1,1.2505755424499512,1.250575304031372,5.556077003479004]]],-1],0,0,[],[],[]],[[[37,"SM_ChristmasTree_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_ChristmasTree_01",[-2],[2,"91PzPyO/dYL4zw0QtLDeSj",-1,0]],[28,"SM_ChristmasTree_01",1,[[25,-3,[0,"37SzA5gIFZMJpXhDKRDyEW"],[0],[23],1]],[2,"8dn2yzxqlTnYQyA/61T7GK",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[363,364]],[[[29,".bin",3429205708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":28560,"count":7140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[29,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[12,"LevelThemeEnd_Christmas"],[88,"LevelThemeEnd_Christmas",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"9bTw3bb8dMLYWSTUY2L9x0",1,0],[1,-0.651,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"3eLhg2Wf1H7pjFXzpDPDtE"],[28],[23],29]],[2,"0biIhzxYNKSI4Ta/VAgZOq",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"a0Bnaf10BGw4XS/3+hpdcU",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"35iJ+Z/45GlZGz+40uwViP"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,204,204,36,47,48,30,27,365,16,366,17]],[[[12,"NorthernHeights_06_DeadTree_01"],[11,"NorthernHeights_06_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,22]],[[[457,"../Internal/Effects/Surfaces/triplanar",[{},{}],[{"hash":2792377123,"name":"../Internal/Effects/Surfaces/triplanar|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"anisotropyParam","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]},{"name":"anisotropyRotationMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["IS_ANISOTROPY","USE_ANISOTROPY_ROTATION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":["CC_SURFACES_USE_TANGENT_SPACE"]},{"name":"a_color","format":44,"location":6,"defines":["CC_SURFACES_USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_SURFACES_USE_LIGHT_MAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":14,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"varyings":[],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"tags":[],"defines":[]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"tags":["CC_PIPELINE_TYPE"],"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  layout(location = 3) in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  layout(location = 6) in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  layout(location = 7) in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 8) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 9) in vec4 a_matWorld0;\n  layout(location = 10) in vec4 a_matWorld1;\n  layout(location = 11) in vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    layout(location = 12) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 13) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 14) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n#endif\n    #define CC_SURFACES_VARING_MODIFIER out\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n#endif\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW\n    In.shadowPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n    In.shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBias = vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n    #elif !USE_BATCHING\n      In.shadowBias += cc_localShadowBias.xy;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER in\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(set = 2, binding = 1) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z) && isnan(val.w);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z) && isinf(val.w);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    rotationAngle = clamp(rotationAngle, 0.0, 1.0 - EPSILON_LOWP);\n    float coef = fract(rotationAngle * 2.0);\n    bool isNegative = rotationAngle <= 0.5;\n    coef = pow(coef, isNegative ? 0.75 : 1.25);\n    vec3 binormalNew = isNegative ? mix(binormal, -tangent, coef) : mix(-tangent, -binormal, coef);\n    vec3 tangentNew = isNegative ? mix(tangent, binormal, coef) : mix(binormal, -tangent, coef);\n    tangent = normalize(tangentNew);\n    binormal = normalize(binormalNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(vec3 R, float roughness, float mipCount) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n      vec4 envmap = fragTextureLod(cc_environment, R, roughness * mipCount);\n      #if CC_USE_IBL == 2\n        return unpackRGBE(envmap);\n      #else\n        return SRGBToLinear(envmap.rgb);\n      #endif\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nfloat LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cameraPos, wPos.xyz);\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n    vec4 wPos = pos;\n    vec3 camWorldProj = cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cameraPos.y > fogTop) {\n        if (wPos.y < fogTop) {\n            fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        }\n        else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    }\n    else {\n        if (wPos.y < fogTop) {\n            float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n            float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        }\n        else {\n            fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    }\n    else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == CC_FOG_LINEAR\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == CC_FOG_EXP\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_EXP_SQUARED\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_LAYERED\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  vec4 GetLightMapColor(sampler2D lightingMap, vec2 luv, float lum)\n  {\n      vec4 lightmap = texture(lightingMap, luv);\n      lightmap.rgb *= lum;\n  #if CC_USE_HDR\n      lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n      return lightmap;\n  }\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n  #if USE_ALBEDO_MAP\n    layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    layout(set = 1, binding = 2) uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    layout(set = 1, binding = 7) uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  vec3 SurfacesFragmentModifyWorldNormal()\n  {\n      vec3 normal = FSInput_worldNormal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n      normal = CalculateNormalFromTangentSpace(nmmp, emissiveScaleParam.w, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n    #endif\n    return normalize(normal);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  vec4 SurfacesFragmentModifyAnisotropyParams()\n  {\n      float anisotropyRotation = anisotropyParam.y;\n      float anisotropyShape = anisotropyParam.x;\n#if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n      anisotropyRotation = fract(anisotropyRotation + texture(anisotropyRotationMap, DEFAULT_UV).x);\n#endif\n      return vec4(anisotropyRotation, anisotropyShape, 0.0, 0.0);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  vec3 SurfacesFragmentModifyEmissive()\n  {\n    vec3 emissive = emissive.rgb * emissiveScaleParam.xyz;\n    #if USE_EMISSIVE_MAP\n      emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n    #endif\n    return emissive;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  vec4 SurfacesFragmentModifyPBRParams()\n  {\n    vec4 pbr = pbrParams;\n    #if USE_PBR_MAP\n      vec4 res = texture(pbrMap, DEFAULT_UV);\n      pbr.x *= res.r;\n      pbr.y *= res.g;\n      pbr.z *= res.b;\n      pbr.w *= res.a;\n    #endif\n    #if USE_METALLIC_ROUGHNESS_MAP\n      vec4 metallicRoughness = texture(metallicRoughnessMap, DEFAULT_UV);\n      pbr.z *= metallicRoughness.b;\n      pbr.y *= metallicRoughness.g;\n    #endif\n    #if USE_OCCLUSION_MAP\n      pbr.x *= texture(occlusionMap, DEFAULT_UV).r;\n    #endif\n    return pbr;\n  }\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  vec3 T, B;\n  float specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = clamp(r1, 0.0, 1.0);\n    roughnessY = clamp(r2, 0.0, 1.0);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    lightingDiffuse = irradiance * DiffuseCoefficient_EnergyConservation;\n    float roughness = lightingData.specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    float rT, rB;\n    GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n    float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n#else\n  #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n    float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n  #else\n    float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n  #endif\n#endif\n    lightingSpecular = irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = clamp(dot(N, H), 0.0, 1.0);\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvoid CCSurfacesLightingCalculateEnvironment(inout LightingResult lightingResult, in LightingIntermediateData lightingData)\n{\n  float roughness = lightingData.specularParam;\n  float fAmb = 0.5 - lightingData.N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  vec3 envSpec = vec3(0.0);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, lightingData.N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = reflect(-lightingData.V, lightingData.N);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(R, roughness, cc_ambientGround.w, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, cc_ambientGround.w, 0.6);\n      #else\n        envSpec = EnvReflection(R, roughness, cc_ambientGround.w);\n      #endif\n    #endif\n  #endif\n  lightingResult.environmentDiffuse = ambDiff.rgb * cc_ambientSky.w;\n  lightingResult.environmentSpecular = envSpec * cc_ambientSky.w;\n}\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams()\n{\n    return vec4(0.0, 1.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams();\n  surfaceData.anisotropyShape = anisotropyParams.y;\n  RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.x);\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n  SurfacesFragmentModifySharedData(surfaceData);\n#if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP)\n  surfaceData.worldNormal = FSInput_worldNormal;\n  surfaceData.worldTangent = FSInput_worldTangent;\n#endif\n#if (0 || 0) && !0\n  surfaceData.baseColor.rgb = vec3(1.0);\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  color.xyz += lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n#else\n  #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n    float lum = FSInput_lightMapUV.z;\n    float lightmapCoef = step(lum, EPSILON_LOWP);\n  #else\n    float lightmapCoef = 0.0;\n  #endif\n  color.xyz += (\n    mix(lightingResult.directDiffuse, lightingResult.lightmapColor, lightmapCoef) * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.shadow;\n  color.xyz += (\n    lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\nvoid CCSurfacesDebugViewSurfaceData(out vec4 color, in SurfacesMaterialData surfaceData)\n{\n  float scalar;\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL\n  color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT\n  color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL\n  color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_TRANSPARENCY\n  scalar = surfaceData.baseColor.a;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_BASE_COLOR\n  color = vec4(SRGBToLinear(surfaceData.baseColor.rgb), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_ROUGHNESS\n  scalar = surfaceData.roughness;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_METALLIC\n  scalar = surfaceData.metallic;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY\n  scalar = surfaceData.specularIntensity;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n}\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadow = CCSpotShadowFactorBase(shadowPos, worldPos, shadowBias);\n          }\n        }\n      #endif\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt * shadow;\n        lightingResult.directDiffuse += diffuseLighting * multiplier;\n        lightingResult.directSpecular += specularLighting * multiplier;\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      lightingResult.shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (cc_mainLitDir.w > 0.0) {\n        if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n          lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n        }\n      }\n    #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult, lightingData);\n        lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n        vec4 lightmap = GetLightMapColor(cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z);\n        lightingResult.lightmapColor = lightmap.rgb;\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n      #endif\n    }\n  #endif\n#endif\nvoid CCSurfacesDebugDisplayInvalidNumber(inout vec4 color)\n{\n  vec4 error = vec4(1.0, 0.0, 0.2, 1.0);\n  color = (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\n#if (0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE) && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(out vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR\n    #if CC_SURFACES_USE_VERTEX_COLOR\n      color = FSInput_vertexColor;\n    #else\n      color = white;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL\n      color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n      color = vec4(sign, sign, sign, 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_FACE_SIDE\n    float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n    color = vec4(scalar, scalar, scalar, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV0\n      color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV1\n    color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP\n    #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n      color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n    #else\n      color = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH\n    vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = clipPos.z / clipPos.w;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH\n    vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_WORLD_POS\n    color = vec4(FSInput_worldPos.xyz, 1.0);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n  void CCSurfacesDebugViewLightingResult(out vec4 color, in LightingResult lightingResult)\n  {\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR\n    color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_ALL\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR\n    color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_ALL\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LIGHT_MAP\n    color.rgb = lightingResult.lightmapColor;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_EMISSIVE\n    color.rgb = lightingResult.emissive;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_AO\n    color.rgb = vec3(lightingResult.ao);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_SHADOW\n    color.rgb = vec3(lightingResult.shadow);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE)\n    lightingResult.directDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR)\n    lightingResult.directSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE)\n    lightingResult.environmentDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR)\n    lightingResult.environmentSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE)\n    lightingResult.emissive = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP)\n    lightingResult.lightmapColor = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW)\n    lightingResult.shadow = 1.0;\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO)\n    lightingResult.ao = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    highp vec4 shadowPos = vec4(0.0);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowPos = FSInput_shadowPos;\n      shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n      #if USE_INSTANCING\n        shadowBias = FSInput_shadowBias;\n      #elif !USE_BATCHING\n        shadowBias += cc_localShadowBias.xy;\n      #endif\n      #if !CC_FORWARD_ADD\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 0.0;\n      #if !CC_USE_ACCURATE_FOG\n        fogFactor = FSInput_fogFactor;\n      #else\n        CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n      #endif\n      #if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG)\n        fogFactor = 0.0;\n      #endif\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_fog <= 0.0) {\n            fogFactor = 0.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowPos, shadowBias);\n    #if 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON))\n        {\n          fogFactor = 1.0 - fogFactor;\n          debugColor = vec4(fogFactor, fogFactor, fogFactor, 1.0);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON))\n      #endif\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n      fragColorX = debugColor;\n      return;\n    #elif 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #if CC_FORWARD_ADD\n        if(cc_debug_view_composite_enable_direct_diffuse > 0.0 || cc_debug_view_composite_enable_direct_specular > 0.0)\n      #endif\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if !CC_FORWARD_ADD\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_misc_enable_csm_layer_coloration > 0.0) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n    #endif\n  #endif\n    #if CC_USE_HDR\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_tone_mapping > 0.0)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_composite_enable_gamma_correction > 0.0)\n    #endif\n    color.rgb = sqrt(color.rgb);\n    CCSurfacesDebugDisplayInvalidNumber(color);\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n    layout(location = 0) out vec4 fragColor0;\n    layout(location = 1) out vec4 fragColor1;\n    layout(location = 2) out vec4 fragColor2;\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      fragColor0 = CCSurfacesDeferredOutput0(surfaceData);\n      fragColor1 = CCSurfacesDeferredOutput1(surfaceData);\n      fragColor2 = CCSurfacesDeferredOutput2(surfaceData);\n    }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\n    #define CC_SURFACES_VARING_MODIFIER out\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW\n    In.shadowPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n    In.shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBias = vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n    #elif !USE_BATCHING\n      In.shadowBias += cc_localShadowBias.xy;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER in\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z) && isnan(val.w);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z) && isinf(val.w);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    rotationAngle = clamp(rotationAngle, 0.0, 1.0 - EPSILON_LOWP);\n    float coef = fract(rotationAngle * 2.0);\n    bool isNegative = rotationAngle <= 0.5;\n    coef = pow(coef, isNegative ? 0.75 : 1.25);\n    vec3 binormalNew = isNegative ? mix(binormal, -tangent, coef) : mix(-tangent, -binormal, coef);\n    vec3 tangentNew = isNegative ? mix(tangent, binormal, coef) : mix(binormal, -tangent, coef);\n    tangent = normalize(tangentNew);\n    binormal = normalize(binormalNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(vec3 R, float roughness, float mipCount) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n      vec4 envmap = fragTextureLod(cc_environment, R, roughness * mipCount);\n      #if CC_USE_IBL == 2\n        return unpackRGBE(envmap);\n      #else\n        return SRGBToLinear(envmap.rgb);\n      #endif\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nfloat LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cameraPos, wPos.xyz);\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n    vec4 wPos = pos;\n    vec3 camWorldProj = cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cameraPos.y > fogTop) {\n        if (wPos.y < fogTop) {\n            fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        }\n        else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    }\n    else {\n        if (wPos.y < fogTop) {\n            float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n            float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        }\n        else {\n            fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    }\n    else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == CC_FOG_LINEAR\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == CC_FOG_EXP\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_EXP_SQUARED\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_LAYERED\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  vec4 GetLightMapColor(sampler2D lightingMap, vec2 luv, float lum)\n  {\n      vec4 lightmap = texture(lightingMap, luv);\n      lightmap.rgb *= lum;\n  #if CC_USE_HDR\n      lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n      return lightmap;\n  }\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  vec3 SurfacesFragmentModifyWorldNormal()\n  {\n      vec3 normal = FSInput_worldNormal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n      normal = CalculateNormalFromTangentSpace(nmmp, emissiveScaleParam.w, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n    #endif\n    return normalize(normal);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  vec4 SurfacesFragmentModifyAnisotropyParams()\n  {\n      float anisotropyRotation = anisotropyParam.y;\n      float anisotropyShape = anisotropyParam.x;\n#if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n      anisotropyRotation = fract(anisotropyRotation + texture(anisotropyRotationMap, DEFAULT_UV).x);\n#endif\n      return vec4(anisotropyRotation, anisotropyShape, 0.0, 0.0);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  vec3 SurfacesFragmentModifyEmissive()\n  {\n    vec3 emissive = emissive.rgb * emissiveScaleParam.xyz;\n    #if USE_EMISSIVE_MAP\n      emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n    #endif\n    return emissive;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  vec4 SurfacesFragmentModifyPBRParams()\n  {\n    vec4 pbr = pbrParams;\n    #if USE_PBR_MAP\n      vec4 res = texture(pbrMap, DEFAULT_UV);\n      pbr.x *= res.r;\n      pbr.y *= res.g;\n      pbr.z *= res.b;\n      pbr.w *= res.a;\n    #endif\n    #if USE_METALLIC_ROUGHNESS_MAP\n      vec4 metallicRoughness = texture(metallicRoughnessMap, DEFAULT_UV);\n      pbr.z *= metallicRoughness.b;\n      pbr.y *= metallicRoughness.g;\n    #endif\n    #if USE_OCCLUSION_MAP\n      pbr.x *= texture(occlusionMap, DEFAULT_UV).r;\n    #endif\n    return pbr;\n  }\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  vec3 T, B;\n  float specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = clamp(r1, 0.0, 1.0);\n    roughnessY = clamp(r2, 0.0, 1.0);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    lightingDiffuse = irradiance * DiffuseCoefficient_EnergyConservation;\n    float roughness = lightingData.specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    float rT, rB;\n    GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n    float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n#else\n  #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n    float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n  #else\n    float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n  #endif\n#endif\n    lightingSpecular = irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = clamp(dot(N, H), 0.0, 1.0);\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvoid CCSurfacesLightingCalculateEnvironment(inout LightingResult lightingResult, in LightingIntermediateData lightingData)\n{\n  float roughness = lightingData.specularParam;\n  float fAmb = 0.5 - lightingData.N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  vec3 envSpec = vec3(0.0);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, lightingData.N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = reflect(-lightingData.V, lightingData.N);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(R, roughness, cc_ambientGround.w, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, cc_ambientGround.w, 0.6);\n      #else\n        envSpec = EnvReflection(R, roughness, cc_ambientGround.w);\n      #endif\n    #endif\n  #endif\n  lightingResult.environmentDiffuse = ambDiff.rgb * cc_ambientSky.w;\n  lightingResult.environmentSpecular = envSpec * cc_ambientSky.w;\n}\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams()\n{\n    return vec4(0.0, 1.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams();\n  surfaceData.anisotropyShape = anisotropyParams.y;\n  RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.x);\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n  SurfacesFragmentModifySharedData(surfaceData);\n#if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP)\n  surfaceData.worldNormal = FSInput_worldNormal;\n  surfaceData.worldTangent = FSInput_worldTangent;\n#endif\n#if (0 || 0) && !0\n  surfaceData.baseColor.rgb = vec3(1.0);\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  color.xyz += lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n#else\n  #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n    float lum = FSInput_lightMapUV.z;\n    float lightmapCoef = step(lum, EPSILON_LOWP);\n  #else\n    float lightmapCoef = 0.0;\n  #endif\n  color.xyz += (\n    mix(lightingResult.directDiffuse, lightingResult.lightmapColor, lightmapCoef) * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.shadow;\n  color.xyz += (\n    lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\nvoid CCSurfacesDebugViewSurfaceData(out vec4 color, in SurfacesMaterialData surfaceData)\n{\n  float scalar;\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL\n  color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT\n  color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL\n  color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_TRANSPARENCY\n  scalar = surfaceData.baseColor.a;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_BASE_COLOR\n  color = vec4(SRGBToLinear(surfaceData.baseColor.rgb), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_ROUGHNESS\n  scalar = surfaceData.roughness;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_METALLIC\n  scalar = surfaceData.metallic;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY\n  scalar = surfaceData.specularIntensity;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n}\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadow = CCSpotShadowFactorBase(shadowPos, worldPos, shadowBias);\n          }\n        }\n      #endif\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt * shadow;\n        lightingResult.directDiffuse += diffuseLighting * multiplier;\n        lightingResult.directSpecular += specularLighting * multiplier;\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      lightingResult.shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (cc_mainLitDir.w > 0.0) {\n        if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n          lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n        }\n      }\n    #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult, lightingData);\n        lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n        vec4 lightmap = GetLightMapColor(cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z);\n        lightingResult.lightmapColor = lightmap.rgb;\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n      #endif\n    }\n  #endif\n#endif\nvoid CCSurfacesDebugDisplayInvalidNumber(inout vec4 color)\n{\n  vec4 error = vec4(1.0, 0.0, 0.2, 1.0);\n  color = (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\n#if (0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE) && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(out vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR\n    #if CC_SURFACES_USE_VERTEX_COLOR\n      color = FSInput_vertexColor;\n    #else\n      color = white;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL\n      color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n      color = vec4(sign, sign, sign, 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_FACE_SIDE\n    float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n    color = vec4(scalar, scalar, scalar, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV0\n      color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV1\n    color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP\n    #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n      color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n    #else\n      color = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH\n    vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = clipPos.z / clipPos.w;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH\n    vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_WORLD_POS\n    color = vec4(FSInput_worldPos.xyz, 1.0);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n  void CCSurfacesDebugViewLightingResult(out vec4 color, in LightingResult lightingResult)\n  {\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR\n    color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_ALL\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR\n    color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_ALL\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LIGHT_MAP\n    color.rgb = lightingResult.lightmapColor;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_EMISSIVE\n    color.rgb = lightingResult.emissive;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_AO\n    color.rgb = vec3(lightingResult.ao);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_SHADOW\n    color.rgb = vec3(lightingResult.shadow);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE)\n    lightingResult.directDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR)\n    lightingResult.directSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE)\n    lightingResult.environmentDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR)\n    lightingResult.environmentSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE)\n    lightingResult.emissive = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP)\n    lightingResult.lightmapColor = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW)\n    lightingResult.shadow = 1.0;\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO)\n    lightingResult.ao = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    highp vec4 shadowPos = vec4(0.0);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowPos = FSInput_shadowPos;\n      shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n      #if USE_INSTANCING\n        shadowBias = FSInput_shadowBias;\n      #elif !USE_BATCHING\n        shadowBias += cc_localShadowBias.xy;\n      #endif\n      #if !CC_FORWARD_ADD\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 0.0;\n      #if !CC_USE_ACCURATE_FOG\n        fogFactor = FSInput_fogFactor;\n      #else\n        CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n      #endif\n      #if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG)\n        fogFactor = 0.0;\n      #endif\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_fog <= 0.0) {\n            fogFactor = 0.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowPos, shadowBias);\n    #if 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON))\n        {\n          fogFactor = 1.0 - fogFactor;\n          debugColor = vec4(fogFactor, fogFactor, fogFactor, 1.0);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON))\n      #endif\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n      fragColorX = debugColor;\n      return;\n    #elif 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #if CC_FORWARD_ADD\n        if(cc_debug_view_composite_enable_direct_diffuse > 0.0 || cc_debug_view_composite_enable_direct_specular > 0.0)\n      #endif\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if !CC_FORWARD_ADD\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_misc_enable_csm_layer_coloration > 0.0) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n    #endif\n  #endif\n    #if CC_USE_HDR\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_tone_mapping > 0.0)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_composite_enable_gamma_correction > 0.0)\n    #endif\n    color.rgb = sqrt(color.rgb);\n    CCSurfacesDebugDisplayInvalidNumber(color);\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n    layout(location = 0) out vec4 fragColor0;\n    layout(location = 1) out vec4 fragColor1;\n    layout(location = 2) out vec4 fragColor2;\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      fragColor0 = CCSurfacesDeferredOutput0(surfaceData);\n      fragColor1 = CCSurfacesDeferredOutput1(surfaceData);\n      fragColor2 = CCSurfacesDeferredOutput2(surfaceData);\n    }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\n    #define CC_SURFACES_VARING_MODIFIER varying\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n#endif\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n      uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\nvec3 SurfacesVertexModifyWorldNormal(in SurfacesStandardVertexIntermediate In)\n{\n    vec3 worldNormal = In.worldNormal.xyz;\n  #if CC_SURFACES_USE_TWO_SIDED\n      worldNormal.xyz *= In.worldNormal.w;\n  #endif\n  return worldNormal;\n}\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferFog(inout SurfacesStandardVertexIntermediate In)\n{\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(vec4(In.worldPos, 1.0), In.fogFactor);\n#endif\n}\nvoid CCSurfacesVertexTransferShadow(inout SurfacesStandardVertexIntermediate In)\n{\n  #if CC_RECEIVE_SHADOW\n    In.shadowPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n    In.shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n    #if USE_INSTANCING\n      In.shadowBias = vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n    #elif !USE_BATCHING\n      In.shadowBias += cc_localShadowBias.xy;\n    #endif\n  #endif\n}\nvoid CCSurfacesVertexTransferLightMapUV(inout SurfacesStandardVertexIntermediate In)\n{\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #if USE_INSTANCING\n    In.lightmapUV.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    In.lightmapUV.z = a_lightingMapUVParam.w;\n  #else\n    In.lightmapUV.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    In.lightmapUV.z = cc_lightingMapUVParam.w;\n  #endif\n#endif\n}\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matProj * cc_matView * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  vec3 viewDirect = normalize(cc_cameraPos.xyz - In.worldPos);\n  In.worldNormal.w = dot(In.worldNormal.xyz, viewDirect) < 0.0 ? -1.0 : 1.0;\n  In.worldNormal.xyz = SurfacesVertexModifyWorldNormal(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexTransferFog(In);\n  CCSurfacesVertexTransferShadow(In);\n  CCSurfacesVertexTransferLightMapUV(In);\n  CCSurfacesVertexOutput(In);\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n  #define CC_SURFACES_USE_SECOND_UV HAS_SECOND_UV\n  #define CC_SURFACES_USE_TWO_SIDED USE_TWOSIDE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE USE_REFLECTION_DENOISE\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC IS_ANISOTROPY\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING USE_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_VERTEX_COLOR USE_VERTEX_COLOR\n#if IS_ANISOTROPY || USE_NORMAL_MAP\n  #define CC_SURFACES_USE_TANGENT_SPACE 1\n#endif\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 31\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER varying\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n    #endif\n  #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nbool isnan(float val) {\n  return (val < 0.0 || 0.0 < val || val == 0.0) ? false : true;\n}\nbool isinf(float x) {\n  return x == x * 2.0;\n}\nbool isnans(vec3 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z);\n}\nbool isnans(vec4 val) {\n    return isnan(val.x) && isnan(val.y) && isnan(val.z) && isnan(val.w);\n}\nbool isinfs(vec4 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z) && isinf(val.w);\n}\nbool isinfs(vec3 val) {\n    return isinf(val.x) && isinf(val.y) && isinf(val.z);\n}\nvec3 CalculateBinormal(vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    return cross(normal.xyz, tangent) * mirrorNormal;\n}\nvec3 CalculateNormalFromTangentSpace(vec3 normalFromTangentSpace, float normalStrength, vec3 normal, vec3 tangent, float mirrorNormal)\n{\n    vec3 binormal = CalculateBinormal(normal, tangent, mirrorNormal);\n    return (normalFromTangentSpace.x * normalStrength) * normalize(tangent) +\n           (normalFromTangentSpace.y * normalStrength) * normalize(binormal) +\n            normalFromTangentSpace.z * normalize(normal);\n}\nvoid RotateTangentAndBinormal(inout vec3 tangent, inout vec3 binormal, vec3 normal, float rotationAngle)\n{\n    rotationAngle = clamp(rotationAngle, 0.0, 1.0 - EPSILON_LOWP);\n    float coef = fract(rotationAngle * 2.0);\n    bool isNegative = rotationAngle <= 0.5;\n    coef = pow(coef, isNegative ? 0.75 : 1.25);\n    vec3 binormalNew = isNegative ? mix(binormal, -tangent, coef) : mix(-tangent, -binormal, coef);\n    vec3 tangentNew = isNegative ? mix(tangent, binormal, coef) : mix(binormal, -tangent, coef);\n    tangent = normalize(tangentNew);\n    binormal = normalize(binormalNew);\n}\nvec2 signNotZero(vec2 v) {\n  return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\nvec2 float32x3_to_oct(in vec3 v) {\n  vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n  return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\n  vec3 EnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n  vec3 EnvReflection(vec3 R, float roughness, float mipCount) {\n    #if CC_USE_IBL\n      #if !CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n        roughness = pow(roughness, 0.5);\n      #endif\n      vec4 envmap = fragTextureLod(cc_environment, R, roughness * mipCount);\n      #if CC_USE_IBL == 2\n        return unpackRGBE(envmap);\n      #else\n        return SRGBToLinear(envmap.rgb);\n      #endif\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\nuniform highp vec4 cc_localShadowBias;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\nfloat LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cameraPos, wPos.xyz);\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n}\nfloat ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n    vec4 wPos = pos;\n    float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n}\nfloat LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n    vec4 wPos = pos;\n    vec3 camWorldProj = cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cameraPos.y > fogTop) {\n        if (wPos.y < fogTop) {\n            fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n            fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n        }\n        else {\n            fDeltaY = 0.;\n            fDensityIntegral = 0.;\n        }\n    }\n    else {\n        if (wPos.y < fogTop) {\n            float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n            float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n            fDeltaY = abs(fDeltaA - fDeltaB);\n            fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n        }\n        else {\n            fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n            fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n        }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n        fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    }\n    else {\n        fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == CC_FOG_LINEAR\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == CC_FOG_EXP\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_EXP_SQUARED\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == CC_FOG_LAYERED\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n  vec4 GetLightMapColor(sampler2D lightingMap, vec2 luv, float lum)\n  {\n      vec4 lightmap = texture2D(lightingMap, luv);\n      lightmap.rgb *= lum;\n  #if CC_USE_HDR\n      lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n  #endif\n      return lightmap;\n  }\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\n     uniform vec2 anisotropyParam;\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  vec3 SurfacesFragmentModifyWorldNormal()\n  {\n      vec3 normal = FSInput_worldNormal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n      normal = CalculateNormalFromTangentSpace(nmmp, emissiveScaleParam.w, normal.xyz, FSInput_worldTangent, FSInput_mirrorNormal);\n    #endif\n    return normalize(normal);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  vec4 SurfacesFragmentModifyAnisotropyParams()\n  {\n      float anisotropyRotation = anisotropyParam.y;\n      float anisotropyShape = anisotropyParam.x;\n#if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n      anisotropyRotation = fract(anisotropyRotation + texture2D(anisotropyRotationMap, DEFAULT_UV).x);\n#endif\n      return vec4(anisotropyRotation, anisotropyShape, 0.0, 0.0);\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  vec3 SurfacesFragmentModifyEmissive()\n  {\n    vec3 emissive = emissive.rgb * emissiveScaleParam.xyz;\n    #if USE_EMISSIVE_MAP\n      emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n    #endif\n    return emissive;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  vec4 SurfacesFragmentModifyPBRParams()\n  {\n    vec4 pbr = pbrParams;\n    #if USE_PBR_MAP\n      vec4 res = texture2D(pbrMap, DEFAULT_UV);\n      pbr.x *= res.r;\n      pbr.y *= res.g;\n      pbr.z *= res.b;\n      pbr.w *= res.a;\n    #endif\n    #if USE_METALLIC_ROUGHNESS_MAP\n      vec4 metallicRoughness = texture2D(metallicRoughnessMap, DEFAULT_UV);\n      pbr.z *= metallicRoughness.b;\n      pbr.y *= metallicRoughness.g;\n    #endif\n    #if USE_OCCLUSION_MAP\n      pbr.x *= texture2D(occlusionMap, DEFAULT_UV).r;\n    #endif\n    return pbr;\n  }\nstruct LightingIntermediateData\n{\n  vec3 N, H, L, V;\n  float distToLight, distToLightSqr;\n  float distToCamera, distToCameraSqr;\n  float NoL, NoV, NoH;\n  float NoLSat, NoVSat, NoHSat;\n  float NoVAbsSat;\n  vec3 T, B;\n  float specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\nvoid CCSurfacesLightingGetIntermediateData_PerPixel(inout LightingIntermediateData data, vec3 worldNormal, vec3 worldPos, vec3 worldTangent, vec3 worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    , float anisotropyShape\n#endif\n)\n{\n  data.N = worldNormal;\n  data.V = cc_cameraPos.xyz - worldPos;\n  data.distToCameraSqr = dot(data.V, data.V);\n  data.distToCamera = sqrt(data.distToCameraSqr);\n  data.V /= data.distToCamera;\n  data.NoV = dot(data.N, data.V);\n  data.NoVSat = max(data.NoV, 0.0);\n  data.NoVAbsSat = max(abs(data.NoV), 0.0);\n  data.T = worldTangent;\n  data.B = worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  data.anisotropyShape = anisotropyShape;\n#endif\n}\nvoid CCSurfacesLightingGetIntermediateData_PerLight(inout LightingIntermediateData data, vec3 lightDirWithDist)\n{\n  data.L = lightDirWithDist;\n  data.distToLightSqr = dot(data.L, data.L);\n  data.distToLight = sqrt(data.distToLightSqr);\n  data.L /= data.distToLight;\n  data.H = normalize(data.L + data.V);\n  data.NoL = dot(data.N, data.L);\n  data.NoH = dot(data.N, data.H);\n  data.NoLSat = max(data.NoL, 0.0);\n  data.NoHSat = max(data.NoH, 0.0);\n}\nstruct LightingResult\n{\n  vec3 diffuseColorWithLighting, specularColorWithLighting;\n  vec3 directDiffuse, directSpecular;\n  vec3 environmentDiffuse, environmentSpecular;\n  float shadow, ao;\n  vec3 lightmapColor;\n  vec3 emissive;\n};\nfloat D_GGX(float roughness, float NoH)\n{\n    float m = roughness * roughness;\n    float m2 = m * m;\n    float d = (NoH * m2 - NoH) * NoH + 1.0;\n    return m2 / max(EPSILON, d * d);\n}\nfloat D_GGXMobile(float roughness, float NoH) {\n  float OneMinusNoHSqr = 1.0 - NoH * NoH;\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nvoid GetAnisotropicRoughness(float roughness, float anisotropyShape, out float roughnessX, out float roughnessY)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    float r1 = roughness, r2 = roughness;\n    float lerpedRoughness = mix(1.0, 10.0, anisotropyShape);\n    r2 *= shapeSign < 0.0 ? lerpedRoughness : 1.0;\n    r1 *= shapeSign > 0.0 ? lerpedRoughness : 1.0;\n    roughnessX = clamp(r1, 0.0, 1.0);\n    roughnessY = clamp(r2, 0.0, 1.0);\n}\nfloat D_GGXAniso(float RoughnessX, float RoughnessY, float NoH, vec3 H, vec3 X, vec3 Y)\n{\n    float mx = max(EPSILON_LOWP, RoughnessX * RoughnessX);\n    float my = max(EPSILON_LOWP, RoughnessY * RoughnessY);\n    float XoH = dot(X, H);\n    float YoH = dot(Y, H);\n    float d = XoH * XoH / (mx * mx) + YoH * YoH / (my * my) + NoH * NoH;\n    return 1.0 / max(EPSILON_LOWP, mx * my * d * d);\n}\nvec3 GetAnisotropicReflect(float roughness, float anisotropyShape, vec3 V, vec3 N, vec3 X, vec3 Y)\n{\n    float shapeSign = sign(anisotropyShape);\n    anisotropyShape *= anisotropyShape;\n    anisotropyShape = min(anisotropyShape, 0.4);\n    anisotropyShape *= smoothstep(0.0, 0.03, roughness);\n    vec3 reflectTarget = shapeSign < 0.0 ? mix(N, -Y, anisotropyShape) :\n                         shapeSign > 0.0 ? mix(N, -X, anisotropyShape) : N;\n    return reflect(-V, reflectTarget);\n}\nvec3 IntegratedGFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#define DiffuseCoefficient_EnergyConservation INV_PI\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n  float factor = distSqr * invSqrAttRadius;\n  float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n  return smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\n  float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n  attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n  return attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n  float cd = dot(litDir, L);\n  float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n  return (attenuation * attenuation);\n}\nfloat CalculateDistanceAttenuation(float distToLightSqr, float lightRadius, float lightRange)\n{\n  float litRadiusSqr = lightRadius * lightRadius;\n  float attRadiusSqrInv = 1.0 / max(lightRange, 0.01);\n  attRadiusSqrInv *= attRadiusSqrInv;\n  float edgeAttenuation = litRadiusSqr / max(litRadiusSqr, distToLightSqr);\n  return GetDistAtt(distToLightSqr, attRadiusSqrInv) * edgeAttenuation;\n}\nfloat CalculateAngleAttenuation(vec3 spotLightDir, vec3 L, float cosAngleOuter)\n{\n  float cosInner = max(dot(spotLightDir, L), 0.01);\n  float litAngleScale = 1.0 / max(0.001, cosInner - cosAngleOuter);\n  float litAngleOffset = -cosAngleOuter * litAngleScale;\n  return GetAngleAtt(L, spotLightDir, litAngleScale, litAngleOffset);\n}\nbool CCSurfacesLightingEnableShadow(in float NoL)\n{\n  return NoL > 0.0;\n}\nfloat CCSurfacesLightingCalculateDistanceAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle)\n{\n  return CalculateDistanceAttenuation(lightingData.distToLightSqr, lightSizeRangeAngle.x, lightSizeRangeAngle.y);\n}\nfloat CCSurfacesLightingCalculateAngleAttenuation(in LightingIntermediateData lightingData, in vec4 lightSizeRangeAngle, in vec3 spotLightDir)\n{\n  return CalculateAngleAttenuation(spotLightDir, lightingData.L, lightSizeRangeAngle.z);\n}\nvoid CCSurfacesLightingCalculateDirect(out vec3 lightingDiffuse, out vec3 lightingSpecular, in LightingIntermediateData lightingData, in vec4 lightSourceColorAndIntensity)\n{\n    vec3 irradiance = vec3(lightingData.NoLSat) * lightSourceColorAndIntensity.rgb * lightSourceColorAndIntensity.w;\n    lightingDiffuse = irradiance * DiffuseCoefficient_EnergyConservation;\n    float roughness = lightingData.specularParam;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n    float rT, rB;\n    GetAnisotropicRoughness(roughness, lightingData.anisotropyShape, rT, rB);\n    float calcSpec = D_GGXAniso(rT, rB, lightingData.NoHSat, lightingData.H, lightingData.T, lightingData.B);\n#else\n  #if CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n    float calcSpec = (roughness * 0.25 + 0.25) * D_GGXMobile(roughness, lightingData.NoHSat);\n  #else\n    float calcSpec = D_GGX(roughness, lightingData.NoHSat);\n  #endif\n#endif\n    lightingSpecular = irradiance * calcSpec;\n}\n#if CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  vec3 EnvAnisotropicReflection(vec3 R, float roughness, float mipCount, float anisotropyShape, vec3 V, vec3 N, vec3 T, vec3 B) {\n      R = normalize(R);\n      float integratedBRDF = 0.0;\n      vec3 envSpec = vec3(0.0);\n      const int SAMPLE_STEP_COUNT = CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT;\n      float sampleAngleRange = PI * abs(anisotropyShape);\n      vec3 anisoDirection = anisotropyShape < 0.0 ? T : B;\n      vec3 ROnNormalPlane = normalize(R - anisoDirection * dot(R, anisoDirection));\n      vec3 stepOffset = normalize(ROnNormalPlane - N) * (sampleAngleRange / float(SAMPLE_STEP_COUNT * 2));\n      for (int i = -SAMPLE_STEP_COUNT; i <= SAMPLE_STEP_COUNT; ++i)\n      {\n          float rT, rB;\n          GetAnisotropicRoughness(roughness, anisotropyShape, rT, rB);\n          float coef = pow(abs(float(i)) / float(SAMPLE_STEP_COUNT), 1.3) * float(SAMPLE_STEP_COUNT);\n          vec3 H = normalize(N + stepOffset * sign(float(i)) * coef);\n          vec3 L = reflect(-V, H);\n          float NoHSat = clamp(dot(N, H), 0.0, 1.0);\n          float calcSpec = D_GGXAniso(rT, rB, NoHSat, H, T, B);\n          envSpec += calcSpec * EnvReflection(L, roughness, mipCount);\n          integratedBRDF += calcSpec;\n      }\n      envSpec /= integratedBRDF;\n      return envSpec;\n  }\n#endif\nvoid CCSurfacesLightingCalculateEnvironment(inout LightingResult lightingResult, in LightingIntermediateData lightingData)\n{\n  float roughness = lightingData.specularParam;\n  float fAmb = 0.5 - lightingData.N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  vec3 envSpec = vec3(0.0);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, lightingData.N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && !CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      vec3 R = GetAnisotropicReflect(roughness, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      vec3 R = reflect(-lightingData.V, lightingData.N);\n    #endif\n    #if CC_SURFACES_LIGHTING_ANISOTROPIC && CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n      envSpec = EnvAnisotropicReflection(R, roughness, cc_ambientGround.w, lightingData.anisotropyShape, lightingData.V, lightingData.N, lightingData.T, lightingData.B);\n    #else\n      #if CC_SURFACES_USE_REFLECTION_DENOISE\n        envSpec = EnvReflectionWithMipFiltering(normalize(R), roughness, cc_ambientGround.w, 0.6);\n      #else\n        envSpec = EnvReflection(R, roughness, cc_ambientGround.w);\n      #endif\n    #endif\n  #endif\n  lightingResult.environmentDiffuse = ambDiff.rgb * cc_ambientSky.w;\n  lightingResult.environmentSpecular = envSpec * cc_ambientSky.w;\n}\nstruct SurfacesMaterialData\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 worldPos, worldPos_fract_part;\n  #else\n  vec3 worldPos;\n  #endif\n  vec4 baseColor;\n  vec3 worldNormal;\n  vec3 emissive;\n  float specularIntensity;\n  float roughness;\n  float metallic;\n  float ao;\n  vec3 worldTangent, worldBinormal;\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  float anisotropyShape;\n#endif\n};\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\nvec4 SurfacesFragmentModifyBaseColorAndTransparency()\n{\n    return FSInput_vertexColor;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\nvec3 SurfacesFragmentModifyWorldNormal()\n{\n    return normalize(FSInput_worldNormal);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_WORLD_TANGENT_AND_BINORMAL\nvoid SurfacesFragmentModifyWorldTangentAndBinormal(inout vec3 worldTangent, inout vec3 worldBinormal, vec3 worldNormal)\n{\n    vec3 tangent = FSInput_worldTangent;\n#if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 binormal = normalize(CalculateBinormal(worldNormal.xyz, tangent, FSInput_mirrorNormal));\n    tangent = normalize(cross(binormal, worldNormal));\n#else\n    vec3 binormal = vec3(0.0, 0.0, 0.0);\n#endif\n    worldTangent = tangent;\n    worldBinormal = binormal;\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\nvec4 SurfacesFragmentModifyAnisotropyParams()\n{\n    return vec4(0.0, 1.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\nvec3 SurfacesFragmentModifyEmissive()\n{\n    return vec3(0.0, 0.0, 0.0);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\nvec4 SurfacesFragmentModifyPBRParams()\n{\n    return vec4(1.0, 0.5, 0.0, 0.5);\n}\n#endif\n#ifndef CC_SURFACES_FRAGMENT_MODIFY_SHARED_DATA\nvoid SurfacesFragmentModifySharedData(inout SurfacesMaterialData surfaceData)\n{\n}\n#endif\nvoid CCSurfacesFragmentGetMaterialData(inout SurfacesMaterialData surfaceData)\n{\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part, FSInput_worldPos);\n  #else\n  surfaceData.worldPos = FSInput_worldPos;\n  #endif\n  surfaceData.baseColor = SurfacesFragmentModifyBaseColorAndTransparency();\n  surfaceData.worldNormal = SurfacesFragmentModifyWorldNormal();\n  SurfacesFragmentModifyWorldTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal);\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n  vec4 anisotropyParams = SurfacesFragmentModifyAnisotropyParams();\n  surfaceData.anisotropyShape = anisotropyParams.y;\n  RotateTangentAndBinormal(surfaceData.worldTangent, surfaceData.worldBinormal, surfaceData.worldNormal, anisotropyParams.x);\n#endif\n  surfaceData.emissive = SurfacesFragmentModifyEmissive();\n  vec4 pbr = SurfacesFragmentModifyPBRParams();\n  surfaceData.ao = pbr.x;\n  surfaceData.roughness = pbr.y;\n  surfaceData.metallic = pbr.z;\n  surfaceData.specularIntensity = pbr.w;\n  SurfacesFragmentModifySharedData(surfaceData);\n#if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP)\n  surfaceData.worldNormal = FSInput_worldNormal;\n  surfaceData.worldTangent = FSInput_worldTangent;\n#endif\n#if (0 || 0) && !0\n  surfaceData.baseColor.rgb = vec3(1.0);\n#endif\n}\nvec3 CCSurfacesGetDiffuseColor(in SurfacesMaterialData surfaceData)\n{\n  return surfaceData.baseColor.rgb * (1.0 - surfaceData.metallic);\n}\nvec3 CCSurfacesGetSpecularColor(in SurfacesMaterialData surfaceData)\n{\n  float F0 = surfaceData.specularIntensity * 0.08;\n  return mix(vec3(F0), surfaceData.baseColor.rgb, surfaceData.metallic);\n}\nvoid CCSurfacesLightingInitializeColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n  diffuseColorWithLighting = CCSurfacesGetDiffuseColor(surfaceData);\n  specularColorWithLighting = IntegratedGFApprox(CCSurfacesGetSpecularColor(surfaceData).xyz, surfaceData.roughness, lightingData.NoVAbsSat);\n}\nvoid CCSurfacesLightingCalculateColorWithLighting(inout vec3 diffuseColorWithLighting, inout vec3 specularColorWithLighting, in SurfacesMaterialData surfaceData, in LightingIntermediateData lightingData)\n{\n}\nvoid CCSurfacesInitializeLightingIntermediateData(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData)\n{\n  vec3 worldPos;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n  #else\n  worldPos = surfaceData.worldPos;\n  #endif\n  CCSurfacesLightingGetIntermediateData_PerPixel(lightingData, surfaceData.worldNormal, worldPos, surfaceData.worldTangent, surfaceData.worldBinormal\n#if CC_SURFACES_LIGHTING_ANISOTROPIC\n      , surfaceData.anisotropyShape\n#endif\n  );\n  lightingData.specularParam = surfaceData.roughness;\n}\nvoid CCSurfacesLightingCalculateIntermediateData_PerLight(inout LightingIntermediateData lightingData, in SurfacesMaterialData surfaceData, vec3 lightDirWithDist)\n{\n  CCSurfacesLightingGetIntermediateData_PerLight(lightingData, lightDirWithDist);\n}\nvoid CCSurfacesInitializeLightingResult(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData)\n{\n  lightingResult.ao = surfaceData.ao;\n  lightingResult.emissive = surfaceData.emissive;\n}\n#if CC_PIPELINE_TYPE == 1\n  vec4 CCSurfacesDeferredOutput0(in SurfacesMaterialData surfaceData)\n  {\n    return surfaceData.baseColor;\n  }\n  vec4 CCSurfacesDeferredOutput1(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(float32x3_to_oct(surfaceData.worldNormal), surfaceData.roughness, surfaceData.metallic);\n  }\n  vec4 CCSurfacesDeferredOutput2(in SurfacesMaterialData surfaceData)\n  {\n    return vec4(surfaceData.emissive, surfaceData.ao);\n  }\n#endif\nvec4 CCSurfacesShading(in SurfacesMaterialData surfaceData, in LightingResult lightingResult)\n{\n  vec4 color = vec4(0.0, 0.0, 0.0, surfaceData.baseColor.a);\n#if CC_FORWARD_ADD\n  color.xyz += lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  color.xyz += lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n#else\n  #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n    float lum = FSInput_lightMapUV.z;\n    float lightmapCoef = step(lum, EPSILON_LOWP);\n  #else\n    float lightmapCoef = 0.0;\n  #endif\n  color.xyz += (\n    mix(lightingResult.directDiffuse, lightingResult.lightmapColor, lightmapCoef) * lightingResult.diffuseColorWithLighting\n    + lightingResult.directSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.shadow;\n  color.xyz += (\n    lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting\n    + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting)\n    * lightingResult.ao;\n  color.xyz += lightingResult.emissive;\n#endif\n  return color;\n}\nvoid CCSurfacesDebugViewSurfaceData(out vec4 color, in SurfacesMaterialData surfaceData)\n{\n  float scalar;\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL\n  color = vec4(surfaceData.worldNormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT\n  color = vec4(surfaceData.worldTangent * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL\n  color = vec4(surfaceData.worldBinormal * 0.5 + vec3(0.5), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_TRANSPARENCY\n  scalar = surfaceData.baseColor.a;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_BASE_COLOR\n  color = vec4(SRGBToLinear(surfaceData.baseColor.rgb), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetDiffuseColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR\n  color = vec4(SRGBToLinear(CCSurfacesGetSpecularColor(surfaceData)), 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_ROUGHNESS\n  scalar = surfaceData.roughness;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_METALLIC\n  scalar = surfaceData.metallic;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n#if 0 == CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY\n  scalar = surfaceData.specularIntensity;\n  color = vec4(scalar, scalar, scalar, 1.0);\n#endif\n}\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD && !CC_ENABLE_CLUSTERED_LIGHT_CULLING\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      vec3 worldPos;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      worldPos = unpackHighpData(surfaceData.worldPos, surfaceData.worldPos_fract_part);\n      #else\n      worldPos = surfaceData.worldPos;\n      #endif\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      lightingResult.directDiffuse = lightingResult.directSpecular = vec3(0.0);\n      int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n      for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n        if (i >= numLights) break;\n        CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, cc_lightPos[i].xyz - worldPos);\n        CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n        vec3 diffuseLighting, specularLighting;\n        CCSurfacesLightingCalculateDirect(diffuseLighting, specularLighting, lightingData, cc_lightColor[i]);\n        float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n            shadow = CCSpotShadowFactorBase(shadowPos, worldPos, shadowBias);\n          }\n        }\n      #endif\n        float distAtt = CCSurfacesLightingCalculateDistanceAttenuation(lightingData, cc_lightSizeRangeAngle[i]);\n        float angleAtt = 1.0;\n        if (cc_lightPos[i].w > 0.0) {\n          angleAtt = CCSurfacesLightingCalculateAngleAttenuation(lightingData, cc_lightSizeRangeAngle[i], -cc_lightDir[i].xyz);\n        }\n        float multiplier = distAtt * angleAtt * shadow;\n        lightingResult.directDiffuse += diffuseLighting * multiplier;\n        lightingResult.directSpecular += specularLighting * multiplier;\n      }\n    }\n  #else\n    void CCSurfacesLighting(inout LightingResult lightingResult, in SurfacesMaterialData surfaceData, in vec4 shadowPos, in vec2 shadowBias)\n    {\n      LightingIntermediateData lightingData;\n      CCSurfacesInitializeLightingIntermediateData(lightingData, surfaceData);\n      CCSurfacesInitializeLightingResult(lightingResult, surfaceData);\n      CCSurfacesLightingInitializeColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateIntermediateData_PerLight(lightingData, surfaceData, -cc_mainLitDir.xyz);\n      CCSurfacesLightingCalculateColorWithLighting(lightingResult.diffuseColorWithLighting, lightingResult.specularColorWithLighting, surfaceData, lightingData);\n      CCSurfacesLightingCalculateDirect(lightingResult.directDiffuse, lightingResult.directSpecular, lightingData, cc_mainLitColor);\n      lightingResult.shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (cc_mainLitDir.w > 0.0) {\n        if (CCSurfacesLightingEnableShadow(lightingData.NoL)) {\n          lightingResult.shadow = CCShadowFactorBase(shadowPos, lightingData.N, shadowBias);\n        }\n      }\n    #endif\n      CCSurfacesLightingCalculateEnvironment(lightingResult, lightingData);\n        lightingResult.lightmapColor = vec3(0.0);\n      #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n        vec4 lightmap = GetLightMapColor(cc_lightingMap, FSInput_lightMapUV.xy, FSInput_lightMapUV.z);\n        lightingResult.lightmapColor = lightmap.rgb;\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING\n      #endif\n    }\n  #endif\n#endif\nvoid CCSurfacesDebugDisplayInvalidNumber(inout vec4 color)\n{\n  vec4 error = vec4(1.0, 0.0, 0.2, 1.0);\n  color = (isnans(color.rgb) || isinfs(color.rgb)) ? error : color;\n}\n#if (0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE) && !CC_FORWARD_ADD\n  void CCSurfacesDebugViewMeshData(out vec4 color)\n  {\n    vec4 white = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR\n    #if CC_SURFACES_USE_VERTEX_COLOR\n      color = FSInput_vertexColor;\n    #else\n      color = white;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL\n      color = vec4(FSInput_worldNormal * 0.5 + vec3(0.5), 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      color = vec4(FSInput_worldTangent * 0.5 + vec3(0.5), 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      float sign = FSInput_mirrorNormal * 0.5 + 0.5;\n      color = vec4(sign, sign, sign, 1.0);\n    #else\n      color = black;\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_FACE_SIDE\n    float scalar = clamp(FSInput_faceSideSign, 0.0, 1.0);\n    color = vec4(scalar, scalar, scalar, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV0\n      color = vec4(FSInput_texcoord.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UV1\n    color = vec4(FSInput_texcoord1.xy, 0.0, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP\n    #if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n      color = vec4(FSInput_lightMapUV.xy, 0.0, 1.0);\n    #else\n      color = vec4(0.0, 0.0, 0.0, 1.0);\n    #endif\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH\n    vec4 clipPos = cc_matProj * cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = clipPos.z / clipPos.w;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH\n    vec4 viewPos = cc_matView * vec4(FSInput_worldPos.xyz, 1.0);\n    float depth = (-viewPos.z - cc_nearFar.x) / cc_nearFar.y;\n    color = vec4(depth, depth, depth, 1.0);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_WORLD_POS\n    color = vec4(FSInput_worldPos.xyz, 1.0);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n  void CCSurfacesDebugViewLightingResult(out vec4 color, in LightingResult lightingResult)\n  {\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR\n    color.rgb = lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_DIRECT_ALL\n    color.rgb = lightingResult.directDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.directSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR\n    color.rgb = lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_ENV_ALL\n    color.rgb = lightingResult.environmentDiffuse * lightingResult.diffuseColorWithLighting + lightingResult.environmentSpecular * lightingResult.specularColorWithLighting;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_LIGHT_MAP\n    color.rgb = lightingResult.lightmapColor;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_EMISSIVE\n    color.rgb = lightingResult.emissive;\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_AO\n    color.rgb = vec3(lightingResult.ao);\n  #endif\n  #if 0 == CC_SURFACES_DEBUG_VIEW_SHADOW\n    color.rgb = vec3(lightingResult.shadow);\n  #endif\n  }\n#endif\n#if 0 || 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  void CCSurfacesDebugViewCompositeLightingResult(inout LightingResult lightingResult)\n  {\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE)\n    lightingResult.directDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR)\n    lightingResult.directSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE)\n    lightingResult.environmentDiffuse = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR)\n    lightingResult.environmentSpecular = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE)\n    lightingResult.emissive = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP)\n    lightingResult.lightmapColor = vec3(0.0);\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW)\n    lightingResult.shadow = 1.0;\n  #endif\n  #if !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO)\n    lightingResult.ao = 1.0;\n  #endif\n  }\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main()  {\n  #if CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER\n    float NoL = dot(-cc_mainLitDir.xyz, FSInput_worldNormal.xyz);\n    vec4 color = SurfacesFragmentModifyBaseColorAndTransparency();\n  #else\n    SurfacesMaterialData surfaceData;\n    CCSurfacesFragmentGetMaterialData(surfaceData);\n    highp vec4 shadowPos = vec4(0.0);\n    vec2 shadowBias = vec2(0.0);\n    vec3 colDebugCSMLayer = vec3(1.0);\n    #if CC_RECEIVE_SHADOW\n      shadowPos = FSInput_shadowPos;\n      shadowBias = vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n      #if USE_INSTANCING\n        shadowBias = FSInput_shadowBias;\n      #elif !USE_BATCHING\n        shadowBias += cc_localShadowBias.xy;\n      #endif\n      #if !CC_FORWARD_ADD\n      #endif\n    #endif\n    #if !CC_FORWARD_ADD\n      float fogFactor = 0.0;\n      #if !CC_USE_ACCURATE_FOG\n        fogFactor = FSInput_fogFactor;\n      #else\n        CC_TRANSFER_FOG_BASE(vec4(FSInput_worldPos, 1.0), fogFactor);\n      #endif\n      #if 0 && !(0 & CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG)\n        fogFactor = 0.0;\n      #endif\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_fog <= 0.0) {\n            fogFactor = 0.0;\n        }\n      #endif\n    #endif\n    LightingResult lightingResult;\n    CCSurfacesLighting(lightingResult, surfaceData, shadowPos, shadowBias);\n    #if 0 == CC_SURFACES_DEBUG_VIEW_SINGLE\n      vec4 debugColor = vec4(0.0, 0.0, 0.0, 1.0);\n      #if !CC_FORWARD_ADD\n        CCSurfacesDebugViewMeshData(debugColor);\n        CCSurfacesDebugViewSurfaceData(debugColor, surfaceData);\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_FOG)) < EPSILON))\n        {\n          fogFactor = 1.0 - fogFactor;\n          debugColor = vec4(fogFactor, fogFactor, fogFactor, 1.0);\n        }\n      #endif\n      #if CC_FORWARD_ADD\n        if ((abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR)) < EPSILON) || (abs(float(cc_debug_view_single_mode) - float(CC_SURFACES_DEBUG_VIEW_DIRECT_ALL)) < EPSILON))\n      #endif\n        CCSurfacesDebugViewLightingResult(debugColor, lightingResult);\n      gl_FragData[0] = debugColor;\n      return;\n    #elif 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      #if CC_FORWARD_ADD\n        if(cc_debug_view_composite_enable_direct_diffuse > 0.0 || cc_debug_view_composite_enable_direct_specular > 0.0)\n      #endif\n      CCSurfacesDebugViewCompositeLightingResult(lightingResult);\n    #endif\n    vec4 color = CCSurfacesShading(surfaceData, lightingResult);\n    #if !CC_FORWARD_ADD\n      CC_APPLY_FOG_BASE(color, fogFactor);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_misc_enable_csm_layer_coloration > 0.0) {\n          color.rgb *= colDebugCSMLayer.rgb;\n      }\n    #endif\n  #endif\n    #if CC_USE_HDR\n      #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n        if (cc_debug_view_composite_enable_tone_mapping > 0.0)\n      #endif\n        color.rgb = ACESToneMap(color.rgb);\n    #endif\n    #if 0 == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n      if (cc_debug_view_composite_enable_gamma_correction > 0.0)\n    #endif\n    color.rgb = sqrt(color.rgb);\n    CCSurfacesDebugDisplayInvalidNumber(color);\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n    void main () {\n      SurfacesMaterialData surfaceData;\n      CCSurfacesFragmentGetMaterialData(surfaceData);\n      gl_FragData[0] = CCSurfacesDeferredOutput0(surfaceData);\n      gl_FragData[1] = CCSurfacesDeferredOutput1(surfaceData);\n      gl_FragData[2] = CCSurfacesDeferredOutput2(surfaceData);\n    }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_SURFACES_USE_LIGHT_MAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":224,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":76}},"defines":[{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"IS_ANISOTROPY","type":"boolean","defines":[]},{"name":"USE_COMPATIBLE_LIGHTING","type":"boolean","defines":[]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,3]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","defines":[],"range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":[],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"CC_FOG_LINEAR","type":"boolean","defines":["CC_USE_FOG"]},{"name":"CC_FOG_EXP","type":"boolean","defines":["CC_USE_FOG","!CC_USE_FOG","!CC_FOG_LINEAR"]},{"name":"CC_FOG_EXP_SQUARED","type":"boolean","defines":["CC_USE_FOG","!CC_USE_FOG","!CC_FOG_LINEAR","!CC_USE_FOG","!CC_FOG_EXP"]},{"name":"CC_FOG_LAYERED","type":"boolean","defines":["CC_USE_FOG","!CC_USE_FOG","!CC_FOG_LINEAR","!CC_USE_FOG","!CC_FOG_EXP","!CC_USE_FOG","!CC_FOG_EXP_SQUARED"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"DEFAULT_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ANISOTROPY_ROTATION_MAP","type":"boolean","defines":["IS_ANISOTROPY"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]}]},{"hash":2651776854,"name":"../Internal/Effects/Surfaces/triplanar|shadow-caster-vs|shadow-caster-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1},{"name":"anisotropyParam","type":14,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]},{"name":"anisotropyRotationMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["IS_ANISOTROPY","USE_ANISOTROPY_ROTATION_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":["CC_SURFACES_USE_TANGENT_SPACE"]},{"name":"a_color","format":44,"location":6,"defines":["CC_SURFACES_USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":7,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_SURFACES_USE_LIGHT_MAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":14,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":15,"defines":["CC_USE_MORPH"]}],"varyings":[{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":0,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  layout(location = 3) in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  layout(location = 6) in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  layout(location = 7) in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 8) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 9) in vec4 a_matWorld0;\n  layout(location = 10) in vec4 a_matWorld1;\n  layout(location = 11) in vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    layout(location = 12) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 13) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 14) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n#endif\n    #define CC_SURFACES_VARING_MODIFIER out\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n#endif\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nlayout(location = 0) out float v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.z / In.clipPos.w * 0.5 + 0.5;\n}","frag":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER in\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(set = 2, binding = 1) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n  #if USE_ALBEDO_MAP\n    layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    layout(set = 1, binding = 2) uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    layout(set = 1, binding = 7) uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  layout(location = 0) in float v_clip_depth;\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    SurfacesFragmentModifyBaseColorAndTransparency();\n    if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        fragColorX = vec4(CCGetLinearDepth(FSInput_worldPos.xyz), 1.0, 1.0, 1.0);\n        return;\n      }\n    }\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      fragColorX = packDepthToRGBA(v_clip_depth);\n    } else {\n      fragColorX = vec4(v_clip_depth, 1.0, 1.0, 1.0);\n    }\n  }"},"glsl3":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  in vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  in vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n#endif\n    #define CC_SURFACES_VARING_MODIFIER out\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nout float v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.z / In.clipPos.w * 0.5 + 0.5;\n}","frag":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER in\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    layout(std140) uniform CCForwardLight {\n      highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n      vec4 cc_lightColor[LIGHTS_PER_PASS];\n      vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n      vec4 cc_lightDir[LIGHTS_PER_PASS];\n    };\n    #endif\n  #endif\n#endif\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n  vec2 anisotropyParam;\n};\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  in float v_clip_depth;\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    SurfacesFragmentModifyBaseColorAndTransparency();\n    if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        fragColorX = vec4(CCGetLinearDepth(FSInput_worldPos.xyz), 1.0, 1.0, 1.0);\n        return;\n      }\n    }\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      fragColorX = packDepthToRGBA(v_clip_depth);\n    } else {\n      fragColorX = vec4(v_clip_depth, 1.0, 1.0, 1.0);\n    }\n  }"},"glsl1":{"vert":"\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  attribute vec4 a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  attribute vec4 a_color;\n#endif\n#if CC_SURFACES_USE_SECOND_UV || CC_SURFACES_USE_LIGHT_MAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_SURFACES_USE_LIGHT_MAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n#endif\n    #define CC_SURFACES_VARING_MODIFIER varying\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define VSOutput_worldPos v_worldPos\n#define VSOutput_worldNormal v_normal.xyz\n#define VSOutput_faceSideSign v_normal.w\n#define VSOutput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define VSOutput_vertexColor v_color\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define VSOutput_worldTangent v_tangent.xyz\n  #define VSOutput_mirrorNormal v_tangent.w\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define VSOutput_texcoord1 v_uv1\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define VSOutput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define VSOutput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define VSOutput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define VSOutput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define VSOutput_localPos v_localPos\n#endif\nstruct SurfacesStandardVertexIntermediate\n{\n  highp vec4 position;\n  vec3 normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  vec4 tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  vec4 color;\n#endif\n  vec2 texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  vec2 texCoord1;\n#endif\n  highp vec4 clipPos;\n  highp vec3 worldPos;\n  vec4 worldNormal;\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    vec3 worldTangent, worldBinormal;\n  #endif\n#if CC_RECEIVE_SHADOW\n  highp vec4 shadowPos;\n  vec2 shadowBias;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  float fogFactor;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  vec3 lightmapUV;\n#endif\n};\n#if CC_USE_MORPH\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nuniform highp vec4 cc_cameraPos;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_MORPH\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if !CC_USE_ACCURATE_FOG\n#endif\nuniform highp mat4 cc_matLightViewProj;\n      uniform vec4 tilingOffset;\n#define CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  vec3 worldPos = In.worldPos;\n  In.texCoord = worldPos.xz * tilingOffset.xy + tilingOffset.zw;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\n}\n#ifndef CC_SURFACES_VERTEX_MODIFY_LOCAL_POS\nvec3 SurfacesVertexModifyLocalPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.position.xyz;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_POS\nvec3 SurfacesVertexModifyWorldPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.worldPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_CLIP_POS\nvec4 SurfacesVertexModifyClipPos(in SurfacesStandardVertexIntermediate In)\n{\n  return In.clipPos;\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_UV\nvoid SurfacesVertexModifyUV(inout SurfacesStandardVertexIntermediate In)\n{\n  In.texCoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = In.texCoord1;\n#endif\n}\n#endif\n#ifndef CC_SURFACES_VERTEX_MODIFY_WORLD_NORMAL\n#endif\nvoid CCSurfacesVertexInput(out SurfacesStandardVertexIntermediate In)\n{\n  In.position = vec4(a_position, 1.0);\n  In.normal = a_normal;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  In.tangent = a_tangent;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  In.color = a_color;\n#endif\n  In.texCoord = a_texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  In.texCoord1 = a_texCoord1;\n#endif\n}\nvoid CCSurfacesVertexOutput(in SurfacesStandardVertexIntermediate In)\n{\n  gl_Position = In.clipPos;\n  VSOutput_worldNormal = In.worldNormal.xyz;\n  VSOutput_faceSideSign = In.worldNormal.w;\n  VSOutput_worldPos = In.worldPos;\n#if CC_SURFACES_USE_TANGENT_SPACE\n  VSOutput_worldTangent = In.worldTangent.xyz;\n  VSOutput_mirrorNormal = In.tangent.w;\n#endif\n#if CC_SURFACES_USE_VERTEX_COLOR\n  VSOutput_vertexColor = In.color;\n#endif\n  VSOutput_texcoord = In.texCoord;\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  VSOutput_texcoord1 = In.texCoord1;\n#endif\n#if !CC_USE_ACCURATE_FOG\n  VSOutput_fogFactor = In.fogFactor;\n#endif\n#if CC_RECEIVE_SHADOW\n  VSOutput_shadowPos = In.shadowPos;\n  #if USE_INSTANCING\n    VSOutput_shadowBias = In.shadowBias;\n  #endif\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  VSOutput_lightMapUV = In.lightmapUV;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  VSOutput_localPos = In.position;\n#endif\n}\nvoid CCSurfacesVertexAnimation(inout SurfacesStandardVertexIntermediate In)\n{\nvec4 temp = vec4(0.0);\n#if CC_USE_MORPH\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    applyMorph(In.position, In.normal, In.tangent);\n  #else\n    applyMorph(In.position, In.normal, temp);\n  #endif\n#endif\n#if CC_USE_SKINNING\n  #if CC_SURFACES_USE_TANGENT_SPACE\n    CCSkin(In.position, In.normal, In.tangent);\n  #else\n    CCSkin(In.position, In.normal, temp);\n  #endif\n#endif\n}\nvoid CCSurfacesVertexWorldTransform(inout SurfacesStandardVertexIntermediate In)\n{\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n    In.worldPos = (matWorld * In.position).xyz;\n    In.worldNormal.xyz = normalize((matWorldIT * vec4(In.normal.xyz, 0.0)).xyz);\n    #if CC_SURFACES_USE_TANGENT_SPACE\n      In.worldTangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n      In.worldBinormal = cross(In.worldNormal.xyz, In.worldTangent) * In.tangent.w;\n    #endif\n}\nvoid CCSurfacesVertexTransformUV(inout SurfacesStandardVertexIntermediate In)\n{\n  #if SAMPLE_FROM_RT\n    In.texCoord = cc_cameraPos.w > 1.0 ? vec2(In.texCoord.x, 1.0 - In.texCoord.y) : In.texCoord;\n    #if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n      In.texCoord1 = cc_cameraPos.w > 1.0 ? vec2(In.texCoord1.x, 1.0 - In.texCoord1.y) : In.texCoord1;\n    #endif\n  #endif\n}\nvarying float v_clip_depth;\nvoid main()\n{\n  SurfacesStandardVertexIntermediate In;\n  CCSurfacesVertexInput(In);\n  CCSurfacesVertexAnimation(In);\n  In.position.xyz = SurfacesVertexModifyLocalPos(In);\n  CCSurfacesVertexWorldTransform(In);\n  In.worldPos = SurfacesVertexModifyWorldPos(In);\n  In.clipPos = cc_matLightViewProj * vec4(In.worldPos, 1.0);\n  In.clipPos = SurfacesVertexModifyClipPos(In);\n  SurfacesVertexModifyUV(In);\n  CCSurfacesVertexTransformUV(In);\n  CCSurfacesVertexOutput(In);\n  v_clip_depth = In.clipPos.z / In.clipPos.w * 0.5 + 0.5;\n}","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\n#define CC_SURFACES_USE_TANGENT_SPACE 0\n#define CC_SURFACES_USE_VERTEX_COLOR 0\n#define CC_SURFACES_USE_SECOND_UV 0\n#define CC_SURFACES_USE_LIGHT_MAP 0\n#define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#ifndef CC_SURFACES_USE_SECOND_UV\n  #define CC_SURFACES_USE_SECOND_UV 0\n#endif\n#ifndef CC_SURFACES_USE_TANGENT_SPACE\n  #define CC_SURFACES_USE_TANGENT_SPACE 0\n#endif\n#ifndef CC_SURFACES_USE_VERTEX_COLOR\n  #define CC_SURFACES_USE_VERTEX_COLOR 0\n#endif\n#ifndef CC_SURFACES_TRANSFER_LOCAL_POS\n  #define CC_SURFACES_TRANSFER_LOCAL_POS 0\n#endif\n#if CC_USE_LIGHTMAP\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 1\n  #endif\n#else\n  #ifndef CC_SURFACES_USE_LIGHT_MAP\n    #define CC_SURFACES_USE_LIGHT_MAP 0\n  #endif\n#endif\n#ifndef CC_SURFACES_USE_TWO_SIDED\n  #define CC_SURFACES_USE_TWO_SIDED 0\n#endif\n#ifndef CC_SURFACES_USE_REFLECTION_DENOISE\n  #define CC_SURFACES_USE_REFLECTION_DENOISE 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC 0\n#endif\n#ifndef CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT\n  #define CC_SURFACES_LIGHTING_ANISOTROPIC_ENVCONVOLUTION_COUNT 0\n#endif\n#ifndef CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING\n  #define CC_SURFACES_USE_LEGACY_COMPATIBLE_LIGHTING 0\n#endif\n    #define CC_SURFACES_VARING_MODIFIER varying\nCC_SURFACES_VARING_MODIFIER highp vec3 v_worldPos;\nCC_SURFACES_VARING_MODIFIER mediump vec4 v_normal;\nCC_SURFACES_VARING_MODIFIER vec2 v_uv;\n#if CC_SURFACES_USE_VERTEX_COLOR\n  CC_SURFACES_VARING_MODIFIER lowp vec4 v_color;\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  CC_SURFACES_VARING_MODIFIER mediump vec4 v_tangent;\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  CC_SURFACES_VARING_MODIFIER mediump vec2 v_uv1;\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  CC_SURFACES_VARING_MODIFIER mediump vec3 v_luv;\n#endif\n#if CC_RECEIVE_SHADOW\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_shadowPos;\n  #if USE_INSTANCING\n    CC_SURFACES_VARING_MODIFIER mediump vec2 v_shadowBias;\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  CC_SURFACES_VARING_MODIFIER float v_fogFactor;\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  CC_SURFACES_VARING_MODIFIER highp vec4 v_localPos;\n#endif\n#define FSInput_worldPos v_worldPos\n#define FSInput_worldNormal v_normal.xyz\n#define FSInput_faceSideSign v_normal.w\n#define FSInput_texcoord v_uv\n#if CC_SURFACES_USE_VERTEX_COLOR\n  #define FSInput_vertexColor v_color\n#else\n  #define FSInput_vertexColor vec4(1.0)\n#endif\n#if CC_SURFACES_USE_TANGENT_SPACE\n  #define FSInput_worldTangent v_tangent.xyz\n  #define FSInput_mirrorNormal v_tangent.w\n#else\n  #define FSInput_worldTangent vec3(0.0, 0.0, 0.0)\n  #define FSInput_mirrorNormal 1.0\n#endif\n#if CC_SURFACES_USE_SECOND_UV && !CC_SURFACES_USE_LIGHT_MAP\n  #define FSInput_texcoord1 v_uv1\n#else\n  #define FSInput_texcoord1 vec2(0.0, 0.0)\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  #define FSInput_lightMapUV v_luv\n#endif\n#if CC_RECEIVE_SHADOW\n  #define FSInput_shadowPos v_shadowPos\n  #if USE_INSTANCING\n    #define FSInput_shadowBias v_shadowBias\n  #endif\n#endif\n#if !CC_USE_ACCURATE_FOG\n  #define FSInput_fogFactor v_fogFactor\n#endif\n#if CC_SURFACES_TRANSFER_LOCAL_POS\n  #define FSInput_localPos v_localPos\n#endif\n#if (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  #if CC_FORWARD_ADD\n    #if CC_PIPELINE_TYPE == 0\n      #define LIGHTS_PER_PASS 1\n    #else\n      #define LIGHTS_PER_PASS 10\n    #endif\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n    #endif\n  #endif\n#endif\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_SURFACES_USE_LIGHT_MAP && !USE_BATCHING && !CC_FORWARD_ADD\n  uniform sampler2D cc_lightingMap;\n#endif\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_COMPOSITE_DIRECT_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_DIFFUSE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE CC_SURFACES_DEBUG_VIEW_COMPOSITE_ENV_SPECULAR * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_EMISSIVE * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW CC_SURFACES_DEBUG_VIEW_COMPOSITE_LIGHT_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO CC_SURFACES_DEBUG_VIEW_COMPOSITE_SHADOW * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP CC_SURFACES_DEBUG_VIEW_COMPOSITE_AO * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG CC_SURFACES_DEBUG_VIEW_COMPOSITE_NORMAL_MAP * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING CC_SURFACES_DEBUG_VIEW_COMPOSITE_FOG * 2\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_GAMMA_CORRECTION CC_SURFACES_DEBUG_VIEW_COMPOSITE_TONE_MAPPING * 2\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_NORMAL_MAP\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_PBR_MAP\n    uniform sampler2D pbrMap;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    uniform sampler2D metallicRoughnessMap;\n  #endif\n  #if USE_OCCLUSION_MAP\n    uniform sampler2D occlusionMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\n  #if IS_ANISOTROPY && USE_ANISOTROPY_ROTATION_MAP\n    uniform sampler2D anisotropyRotationMap;\n  #endif\n  #if USE_ALPHA_TEST\n  #endif\n  #define CC_SURFACES_FRAGMENT_MODIFY_BASECOLOR_AND_TRANSPARENCY\n  vec4 SurfacesFragmentModifyBaseColorAndTransparency()\n  {\n    vec4 baseColor = albedo;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(FSInput_vertexColor.rgb);\n      baseColor.a *= FSInput_vertexColor.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor *= texColor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n    #endif\n    baseColor.rgb *= albedoScaleAndCutoff.xyz;\n    return baseColor;\n  }\n  #define CC_SURFACES_FRAGMENT_MODIFY_WORLD_NORMAL\n  #define CC_SURFACES_FRAGMENT_MODIFY_ANISOTROPY_PARAMS\n  #define CC_SURFACES_FRAGMENT_MODIFY_EMISSIVE\n  #define CC_SURFACES_FRAGMENT_MODIFY_PBRPARAMS\n  varying float v_clip_depth;\n  void main () {\n    SurfacesFragmentModifyBaseColorAndTransparency();\n    if(cc_shadowLPNNInfo.x > EPSILON && cc_shadowLPNNInfo.x < 1.999999) {\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        gl_FragColor = vec4(CCGetLinearDepth(FSInput_worldPos.xyz), 1.0, 1.0, 1.0);\n        return;\n      }\n    }\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      gl_FragColor = packDepthToRGBA(v_clip_depth);\n    } else {\n      gl_FragColor = vec4(v_clip_depth, 1.0, 1.0, 1.0);\n    }\n  }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]},{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_SURFACES_USE_LIGHT_MAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":224,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":76}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":["!CC_USE_ACCURATE_FOG"],"range":[0,4]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_DISABLE_STRUCTURE_IN_FRAGMENT_SHADER","type":"number","defines":[],"range":[0,1]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":[],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":["CC_USE_IBL"],"range":[0,2]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"DEFAULT_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"IS_ANISOTROPY","type":"boolean","defines":[]},{"name":"USE_ANISOTROPY_ROTATION_MAP","type":"boolean","defines":["IS_ANISOTROPY"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]}]}],[{"name":"opaque","passes":[{"program":"../Internal/Effects/Surfaces/triplanar|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"anisotropyShape":{"type":13,"value":[1],"editor":{"parent":"IS_ANISOTROPY","slide":true,"step":0.0001,"range":[0,1]},"handleInfo":["anisotropyParam",0,13]},"anisotropyRotation":{"type":13,"value":[0],"editor":{"parent":"IS_ANISOTROPY","slide":true,"step":0.0001,"range":[0,1]},"handleInfo":["anisotropyParam",1,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"anisotropyRotationMap":{"value":"black","type":28,"editor":{"parent":"IS_ANISOTROPY"}},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"anisotropyParam":{"type":14,"editor":{"visible":false,"deprecated":true},"value":[1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Internal/Effects/Surfaces/triplanar|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Internal/Effects/Surfaces/triplanar|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"../Internal/Effects/Surfaces/triplanar|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"anisotropyShape":{"type":13,"value":[1],"editor":{"parent":"IS_ANISOTROPY","slide":true,"step":0.0001,"range":[0,1]},"handleInfo":["anisotropyParam",0,13]},"anisotropyRotation":{"type":13,"value":[0],"editor":{"parent":"IS_ANISOTROPY","slide":true,"step":0.0001,"range":[0,1]},"handleInfo":["anisotropyParam",1,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"anisotropyRotationMap":{"value":"black","type":28,"editor":{"parent":"IS_ANISOTROPY"}},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"anisotropyParam":{"type":14,"editor":{"visible":false,"deprecated":true},"value":[1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"../Internal/Effects/Surfaces/triplanar|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../Internal/Effects/Surfaces/triplanar|shadow-caster-vs|shadow-caster-fs","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[36],[11,"SM_WindMill_01",[-2],[2,"59Dd/omQdUtaDIBCYbK0As",-1,0]],[28,"SM_WindMill_01",1,[[25,-3,[0,"c5k4kXWTlQoLaXY0oJnf2S"],[0],[23],1]],[2,"10D8hmc/FQSJKisfVkIoyt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[367,368]],[[[29,".bin",2411879452,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27888,"length":4008,"count":1002,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27888,"count":581,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.733604907989502,-6.2069807052612305,-3.5114030838012695],"maxPosition",8,[1,6.733602523803711,5.831472396850586,12.121369361877441]]],-1],0,0,[],[],[]],[[[37,"SM_WindMill_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_02_DeadTree_01"],[11,"NorthernHeights_02_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,19]],[[[71,"sfx_player_slide_loop",".mp3",12.016327],-1],0,0,[],[],[]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[167,167,37]],[[[12,"NorthernHeights_07_Tree_02"],[11,"NorthernHeights_07_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"d54j/0XgdLmZfKg33XsFdk",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,24]],[[[29,".bin",1717270491,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6192,"length":1548,"count":387,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6192,"count":129,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.27341917157173157,-0.00812764372676611,0],"maxPosition",8,[1,0.25176915526390076,0.624398410320282,0]]],-1],0,0,[],[],[]],[[[261,"builtin-particle-trail",[{"hash":2502358098,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2543411830,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture2D(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1579485357,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2581776267,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[29,".bin",2969213657,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0649467706680298,-1.0650538206100464,-2.8358912467956543],"maxPosition",8,[1,1.0650935173034668,1.0649864673614502,4.490630149841309]]],-1],0,0,[],[],[]],[[[37,"SM_Tree_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Tree_02",[-2],[2,"25GQKtinlUoJShX4KIrA0w",-1,0]],[28,"SM_Tree_02",1,[[25,-3,[0,"7e5RYai9tQsrPOQ5YB1wyw"],[0],[23],1]],[2,"3fk2SLU61Yb4F4XLJl0fLI",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[369,370]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[205,25]],[[[12,"NorthernHeights_01_Snowman_02"],[11,"NorthernHeights_01_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"e3UDMMVg9FV4YDdSFpCTv/",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,8]],[[{"name":"UI_WishButton_Currency Panel","rect":{"x":0,"y":0,"width":96,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":96,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[371]],[[[12,"DebugSphere"],[323,"DebugSphere",4194304,[-2],[2,"82SN0DHg5DTa+u8EU31YWs",-1,0]],[264,"Sphere",4194304,1,[[176,"Sphere<ModelComponent>",-3,[0,"4fcFBH4YlFlZQmlAxlK2NU"],[0],[23],1]],[2,"f1jqBPPNdAno4AtOxpBe6U",1,0],[1,0.7,0.7,0.7]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[372,373]],[[[261,"builtin-standard",[{"hash":4079105024,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":3928335406,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[37,"SM_WindMillHelix_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1173792084,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44160,"length":5664,"count":1416,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":44160,"count":920,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-8.136576652526855,0.3735547661781311,-8.136577606201172],"maxPosition",8,[1,8.136577606201172,1.3669148683547974,8.136577606201172]]],-1],0,0,[],[],[]],[[[36],[11,"SM_WindMillHelix_01",[-2],[2,"76NM6rjWRY8oLoGULPrJgq",-1,0]],[28,"SM_WindMillHelix_01",1,[[25,-3,[0,"41ivsXhKhS/INZwBHtanJQ"],[0],[23],1]],[2,"f2FIxf6opVx7TK3Lt2gPAN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[374,375]],[[[12,"NorthernHeights_Candy_Lollipop_02"],[11,"NorthernHeights_Candy_Lollipop_02",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["b6c02cEWNdIJxIEhk4eMrG"]],[10,0,null,1,[9,"b6c02cEWNdIJxIEhk4eMrG",-4,[13,"f8PwiFN8RL0rjWzlAQhczx",1,[[6,"SM_Lollipop_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["56I6PL5h5cSZsU2LfXXDo8"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[376,15]],[[[12,"LevelThemeEnd_05"],[88,"LevelThemeEnd_05",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"08BkGbIYtDOrIOnz7jTIBB",1,0],[1,1.307,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"8dWHVCYzpHt4qLFGEKPDIq"],[28],[23],29]],[2,"82kRdJ1oNO2LzmxMHiMXgh",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"48KOqWnQxACKHeyByX0xyn",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"a8yfFD/aFGaKb1iZLRZgD8"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,206,206,36,47,48,30,27,377,16,207,17]],[[{"name":"UI_Panel_HexSide Shadow White","rect":{"x":0,"y":1,"width":88,"height":74},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":76},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[378]],[[[12,"LevelThemeEnd_06"],[88,"LevelThemeEnd_06",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"85OQd4NxJARr32OubUGoaa",1,0],[1,-0.262,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"e8aXNxEUdKGrm6WDMAHAte"],[28],[23],29]],[2,"1f0Mn7RLhMx5j1a9HPR3EX",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"773q6sOMtDArBToAYLwsEK",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"3eIMf57E1Lp43g+HpPuVtx"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,208,208,36,47,48,30,27,209,16,210,17]],[[[12,"SM_Number_6"],[140,"SM_Number_6",[-2],[2,"89nLZ4jt9REKLOE6UGBwGx",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_6",1,[[25,-3,[0,"59Tbap5WtbsKUL6t+FFYD8"],[0],[23],1]],[2,"09kGOv2w1fYpOIbhe07JLC",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,379]],[[[71,"sfx_gacha_open",".mp3",1.567347],-1],0,0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[13],[380]],[[[29,".bin",3653646549,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12288,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12288,"count":256,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.167208731174469,-1.612258791923523,-0.2781020700931549],"maxPosition",8,[1,0.16719835996627808,0.4508012533187866,4.704946041107178]]],-1],0,0,[],[],[]],[[[37,"SM_Lollipop_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Lollipop_01",[-2],[2,"b4J+Kx+n5diIwfUVTKvE02",-1,0]],[28,"SM_Lollipop_01",1,[[25,-3,[0,"15uCqE5yxYXq1f0YBVlYl/"],[0],[23],1]],[2,"d5VsUPzDxVw5g/t2JHxmu1",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[381,382]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[383,65,38]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[97,97,38]],[[{"name":"UI_Button_SmallHex Color","rect":{"x":0,"y":0,"width":84,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":84},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[384]],[[[12,"NorthernHeights_Spring_Flower_04"],[11,"NorthernHeights_Spring_Flower_04",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["dfCXFbNMZXZasu15umd1c4"]],[10,0,null,1,[9,"dfCXFbNMZXZasu15umd1c4",-4,[13,"bbmq6K+W5F+I07PYt9zFue",1,[[6,"SM_FlowerSpring_04",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["a9IQsuhvRRcZG2Y8X3hiQS"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[385,6]],[[{"name":"UI_WishButton_ColorNotClickable","rect":{"x":11,"y":7,"width":117,"height":112},"offset":{"x":-0.5,"y":5},"originalSize":{"width":140,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[386]],[[[12,"NorthernHeights_06_Cabin_02"],[11,"NorthernHeights_06_Cabin_02",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"f8UfN/WNFJ1KBrf5UhK1IL",1,[[6,"NorthernHeights_01_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,5.595]],[4,["_lrot"],-12,[3,0,0.2951744758657925,0,0.9554433676557469]],[4,["_euler"],-13,[1,0,34.336,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],3]]],2]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"56qFSMTmdD/p1qMtFLMmlo",1,[[6,"NorthernHeights_01_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.812,0,-6.011]],[4,["_lrot"],-17,[3,0,-0.27324575741241686,0,0.9619442582894887]],[4,["_euler"],-18,[1,0,-31.715,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],4],[4,["_lpos"],4,[1,0,0,0]],[4,["_lrot"],4,[3,0,0,0,1]],[4,["_euler"],4,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,2,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",2,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",3,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],9]]],8]]],0,[0,-1,9,0,-2,2,0,-3,10,0,-4,3,0,-5,11,0,1,1,0,-1,9,0,-2,2,0,-3,3,0,2,5,0,2,5,0,2,5,0,2,5,0,1,2,0,2,6,0,2,6,0,2,6,0,2,6,0,1,3,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0,0,0],[5,6,5,6,5,6,5,6,5,6],[72,22,39,22,39,22,10,8,10,8]],[[[12,"NorthernHeights_Candy_Cabin_01"],[11,"NorthernHeights_Candy_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"792YwZwtNK+agt+qXWub1C",1,[[6,"NorthernHeights_Candy_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0.03,0,5.919]],[4,["_lrot"],-12,[3,0,-0.26771767093685467,0,0.963497404598552]],[4,["_euler"],-13,[1,0,-31.057,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"e6sRuI81dC06HjFUw1ygFf",1,[[6,"NorthernHeights_Candy_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.196,0,-5.979]],[4,["_lrot"],-17,[3,0,0.10113443461933437,0,0.9948727688173135]],[4,["_euler"],-18,[1,0,11.609,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["b4HgqkzfdUWqFmkq1J+mto"]],[3,["b4HgqkzfdUWqFmkq1J+mto"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,3,[9,"b4HgqkzfdUWqFmkq1J+mto",-21,[13,"7cPP63ELhEo6YeLSOAxXIb",1,[[6,"SM_CandyLogs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["2csK3wTPNX87q5ryFBs4a3"]],5]]],4]],[10,0,null,5,[9,"b4HgqkzfdUWqFmkq1J+mto",-22,[13,"7cPP63ELhEo6YeLSOAxXIb",1,[[6,"SM_CandyLogs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["2csK3wTPNX87q5ryFBs4a3"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[72,15,98,98,79,15,79,15]],[[[12,"SplinePlayer"],[338,"SplinePlayer",[-24,-25,-26,-27,-28],[[[458,-13,[0,"ebaMeWv+NMNo8y9Cj5I0Vt"],-12],[459,-14,[0,"edYBOAqvtDUoyq+LcS252u"]],-15,[460,-18,[0,"37ulhTsXBJBrOwVQQ0CzZQ"],-17,-16],[461,-19,[0,"20wnjNCNFP74OC0nPT86R4"]],-20,-21,[462,-22,[0,"1amV6GDbZIRZZNqLguAOuA"]],-23],4,4,1,4,4,1,1,4,1],[241,"fd/H6HBNxJCKoF/M4KP/CY",-11,0,[[138,["_animator"],-4,-3,[3,["9daIO1Ul1IhoMlxV010IKU","2fD/ivLH1GL7As29Aa3OCz"]]],[138,["_animator"],-6,-5,[3,["9daIO1Ul1IhoMlxV010IKU","2fD/ivLH1GL7As29Aa3OCz"]]],[138,["_target"],-8,-7,[3,["9daIO1Ul1IhoMlxV010IKU","28tzY+16NSbom2b3ja/8Zm"]]],[138,["_particle"],-10,-9,[3,["4eHlm0XHtHp6Tyv9R3PTac"]]]],[-1,-2]],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[196,0,null,[9,"83yYEVbixRL5ZsYAVRZfdA",-41,[215,"9daIO1Ul1IhoMlxV010IKU",-40,[[234,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[-38,-39]]],[[463,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[-37]]],[[8,"SK_Armature",["_name"],[3,["83yYEVbixRL5ZsYAVRZfdA"]]],[21,["_lpos"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[1,0,0,0]],[21,["_lrot"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[3,0,-0.7071067811865475,0,0.7071067811865476]],[21,["_euler"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[1,0,-90,0]],[14,["_materials","0"],[3,["46r2eLwu1fPqtmJsINAqA0"]],2],[177,["_skinningRoot"],[3,["46r2eLwu1fPqtmJsINAqA0"]],-29],[8,false,["playOnLoad"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[8,2,["_sockets","length"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[216,["_sockets","0"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[162,"SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck/DEF-Head",-30]],[216,["_sockets","1"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[162,"SK_Armature/DEF-ROOT/PVT-Board",-31]],[8,false,["_useBakedAnimation"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[14,["_materials","0"],[3,["aajcY4kBBd8476dCQyztSa"]],3],[177,["_skinningRoot"],[3,["aajcY4kBBd8476dCQyztSa"]],-32],[8,2,["_layer"],[3,["83yYEVbixRL5ZsYAVRZfdA"]]],[8,2,["_layer"],[3,["1aETFLNnpUyrzqsbYSX1oY"]]],[8,2,["_layer"],[3,["45WIlVUKBYCI7aqXsWOzZ5"]]],[8,2,["_layer"],[3,["03l3u1nLha8bBAAuWzbbRD"]]],[8,2,["_layer"],[3,["28tzY+16NSbom2b3ja/8Zm"]]],[8,2,["_layer"],[3,["b7M7VQAEhTH7iAwIqCbaYM"]]],[8,2,["_layer"],[3,["7f6NkFTBNYebHPfkjoZKJv"]]],[8,2,["_layer"],[3,["57j9gDVJRRZ7RmnbipMl2X"]]],[8,2,["_layer"],[3,["689zN6A5tUioN/MRmMO7yK"]]],[8,2,["_layer"],[3,["06OhWVSk5R44gZF07OECn/"]]],[8,2,["_layer"],[3,["b8zRda/PdbWY2GLaNkeEhA"]]],[8,2,["_layer"],[3,["d9XANdQOxcE5IqxBYg1/rn"]]],[8,2,["_layer"],[3,["06LTyPm9JclpfeLHEX1O+z"]]],[8,2,["_layer"],[3,["53TAej7+FRmbGIvuvb/Zzu"]]],[8,2,["_layer"],[3,["4e9DpEXF9TL6tLR/XciP3n"]]],[8,2,["_layer"],[3,["09DB4i5ulTdbTt0g2ov7ku"]]],[8,2,["_layer"],[3,["c04GHtL+dVjKGb5dxGJA+7"]]],[8,2,["_layer"],[3,["f2sJnjZ9ZWXaAEVrrydpZZ"]]],[8,2,["_layer"],[3,["6f8P+ZWLNcd4rakEQ8xJu4"]]],[8,2,["_layer"],[3,["4bir84c9FchY1htP3/5J2X"]]],[8,2,["_layer"],[3,["dcb+0Q7BxVg4ket6gwkyll"]]],[8,2,["_layer"],[3,["7aednaSMVfI6OYLybTU8RA"]]],[8,2,["_layer"],[3,["16hK99H51dUpgx6wYg1C56"]]],[8,2,["_layer"],[3,["5baf56MBZacZM+3pibQIE9"]]],[8,2,["_layer"],[3,["984JbYsVtXCLHtMqVz842U"]]],[8,2,["_layer"],[3,["7fOX3jZYFXOq+WneTm8lpD"]]],[8,2,["_layer"],[3,["f47v0tKP9Rm52QYsFN/Gr8"]]],[8,2,["_layer"],[3,["524q9MP1xb0Is7hyL2iez0"]]],[8,2,["_layer"],[3,["d0YBoMtI9fTrRPAaV2NbrL"]]],[8,2,["_layer"],[3,["a4z86+tzxePbJS4RfxLozo"]]],[8,2,["_layer"],[3,["0e0ilYB3xcMbMcFRF3NKsQ"]]],[8,2,["_layer"],[3,["21v622JsBfxK2vufo9CfyB"]]],[8,2,["_layer"],[3,["f6jc1Xdy5U7oJPQUVC51WD"]]],[8,2,["_layer"],[3,["10RV4J6d1Zro60XwIzhLKx"]]],[8,2,["_layer"],[3,["53s5LGERlUlqXbf6P8N6YT"]]],[8,2,["_layer"],[3,["8bkfWCamhafbHlO7EXp3Gj"]]],[14,["_materials","0"],[3,["230TJNZx9QzpP8wIPNEhjb"]],4],[177,["_skinningRoot"],[3,["230TJNZx9QzpP8wIPNEhjb"]],-33],[8,"SM_Character",["_name"],[3,["a2A9o067JcCKm9sFsBzm9E"]]],[21,["_lrot"],[3,["a2A9o067JcCKm9sFsBzm9E"]],[3,-0.7071067811865475,-1.545431009634194e-8,-1.5454310096341944e-8,0.7071067811865474]],[21,["_euler"],[3,["a2A9o067JcCKm9sFsBzm9E"]],[1,-90.00000000000001,-0.0000025044781562438674,0]],[6,"SM_Helmet_01",["_name"],-34],[4,["_lrot"],-35,[3,-0.7071067811865475,-1.545431009634194e-8,-1.5454310096341944e-8,0.7071067811865474]],[4,["_euler"],-36,[1,-90.00000000000001,-0.0000025044781562438674,0]]]],1]],[196,0,{},[242,"e7UKk3shNCNb06y1Oa6Api",-49,[13,"5bETGanc1BAYtPumw57d1Y",1,[[8,"CharacterModelGameplay",["_name"],[3,["e7UKk3shNCNb06y1Oa6Api"]]],[21,["_lpos"],[3,["e7UKk3shNCNb06y1Oa6Api"]],[1,0,0,0]],[21,["_lrot"],[3,["e7UKk3shNCNb06y1Oa6Api"]],[3,0,0,0,1]],[21,["_euler"],[3,["e7UKk3shNCNb06y1Oa6Api"]],[1,0,0,0]],[6,"DEF-Head Socket",["_name"],-42],[4,["_lpos"],-43,[1,0.21121055500876035,2.469569303796788,0.03970563571509993]],[4,["_lrot"],-44,[3,0.16508034576965108,0.6078599253230407,0.15089803513336153,0.7618953820580042]],[4,["_euler"],-45,[1,4.327227328887806,76.18766046802284,25.50745202584509]],[6,"PVT-Board Socket",["_name"],-46],[4,["_lrot"],-47,[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262]],[4,["_euler"],-48,[1,-90,0.00022152757132124867,-4.853141298619868e-20]]]],[[170,["_pivotHelmet"],2,[3,["97bFYTxOdOL7ZPYDlDGVB3"]]],[170,["_pivotSnowboard"],2,[3,["cflXNrgvpMNoqkAVrPd+Cz"]]],[170,["_body"],2,[3,["230TJNZx9QzpP8wIPNEhjb"]]]],0]],[345,"VFX_FastSpeed",2,1,[-51,-52,-53,-54],[-50],[2,"aehqbykO1PWo+mUqDA7KAW",1,0],[1,0,1.451,0],[3,0,1,0,6.123233995736766e-17],[1,3.173,3.173,3.173],[1,0,180,0]],[346,"VFX_PlayerTrail",1,1,[-55,-56,-57,-58],[2,"3aJX7/qABEMaqC8elwzaJR",1,0],[1,0.095,0,0]],[3,["9daIO1Ul1IhoMlxV010IKU","97bFYTxOdOL7ZPYDlDGVB3"]],[3,["9daIO1Ul1IhoMlxV010IKU","cflXNrgvpMNoqkAVrPd+Cz"]],[97,2,[0,"2fD/ivLH1GL7As29Aa3OCz"]],[3,["f54rDv1mZTBrSbrcqNBSjV"]],[79,"CameraRig",1,[-59,-60],[2,"24mGfSdOhFN7pk9+JDDCMe",1,0]],[265,"PivotGameplay",10,[[309,840.517,-61,[0,"f9Zrrw1P9MPaaFDN3nyfmt"]]],[2,"7e87ndeZBOSKWFlwwl+JE7",1,0],[1,-3.5,12,-15.5],[3,-0.00953747048806693,-0.9819073908857435,-0.1819857780379785,0.05145958581792704],[1,-21,-174,0]],[265,"PivotGameOver",10,[[309,840.517,-62,[0,"26f10m88dEprnpwc5Tq9/n"]]],[2,"16LCdVDLdKYoXtt1VhEHMH",1,0],[1,-3.5,12,-15.5],[3,-0.009125164352543002,-0.9598330636909095,-0.27147124266204353,0.07028929953262963],[1,-31.502,-171.957,-1.183]],[409,true,0.4,false,false,0,4,[0,"af4lR/bCpIs6FLORWMnrZc"],[[20,null],6,0],[20],[7,1],[1],[1],[15,3,-20,-40],[1],[1],[85,3,6.283185307179586],[1],[15,3,0.2,0.3],[1],[1],[1],[[98,[7,1]],[83,0.05,[7,1]]],[57,true,[59,1,[78,[[189],[40,0.8705357142857143,[4,4287716661]]],[[58,255],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,0.43333333333333335,1],[[75,2,0.34444444444444444,2.283154121863799,1,2.283154121863799,1],[47,2,0.8333333333333334,0.638242894056848,0.638242894056848],[116,2,1,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[85,3,6.283185307179586]],[52,[1],[1]],[55,[1],[1],[20],[20],-63],[303,4,0,21,22]],[79,"Model",1,[3],[2,"eafW3CAQVMnIRi5zhH975A",1,0]],[208,"DEF-Head Socket",2,2,[2,"97bFYTxOdOL7ZPYDlDGVB3",3,0],[1,0.21121055500876035,2.469569303796788,0.03970563571509993],[3,0.16508034576965108,0.6078599253230407,0.15089803513336153,0.7618953820580042],[1,4.327227328887806,76.18766046802284,25.50745202584509]],[209,"PVT-Board Socket",2,2,[2,"cflXNrgvpMNoqkAVrPd+Cz",3,0],[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262],[1,-90,0.00022152757132124867,-4.853141298619868e-20]],[422,2,1,5,[0,"290Ciui5NCsagU7ZFyFt5w"],[5,6],[20],[7,0.1],[1],[1],[1],[1],[1],[1],[1],[7,99],[1],[7,1],[1],[206,[20]],[425,3,0.1,0,[7,1]],[185,[1],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[7,0.2617993877991494]],[52,[66,1,[32,[0,1],[[60,2,1],[60,2,1]]]],[1]],[455,true,false,[7,0.2],[65,1,1.8,[32,[0,1],[[116,2,0.5444444444444444,1,1],[75,2,1,0.7222222222222228,1,0.7222222222222228,1]]]],[59,1,[78,[[86,0.04241071428571429],[40,0.37053571428571425,[4,4291733519]],[40,0.6629464285714285,[4,4282656278]]],[[18,0,0.10044642857142858],[18,86,0.23660714285714282],[18,255,0.44419642857142855],[18,58,0.5870535714285715],[18,0,0.7678571428571429]]]],[20],-64],[432,0,7]],[466,false,5,[0,"5cVfCLbUxJv4HcdPGo41nu"],[1,0.2,0,0]],[295,999,5,[0,"e7JgjLfppBAoMidg9pl6c4"],[[8,null],6,0],[20],[15,3,0.2,0.5],[1],[1],[15,3,10,35],[1],[1],[85,3,6.283185307179586],[1],[15,3,0.1,1],[1],[1],[7,0.05],[57,true,[59,1,[100,[[18,255,0.5178571428571429],[18,0,1]]]]],[298,true,0,0.15,1,0.03490658503988659,[1]],[63,true,[66,1,[32,[0,1],[[116,2,1,1,1],[255,2,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-6.283185307179586,6.283185307179586]],[52,[1],[1]],[55,[1],[1],[20],[20],-65],[61,9]],[295,999,5,[0,"7dW0i+zoNJhpAaq7bX62cx"],[[10,null],6,0],[136,2,[4,4294965739],[4,2769774282]],[15,3,0.05,0.1],[1],[1],[15,3,15,40],[1],[1],[1],[1],[15,3,0.1,1],[1],[7,5],[7,0.1],[57,true,[59,1,[100,[[18,255,0.6049107142857143],[18,0,1]]]]],[298,true,0,0.15,1,0.03490658503988659,[1]],[63,true,[66,1,[32,[0,1],[[116,2,1,1,1],[255,2,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[15,3,-6.283185307179586,6.283185307179586]],[52,[1],[1]],[55,[1],[1],[20],[20],-66],[433,1,0.05,11]],[79,"VFX",1,[-67],[2,"689ZaGtCBIgquLheeybQ3A",1,0]],[347,"VFX_Wind",21,[-68],[2,"e9zjXecuhLIrTAvrlukoQv",1,0],[1,0,1.835,18.504]],[410,0,22,[0,"bax/+bkAxOKbA4HVKxE1xA"],[136,2,[4,2097151999],[4,2008002479]],[15,3,0.05,0.1],[1],[1],[15,3,50,100],[1],[1],[1],[1],[15,3,0.2,0.5],[1],[1],[7,0.3],[57,true,[59,1,[100,[[58,0],[18,255,0.18303571428571427],[18,255,0.7901785714285714],[18,0,1]]]]],[426,true,true,0.2,0,7,0.08726646259971647,[1],[1,0,1.54,0],[1,20,20,3]],[185,[65,1,5,[32,[0,1],[[47,2,0.037037037037037035,0.3439153439153439,0.3439153439153439],[60,2,0.17407407407407408]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-69],[256,1,0.06,5,1]],[348,"VFX_WindMotes",false,2,4,[-70],[2,"c0TYybwg9IjIlYWOMnNCjA",1,0]],[411,true,false,0,24,[0,"11i3dp9pJKybgjFmm5qbOY"],[[12,null],6,0],[20],[7,0.1],[15,3,0.2,1],[7,0.1],[15,3,0.4,0.8],[1],[1],[1],[1],[15,3,0.2,0.5],[1],[7,10],[1],[57,true,[59,1,[100,[[58,255],[18,255,0.43973214285714285],[18,0,1]]]]],[254,true,2,0.7,1,0,[1],[1,180,0,0]],[185,[1],[1],[1],[1]],[207,true,[1],[1],[1],[66,1,[32,[0,0.4256410256410256,0.7897435897435897,1],[[47,2,1,-0.6303030303030305,-0.6303030303030305],[47,2,0.23703703703703705,-1.2133333333333332,-1.2133333333333332],[47,2,-0.014814814814814815,0.05664488017429195,0.05664488017429195],[60,2,-0.007407407407407408]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[454,true,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-71],[304,1,0.1]],[240,"VFX_BlastLoop",2,4,[-72],[2,"96qWkAZ41MbKSNP3obhjNa",1,0]],[412,true,false,0,26,[0,"af4lR/bCpIs6FLORWMnrZc"],[[13,null],6,0],[136,2,[4,956301311],[4,2449473535]],[15,3,1.5,2.5],[1],[1],[15,3,-20,-40],[1],[1],[85,3,6.283185307179586],[1],[15,3,0.2,0.3],[1],[7,3],[1],[[98,[7,1]],[83,0.05,[7,1]]],[57,true,[59,1,[78,[[308,[4,33554431]],[40,0.31919642857142855,[4,33554431]],[40,0.8705357142857143,[4,26303797]]],[[58,255],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,0.43333333333333335,1],[[75,2,0.34444444444444444,2.283154121863799,1,2.283154121863799,1],[47,2,0.8333333333333334,0.638242894056848,0.638242894056848],[116,2,1,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[85,3,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-73],[303,4,0,14,15]],[240,"VFX_Shine",2,4,[-74],[2,"340aEnzRpBtLG/QE9oWULb",1,0]],[296,false,0,28,[0,"a73lfrCDdEQ42H2HCXGRFC"],[[16,null],6,0],[20],[15,3,0.2,0.5],[1],[1],[15,3,0.1,0.5],[1],[1],[85,3,6.283185307179586],[1],[15,3,0.1,0.6],[1],[7,10],[1],[57,true,[225,3,[78,[[189],[86,0.03794642857142857],[40,0.08928571428571429,[4,4293653290]],[40,0.9575892857142857,[4,4286200084]]],[[58,0],[18,194,0.02232142857142857],[18,188,0.09821428571428571],[18,93,0.3125],[18,0,1]]],[78,[[189],[86,0.029017857142857144],[40,0.05133928571428571,[4,4294952842]],[40,0.8370535714285714,[4,4289796891]]],[[58,0],[18,255,0.031249999999999997],[18,255,0.10044642857142855],[18,110,0.4174107142857143],[18,0,1]]]]],[254,true,2,0.3,1,0.6981317007977318,[1],[1,180,0,0]],[63,true,[66,1,[32,[0,0.2076923076923077,0.27692307692307694,1],[[47,2,0.662962962962963,0.9285714285714283,0.9285714285714283],[47,2,1,0.17195767195767267,0.17195767195767267],[60,2,0.6333333333333333],[60,2,0.6444444444444445]]]],[1],[1],[1]],[207,true,[1],[1],[1],[66,1,[32,[0,0.24871794871794872,1],[[60,2,1],[47,2,0.2740740740740741,-0.7921146953405019,-0.7921146953405019],[60,2,0.05925925925925926]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-6.283185307179586,6.283185307179586]],[52,[1],[1]],[55,[1],[1],[20],[20],-75],[61,17]],[240,"VFX_Shine-001",2,4,[-76],[2,"06gtj43T1H2axF48Q58pVd",1,0]],[296,false,0,30,[0,"0bjLxmmN1McKv063lNKQPX"],[[18,null],6,0],[20],[15,3,0.4,0.8],[1],[1],[15,3,0.1,0.5],[1],[1],[85,3,6.283185307179586],[1],[15,3,0.2,0.6],[1],[7,5],[1],[57,true,[225,3,[78,[[189],[86,0.0625],[40,0.08928571428571429,[4,4293653290]],[40,0.9575892857142857,[4,4286200084]]],[[58,0],[18,194,0.022321428571428572],[18,188,0.09821428571428571],[18,93,0.3125],[18,0,1]]],[78,[[189],[86,0.06026785714285714],[40,0.08035714285714285,[4,4294952842]],[40,0.8370535714285714,[4,4289796891]]],[[58,0],[18,255,0.03571428571428571],[18,255,0.10044642857142855],[18,110,0.4174107142857143],[18,0,1]]]]],[254,true,2,0.3,1,0.6981317007977318,[1],[1,180,0,0]],[63,true,[66,1,[32,[0,0.2076923076923077,0.27692307692307694,1],[[47,2,0.662962962962963,0.9285714285714283,0.9285714285714283],[47,2,1,0.17195767195767267,0.17195767195767267],[60,2,0.6333333333333333],[60,2,0.6444444444444445]]]],[1],[1],[1]],[207,true,[1],[1],[1],[66,1,[32,[0,0.24871794871794872,1],[[60,2,1],[47,2,0.2740740740740741,-0.7921146953405019,-0.7921146953405019],[60,2,0.05925925925925926]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-6.283185307179586,6.283185307179586]],[52,[1],[1]],[55,[1],[1],[20],[20],-77],[61,19]],[467,50,100,16,40,1,[0,"88c44oIjJGW7TRC0XbRCkC"]],[468,0.75,10,8,true,1,[0,"d2raEbF2dMtbX2Cc39AWtT"],8],[469,0,1,[0,"1698gAuy5PCKcPTlE6T4gs"],8],[470,2,1,[0,"81ypQpFBhGw6fGt0g71S1J"],13]],0,[0,-1,3,0,-2,2,0,14,3,0,28,34,0,14,3,0,28,33,0,14,3,0,28,18,0,14,4,0,28,35,0,1,1,0,67,32,0,0,1,0,0,1,0,-3,32,0,68,11,0,69,12,0,0,1,0,0,1,0,-6,33,0,-7,34,0,0,1,0,-9,35,0,-1,14,0,-2,10,0,-3,5,0,-4,21,0,-5,4,0,6,2,0,14,15,0,14,16,0,6,2,0,6,2,0,2,9,0,2,9,0,2,9,0,-1,8,0,-1,15,0,-2,16,0,39,3,0,1,2,0,2,6,0,2,6,0,2,6,0,2,6,0,2,7,0,2,7,0,2,7,0,1,3,0,-1,13,0,-1,24,0,-2,26,0,-3,28,0,-4,30,0,-1,17,0,-2,18,0,-3,19,0,-4,20,0,-1,11,0,-2,12,0,0,11,0,0,12,0,18,13,0,18,17,0,18,19,0,18,20,0,-1,22,0,-1,23,0,18,23,0,-1,25,0,18,25,0,-1,27,0,18,27,0,-1,29,0,18,29,0,-1,31,0,18,31,0,4,1,2,11,3,3,11,14,77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33],[5,5,6,6,6,-1,-2,17,-1,17,-1,17,-1,-1,7,17,-1,17,-1,17,-1,7,17,23,70],[387,99,34,34,34,388,389,211,30,27,100,78,73,212,213,168,214,169,30,27,212,213,168,101,390]],[[[12,"Content Holder_VFX Transition"],[102,"Content Holder_VFX Transition",33554432,[-4,-5],[[5,-2,[0,"9b1Ee9j29HkrWJKaI3YrUj"],[5,414,896]],[90,45,100,100,1,-3,[0,"e34yA+d21Ln6m06X1d6vPT"]]],[2,"6ffnLvn+hE7IvYzdF4f+Gk",-1,0]],[266,"Particle_TransitionIn",33554432,[[182,0.4,false,4,false,true,-6,[0,"82cmZo4FNH8rh/YCnFO3uW"],[[0,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,1,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,1]],[76,-7,[0,"8bOEAS7pJB+bqUF4MTY+dI"]],[5,-8,[0,"43OABRlrVEbLWIXvYcGPPB"],[5,100,900]],[178,16,-1088.915,-930.28,1,-9,[0,"3dcKfgC75MR5hWUEZjpQFA"]]],[2,"a02nq1nIdJYJHTA9XH3GuC",1,0],[1,-930.28,-164.343,300],[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[68,"Holder_VFX",33554432,1,[2,-12],[[5,-10,[0,"85QdACeMRKE48SaV2nXZSH"],[5,414,896]],[50,45,100,100,-11,[0,"c5mhp4j9tJO4xGdJcUiNsG"]]],[2,"79CZCK7lZPUb5oQyH7iCuh",1,0]],[46,"Particle_TransitionOut",33554432,3,[[182,0.4,false,4,false,true,-13,[0,"39S6bU4OpNT4y3YF63WmaG"],[[2,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,50,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,3]],[76,-14,[0,"8cC0SFqYBJnKpgDa4EyeVt"]],[5,-15,[0,"26km+j74JCcZiUr3o7zFSJ"],[5,100,900]],[178,16,-1088.915,-920,1,-16,[0,"50xPFRSbdFs6XsAYoBsIdH"]]],[2,"50FHS2CUpNcrfQ6K5X4ifm",1,0],[1,-920,-164.343,300],[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[26,"Events",33554432,1,[[27,-17,[0,"9b3p0k3ZxLcb7cRNqm4MPE"]],[74,15,-18,[0,"dfdCXMlxFDZL+PcPh+nUWf"],[[42,"cc.ParticleSystem","stop",2],[42,"cc.ParticleSystem","play",2]]],[74,14,-19,[0,"faSwcVBd9EErzob//P+ljC"],[[42,"cc.ParticleSystem","stop",2],[42,"cc.ParticleSystem","play",2]]]],[2,"13I72Ld0xGvLLUl4jrQEnH",1,0]]],0,[0,1,1,0,0,1,0,0,1,0,-1,3,0,-2,5,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,-2,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,4,1,2,11,3,19],[0,0,0,0],[-1,17,-1,17],[60,61,60,61]],[[[37,"SM_CandyLogs_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1540333447,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0468840599060059,-0.8803560733795166,-0.6526428461074829],"maxPosition",8,[1,1.0592732429504395,1.0218333005905151,0.9227009415626526]]],-1],0,0,[],[],[]],[[[36],[11,"SM_CandyLogs_01",[-2],[2,"b4HgqkzfdUWqFmkq1J+mto",-1,0]],[28,"SM_CandyLogs_01",1,[[25,-3,[0,"2csK3wTPNX87q5ryFBs4a3"],[0],[23],1]],[2,"63lrD4YNBVj46SNt6hP7nc",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[391,392]],[[[12,"NorthernHeights_Candy_EndFlag_01"],[11,"NorthernHeights_Candy_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[15,42]],[[{"name":"UI_WhitePanel","rect":{"x":0,"y":0,"width":8,"height":8},"offset":{"x":0,"y":0},"originalSize":{"width":8,"height":8},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[393]],[[[36],[11,"SM_Lollipop_02",[-2],[2,"b6c02cEWNdIJxIEhk4eMrG",-1,0]],[28,"SM_Lollipop_02",1,[[25,-3,[0,"56I6PL5h5cSZsU2LfXXDo8"],[0],[23],1]],[2,"c78aypnNBRYbKgHGTk8sEH",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[394,395]],[[[29,".bin",2469435794,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12288,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12288,"count":256,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21336831152439117,-0.4012185335159302,-0.35677072405815125],"maxPosition",8,[1,0.21335484087467194,2.214946746826172,5.966339588165283]]],-1],0,0,[],[],[]],[[[37,"SM_Lollipop_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_01_Tree_01"],[11,"NorthernHeights_01_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,8]],[[{"name":"Icon_Lock v2","rect":{"x":0,"y":0,"width":30,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":38},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[396]],[[[29,".bin",4254766363,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.250575304031372,-1.2505755424499512,-2.8358912467956543],"maxPosition",8,[1,1.250575304031372,1.250575065612793,5.556077003479004]]],-1],0,0,[],[],[]],[[[37,"SM_Tree_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Tree_01",[-2],[2,"4eI/yZMG9aIa/A0XCchiO0",-1,0]],[28,"SM_Tree_01",1,[[25,-3,[0,"9djWvqhtBaEo66M8KZhh9b"],[0],[23],1]],[2,"339rGqxTZYGKTcjbZcbiVi",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[397,398]],[[[12,"NorthernHeights_07_Snowman_01"],[11,"NorthernHeights_07_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,24]],[[{"name":"UI_Shop Divider","rect":{"x":1,"y":1,"width":278,"height":10},"offset":{"x":0,"y":0},"originalSize":{"width":280,"height":12},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[399]],[[{"name":"UI_WishButton_Color","rect":{"x":11,"y":7,"width":117,"height":112},"offset":{"x":-0.5,"y":5},"originalSize":{"width":140,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[400]],[[[12,"NorthernHeights_Spring_Penguim_01"],[11,"NorthernHeights_Spring_Penguim_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["2eu7fXgV1UlbM+tjBij0DI"]],[10,0,null,1,[9,"2eu7fXgV1UlbM+tjBij0DI",-4,[13,"a2l9S3bcFGDLYnv4BCAf58",1,[[6,"SM_Penguin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7aGmwe6qNQQKSexyd1lbVf"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[170,6]],[[[12,"LevelThemeEnd_01"],[88,"LevelThemeEnd_01",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"ba2SVWh6VDKKBE9qkRn9Jv",1,0],[1,2.026,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"737EmTishKH5KA/61ZtOWi"],[28],[23],29]],[2,"9bG5/C6LhLFZI40Be4sz62",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"83Ki894gRK5rIaP0JO0T1a",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"c9dNTrQ81NpL29BVS5yQRU"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,215,215,36,47,48,30,27,216,16,217,17]],[[[12,"NorthernHeights_Candy_Candy_03"],[11,"NorthernHeights_Candy_Candy_03",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["804zIBxO1fj6I7y14HgrhB"]],[10,0,null,1,[9,"804zIBxO1fj6I7y14HgrhB",-4,[13,"b5nlkJpzFCxZOiIxlTv8uk",1,[[6,"SM_Candy_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["01qqlrnSFUcqx8xSmC9bqZ"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[401,15]],[[[12,"Content Holder_Play"],[163,"Content Holder_Play",33554432,[-17,-18,-19,-20,-21],[[[5,-2,[0,"f3A0c7XJ1OmpyJFYW4hUUP"],[5,414,896]],[90,45,100,100,1,-3,[0,"bc9zvXEdxEN5CtZzt0k7L9"]],[134,false,-4,[0,"23P3LuLmdOralz/OHQIMf2"],[24],25],-5,[471,-8,[0,"9apJMiBvZAzb1Om4Mb7LCZ"],-7,-6,26],-9,[250,-14,[0,"91fg47eoVKy7XC+5bFVCmb"],-13,[-10,-11,-12]],[167,-16,[0,"e6TjRURt9OFrQZ9lfiPtnD"],-15]],4,4,4,1,4,1,4,4],[2,"e7jmo1n3pB/JI4NUOv+1pK",-1,0]],[156,"Holder_Annoucement",33554432,[-27,-28,-29,-30,-31],[[27,-22,[0,"e3AWTK0DhBz5pDZv//OhY8"]],[365,18,65,1,-23,[0,"ad4Il4fyVHL6fI5VH/NRSe"]],[283,-24,[0,"83m133U8xB4YYA+XSOdGca"],[18],19],[97,-25,[0,"af8m7x69tPua6YNuZ95Pul"]],[82,-26,[0,"a66h2fKi1JFK6Ihu6eytMH"]]],[2,"bfn70l5ORARICXzwZXA3SK",1,0],[1,0,65,0]],[68,"MidPanel",33554432,1,[2,-34,-35],[[5,-32,[0,"6eMpR4xaBNi6boa00PqbAQ"],[5,414,896]],[90,45,100,100,1,-33,[0,"98SDGO7fxFtJahX+PwauIP"]]],[2,"8325gpBVpMLZx4T7+ZJQm7",1,0]],[49,"TopPanel",33554432,1,[-38,-39,-40],[[5,-36,[0,"c34Q9lSuhOiZH5rdSTLGpw"],[5,414,100]],[124,41,100,1,-37,[0,"74LCER2j9NQYP6LDGlqDUU"]]],[2,"22JX+BJ0hIUa02aO2eg/FT",1,0],[1,0,398,0]],[156,"Panel_Color",33554432,[-43,-44,-45,-46],[[5,-41,[0,"c21bok+Z1C0IPUKPacMGGd"],[5,1000,60]],[31,0,-42,[0,"c0X+8h9IJCZbM+ygDw13Ud"],9]],[2,"788ZHSrUFJEqa5oMTkITf4",1,0],[1,0.001,-36.194,0]],[239,"Holder_Currency Total",33554432,4,[-51],[[[5,-47,[0,"93gLJFzQdGkJH3KgiGzUAY"],[5,180,90]],[281,17,10,-90,-48,[0,"c1nVsxhzxGdrfMKl2EzZtU"]],-49,[82,-50,[0,"50er5C8o1GvJxuFGV3UUX3"]]],4,4,1,4],[2,"93w02e4ihLZovHuehRPwpk",1,0],[1,-90,-5,0]],[195,"Gameplay",33554432,[[27,-52,[0,"ecR+191vJPQIz50xOoRuf8"]],[472,-53,[0,"a6j3A3OD1P2473b+wOFoXd"],1],[473,-56,[0,"a9TBclI+1O+6DM73UWlex/"],-55,-54],[474,-59,[0,"b9ReWTNzVK5L8+VwWtB5ya"],-58,-57],[475,-62,[0,"5cvYs+2eZCboZ4Xe9BtTgL"],2,-61,-60]],[2,"c6hO2rgRRGFrOAF+LrFoZX",1,0]],[69,"Panel_Color",33554432,6,[-66],[[41,-63,[0,"5dh4m3gMdB2IZQqdNOwrLv"],[5,53.04,36],[0,0,0.5]],[39,0,-64,[0,"e6oxBDroBKBZvgMvBxlM80"],[4,4288169471],2],[293,1,1,16,18,-65,[0,"417Bu7OAFKRaFyhPoc2DIC"]]],[2,"89ll/5V6xF84j0s/FtkVHD",1,0],[1,-59.605,-3.402,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[272,"Holder_Tutorial",33554432,[5],[[[27,-67,[0,"3fDCXU3JxIBIhqA6hxdQ5B"]],[248,false,-68,[0,"16lLAoJt1O6LVP/ePPRZjP"],[10,11,12]],-69],4,4,1],[2,"6aoo9GrVdG/pqwRJKiM0qs",1,0],[3,0,0,0.043619387365336,0.9990482215818578],[1,0,0,5]],[49,"TapToStart",33554432,5,[-72,-73],[[27,-70,[0,"c9mKaSY1ZC8J6MTQgCS0Se"]],[82,-71,[0,"5fO/k0M+FBZrNtmsKDIwO5"]]],[2,"05FN71sp1FEpkIQ0+ovrAF",1,0],[1,-26.176,-222,0]],[213,"Text_DistanceShadow",33554432,2,[-77],[[[41,-74,[0,"caj9o4t4FITrXIgvF8YY1y"],[5,39,75.6],[0,1,0.5]],-75,[231,false,6,-76,[0,"10LWDdCBtKoJA7cSBc+QYL"],[4,4281539080]]],4,1,4],[2,"dftrWRRi1LfKi5Jcti9Ube",1,0],[1,69.884,-41.149,0],[3,0,0,0.0785982908813432,0.9969063690590665],[1,0,0,9.016]],[213,"Text_DistanceValue",33554432,2,[-81],[[[41,-78,[0,"40w8J488tJsLtT1eAjWlKC"],[5,39,75.6],[0,1,0.5]],-79,[231,false,6,-80,[0,"fbb5vFRDBPubF4C67eZI9d"],[4,4281539080]]],4,1,4],[2,"3addok47VMdYXC1jRC3wo6",1,0],[1,67.485,-37.95,0],[3,0,0,0.0785982908813432,0.9969063690590665],[1,0,0,9.016]],[339,"Holder_Distance",false,33554432,3,[-84,-85],[[[5,-82,[0,"932ZQxXZBFDYSdpM7GeDM5"],[5,280,100]],-83],4,1],[2,"03tYBvjbhEsLhL1XUZWy6s",1,0],[1,0,174,0]],[213,"Text_DistanceValue",33554432,13,[-89],[[[41,-86,[0,"ef6oFg6U5Io5s/vr8cAj8a"],[5,168.78,87.6],[0,1,0.5]],-87,[91,6,-88,[0,"06lh3+t4dOK4I79GMRuRI7"],[4,4281539080]]],4,1,4],[2,"56U1x1UndIJ5LzRcDErHmM",1,0],[1,56.57499999999999,16.51400000000001,0],[3,0,0,0.052335956242943835,0.9986295347545739],[1,0,0,6.000000000000001]],[117,"Button_CloseTutorialAndStart",33554432,3,[[[5,-90,[0,"75mW9rXiVFhY1xgj7vF5Tx"],[5,414,896]],-91,[50,45,100,40,-92,[0,"642tOFKu9FeaZFXSC1uKJZ"]]],4,1,4],[2,"58Dfo8biRIhqWgw7z974N5",1,0]],[141,"Texture_Dots",false,33554432,4,[[5,-93,[0,"24ahp0pqNMsqFC+V+mzhDg"],[5,380,380]],[34,-94,[0,"f1M+R0VsJHDKdZIlbCqHkO"],[4,855443968],0],[244,33,-124.05199999999996,-108.40599999999998,1,-95,[0,"4eKzTVt5RISIePcTjavRPt"]]],[2,"c3qvVXp+ZOtKrMgoLK9j2G",1,0],[1,141.05199999999996,-31.594000000000023,0],[3,0,0,-0.6427876096865393,0.766044443118978],[1,0,0,-80]],[213,"Text_Currency Total",33554432,8,[-98],[[[41,-96,[0,"0eVAIDuYRKfYLi9ms4DoA/"],[5,19.04,28],[0,0,0.5]],-97],4,1],[2,"05YsritIRDbKNjXUbYhwvG",1,0],[1,16,0.839,0],[3,0,0,0.006108614390678361,0.9999813422410571],[1,0,0,0.7]],[22,"Icon_Currency",33554432,17,[[5,-99,[0,"21cWaXUm1JtotegQhNN/JL"],[5,46,46]],[31,0,-100,[0,"d1EEqIUIdARa3mP8rwD6D7"],1]],[2,"67dPcJl91B/4ZxChUaMS4l",1,0],[1,-25.658,-3.011,0]],[49,"Holder_Holder_Tutorial",33554432,4,[9],[[27,-101,[0,"71IjpgqS9MXqA+7Ky7YRXq"]]],[2,"7cXxkAcAtOjYTWjt3+juyh",1,0],[1,0,-160,0]],[22,"Edge_Top",33554432,5,[[41,-102,[0,"6aX/j93kdOGYgXerS6UBye"],[5,840,100],[0,0.5,0]],[70,-103,[0,"a8MQ1L191PqpSQQ9yDiDKK"],4],[366,1,-100,36,1,-104,[0,"2buWj0s+9JLLB/UWRtwf5g"]]],[2,"95Dw9nNu1Ls5+rp9z+LrWR",1,0],[1,0,30,0]],[46,"Edge_Bot",33554432,5,[[41,-105,[0,"9azqHswdhH2pYae3Rdlp7z"],[5,840,100],[0,0.5,1]],[70,-106,[0,"6euR5IU59FeZZQ7hs1z6Dv"],5],[367,4,-100,-200,36,1,-107,[0,"f2IEH3TgNFN76tqrQXq/Et"]]],[2,"4eQL6dVUNB7KH2Us4bqVBV",1,0],[1,0,-130,0],[3,1,0,0,6.123233995736766e-17],[1,180,0,0]],[235,"SpriteTutorial",33554432,5,[[5,-108,[0,"d5qx0ZxXBADbD3o21WOh9c"],[5,478,256]],[31,0,-109,[0,"f7O9WX+7RI+q+SJVnuIV4H"],6],[82,-110,[0,"5eWsNgUapO5Ie5iZCvIuym"]]],[2,"68iC95M5NJe7/wIE5YowpS",1,0],[1,0,3.9329999999999927,0],[1,0.75,0.75,0.75]],[22,"Text_x",33554432,11,[[5,-111,[0,"039tpkVLJN84bbE6z22kfh"],[5,35.28,75.6]],[108,"x",60,60,60,false,-112,[0,"59baOACnZDa5UlU6/ukQPk"],[4,4281539080],16],[231,false,6,-113,[0,"8ag96nQBJILY1u5brnJ6C+"],[4,4281539080]]],[2,"c0d3zrIJ1IjbT/f2OuNA6W",1,0],[1,25.39,0,0]],[22,"Text_x",33554432,12,[[5,-114,[0,"f3eA/MCL1PfJ5MfamXbwjW"],[5,35.28,75.6]],[99,"x",60,60,60,false,-115,[0,"fawbb2pZRGUaLu7Mbw/gtU"],17],[231,false,6,-116,[0,"09dgBVBf9A6ZrGNYyFC9NU"],[4,4281539080]]],[2,"43tHI8ZxJO87giU6rEqtko",1,0],[1,25.39,0,0]],[22,"Text_m",33554432,14,[[5,-117,[0,"37ERFPotBI0K6aOsRroM5B"],[5,66.96000000000001,87.6]],[99,"m",60,60,60,false,-118,[0,"91qwpI+9dLcLlBOIU/Ya5L"],21],[91,6,-119,[0,"165M2ZP7FEdpaetAFfsOSh"],[4,4281539080]]],[2,"a2bNI1OipPqIvPqJbsjSwy",1,0],[1,25.39,0,0]],[195,"CloseTutorialAndStart",33554432,[[27,-120,[0,"31uYvmqAhMK4nYu5fGOohW"]],[476,-123,[0,"b8VPBapaFEa5UVM6dfnEFd"],-122,19,-121,23]],[2,"2asq9rK+RKsbSnlT+4vwZc",1,0]],[68,"Scripts",33554432,1,[7,26],[[5,-124,[0,"d8ZJUmW4tNi65l/W0gGQKN"],[5,0,0]]],[2,"e1dKMusrJFgIhk5M1FI1La",1,0]],[22,"BotPanel",33554432,1,[[5,-125,[0,"ddma0QKShEyZfPT8vGSLZq"],[5,414,100]],[124,44,100,1,-126,[0,"4bwjQgA+RA/o85MXSR26gU"]]],[2,"2fr97tx2RKNr5uZS+s8bwT",1,0],[1,0,-398,0]],[22,"Text_TapToStartShadow",33554432,10,[[5,-127,[0,"cccopPBNBEz4U4X+THlr3Y"],[5,191.22,75.6]],[108,"Tap to start!",30,30,60,false,-128,[0,"27CjoL9G9MlZZC00mf6jca"],[4,4294893341],7]],[2,"b9MnQAFRFDbLKKLKIdsSml",1,0],[1,-2.912,-1.598,0]],[22,"Text_TapToStart",33554432,10,[[5,-129,[0,"44TZoXOu5KnJY9hr/3TacA"],[5,191.22,75.6]],[108,"Tap to start!",30,30,60,false,-130,[0,"b8pp+zrnVJbK9PFUhSivUy"],[4,4281539080],8]],[2,"54jWFig4FLv4Pp6WdWia/x",1,0],[1,-4.252,0,0]],[22,"Smooth_Outline 1",33554432,2,[[5,-131,[0,"a4NYBShM1G66IUhr3/WIAw"],[5,206,58]],[70,-132,[0,"27lCz0XY9Hp4IcwVqWXtic"],13]],[2,"2dUmdani9JSLnpb9mXBRbJ",1,0],[1,-2.801,2.614,0]],[22,"Smooth_Outline 2",33554432,2,[[5,-133,[0,"9d2r8bH3JNQoODtgHRFUnb"],[5,206,58]],[70,-134,[0,"3eoGP6rRZLML10UUVfelcN"],14]],[2,"00JwcZCbVGvaGkvfNkedsi",1,0],[1,2.29,-2.127,0]],[26,"Smooth_Color",33554432,2,[[5,-135,[0,"69Nqg/xvVHxYDi9SlVJJId"],[5,206,56]],[34,-136,[0,"f7+2HnXZtKQbKKukJRs2PM"],[4,4281539080],15]],[2,"b72UEcFzRPMZVgQDfHtXyB",1,0]],[22,"Panel_Distance",33554432,13,[[41,-137,[0,"86/JAQRi9GWp2rwJ5Y89m4"],[5,264,104],[0,0,0.5]],[389,3,1,-138,[0,"53WCpovkFLdpzClZ3clITr"],[4,4281539080],20]],[2,"89ZAan9WVP+IO6I1ZLBXcI",1,0],[1,-130.688,0,0]],[26,"Events",33554432,1,[[27,-139,[0,"d9pxusxPFIgLRaCEHhncWz"]],[407,0.2,5,-140,[0,"84a4uDuENEfJ0+AEA2JprL"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",1]]]],[2,"5aF8Lo6atM7rrkjdqlxepP",1,0]],[436,"0",0,28,28,28,false,false,2,17,[0,"6c8DG/Ym1EGooF6Cpisoys"]],[166,6,[0,"60tcWHv3JJloeifZMOBkuf"],[3]],[97,9,[0,"37CJscbV9N27ysSy+32ToO"]],[205,"2",2,60,60,60,false,11,[0,"b0T8LUsYVJs79JsTMrTDJQ"],[4,4281539080]],[259,"2",2,60,60,60,false,12,[0,"1bi40G4HhFub779E5uSYYf"]],[259,"6990",2,60,60,60,false,14,[0,"a1cwd9unVLO75LdjH09DiE"]],[200,true,13,[0,"5dj4aQbmZHP5gsOTL5m7J1"],[22]],[394,2,15,[0,"d5+Odh5clFFbMkMdTwoQ4I"],[[42,"3f2963/PeNLNYYbHUDhEOzN","onClick",26]],[4,4292269782],15],[97,1,[0,"03xUB19rhGL7bLT3SBHwKf"]],[82,1,[0,"1aEV73kUdB56GDrNU7LncQ"]]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-4,44,0,71,3,0,72,18,0,0,1,0,-6,45,0,-1,4,0,-2,3,0,-3,28,0,36,45,0,0,1,0,30,44,0,0,1,0,-1,4,0,-2,3,0,-3,28,0,-4,35,0,-5,27,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,31,0,-2,32,0,-3,33,0,-4,11,0,-5,12,0,0,3,0,0,3,0,-2,13,0,-3,15,0,0,4,0,0,4,0,-1,16,0,-2,6,0,-3,19,0,0,5,0,0,5,0,-1,20,0,-2,21,0,-3,22,0,-4,10,0,0,6,0,0,6,0,-3,37,0,0,6,0,-1,8,0,0,7,0,0,7,0,48,42,0,35,41,0,0,7,0,48,37,0,35,36,0,0,7,0,73,39,0,74,40,0,0,7,0,0,8,0,0,8,0,0,8,0,-1,17,0,0,9,0,0,9,0,-3,38,0,0,10,0,0,10,0,-1,29,0,-2,30,0,0,11,0,-2,39,0,0,11,0,-1,23,0,0,12,0,-2,40,0,0,12,0,-1,24,0,0,13,0,-2,42,0,-1,34,0,-2,14,0,0,14,0,-2,41,0,0,14,0,-1,25,0,0,15,0,-2,43,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,-2,36,0,-1,18,0,0,18,0,0,18,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,75,38,0,76,43,0,0,26,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,4,1,2,11,3,5,11,9,7,11,27,9,11,19,26,11,27,140],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,37,38,39,40,41,42,43,43,43,43,44],[3,3,3,-1,3,3,3,12,12,3,-1,-2,-3,3,3,3,12,12,-1,19,3,12,-1,49,-1,19,47,12,19,23,12,12,12,19,22,50,51,52,23],[102,218,219,220,84,191,402,40,40,21,171,221,222,223,223,403,0,0,224,224,172,0,225,171,173,173,226,0,220,404,0,0,0,225,80,80,227,228,405]],[[[12,"AudioData"],[173,"AudioData",[[477,-2,[0,"80QiFRU35OrLbTPhv6RFyP"],[[191,"ambience_1",null,0.7,1,[0]],[191,"music_gameplay",null,0.45,1,[1]],[191,"music_menu",null,0.45,1,[2]],[191,"sfx_player_air_loop",null,0.7,1,[3]],[112,"sfx_player_collect_coin",null,0.7,[4,5,6]],[112,"sfx_player_crash",null,0.7,[7]],[112,"sfx_player_final_jump",null,0.7,[8]],[112,"sfx_player_landing",null,0.7,[9,10,11]],[191,"sfx_player_slide_loop",null,0.7,1,[12]],[112,"sfx_player_smooth",null,0.7,[13,14,15]],[112,"sfx_player_stunt",null,0.7,[16]],[112,"sfx_ui_char_level_up",null,0.7,[17]],[191,"sfx_ui_final_meter_growing_loop",null,0.7,1,[18]],[112,"sfx_ui_final_meter_landing",null,0.7,[19]],[112,"sfx_ui_final_meter_new_record_landing",null,0.7,[20]],[112,"sfx_ui_generic_tap",null,0.7,[21,22,23]],[112,"sfx_ui_prize_level_up",null,0.7,[24]],[112,"sfx_ui_speed_level_up",null,0.7,[25]],[112,"sfx_ui_xp_growing",null,0.7,[26]],[112,"sfx_gacha_open",null,0.7,[27]]]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,-1,-1,-1,-2,-3,-1,-1,-1,-2,-3,-1,-1,-2,-3,-1,-1,-1,-1,-1,-1,-2,-3,-1,-1,-1,-1],[406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433]],[[[12,"LevelTheme_Spring"],[88,"LevelTheme_Spring",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],57,58],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],59]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-23,-24,-25],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-26],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-27],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-28],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-29,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-30,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-31,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-32,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[6,7,8]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-33,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[9,10,11]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-34,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,100,10,true,-35,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,45,0],[1,0,30,0],[1,0,3,23],[1,0,0,25],[15,16,17]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,100,10,true,-36,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,-45,0],[1,0,-30,0],[1,0,3,-25],[1,0,0,23],[18,19,20]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-37,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[21,22,23,24]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-38,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[25,26,27,28]]],[2,"00YmllBslEkIKTHU7APzih",1,0]],[17,"LeftGrass_1",1,[[19,20,5,1.5,0.25,true,-39,[0,"7fEjMqXH5BJbtaZgNO4fMq"],[1,0,0,-10],[1,0,0,10],[1,0,0.75,10],[1,0,0.25,20],[29,30,31,32,33,34,35]]],[2,"7bsw9ocZhABq4x9XszHPj0",1,0]],[17,"LeftGrass_2",1,[[19,20,5,1.5,0.25,true,-40,[0,"13ZN3h3exMSoFb+vhy5Y3K"],[1,0,0,-10],[1,0,0,10],[1,0,3,30],[1,0,0.25,25],[36,37,38,39,40,41,42]]],[2,"4bCuGOpXBPqqVUF0AfgVs7",1,0]],[17,"RightGrass_1",1,[[19,20,5,1.5,0.25,true,-41,[0,"d1rPOifRZJOYngk6UVyHdM"],[1,0,0,-10],[1,0,0,10],[1,0,0.75,-10],[1,0,0.25,20],[43,44,45,46,47,48,49]]],[2,"cdN0zoAedK5I8p4rE2iR08",1,0]],[17,"RightGrass_2",1,[[19,20,5,1.5,0.25,true,-42,[0,"e3OxSHLQlEoIPs+jaETtxr"],[1,0,0,-10],[1,0,0,10],[1,0,3,-35],[1,0,0.25,20],[50,51,52,53,54,55,56]]],[2,"3dLceUSGpP8YMGMQO0v+tP",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-12,19,0,-13,20,0,-14,21,0,-15,22,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,4,1,42],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-5,-6,-7,-1,-2,-3,-4,-5,-6,-7,-1,-2,-3,-4,-5,-6,-7,-1,-2,-3,-4,-5,-6,-7,20,7,29],[6,16,49,103,104,105,103,104,105,103,104,105,103,104,105,106,229,106,106,229,106,230,231,232,233,230,231,232,233,107,108,109,110,111,112,113,107,108,109,110,111,112,113,107,108,109,110,111,112,113,107,108,109,110,111,112,113,234,17,235]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[236,25]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainColor",8,[4,4293649625]]],11]]],0,0,[0],[8],[23]],[[[12,"NorthernHeights_Spring_Snowman_02"],[11,"NorthernHeights_Spring_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["55/l/hAQdaL6zztwUFIpLJ"]],[10,0,null,1,[9,"55/l/hAQdaL6zztwUFIpLJ",-4,[13,"afWRiogrJCkp+lKsqieuUi",1,[[6,"SM_SnowmanSpring_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9ceYOy54pdcpqKUAA9B+gE"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[434,6]],[[[12,"LevelTheme_01"],[88,"LevelTheme_01",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],31,32],[94,-7,[0,"abcMAbwSJCr62ZBZ2r+Ojo"],33]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[28,29,30]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[216,16,49,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,31,32,33,217,17,36]],[[{"name":"Icon_Snowboard","rect":{"x":5,"y":4,"width":70,"height":72},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[435]],[[[12,"NorthernHeights_Christmas_Tree_02"],[11,"NorthernHeights_Christmas_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["0aET2r7h9UpJXfdvFoP71m"]],[10,0,null,1,[9,"0aET2r7h9UpJXfdvFoP71m",-4,[13,"d7aZ4MxLdDl7kjFf8HT5vr",1,[[6,"SM_ChristmasTree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["3aJ6rKJiFSgIPbkXAwg1Vg"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[436,29]],[[[12,"NorthernHeights_01_EndFlag_01"],[11,"NorthernHeights_01_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[8,42]],[[[29,".bin",2734907974,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":135120,"length":15408,"count":3852,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":135120,"count":2815,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.8715646266937256,-4.282245635986328,-0.5662473440170288],"maxPosition",8,[1,3.6509053707122803,4.211568832397461,8.01072883605957]]],-1],0,0,[],[],[]],[[[37,"SM_CabinAutumn_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_CabinAutumn_02",[-2],[2,"56tsrdmgpWR60nmKDsdNJO",-1,0]],[28,"SM_CabinAutumn_02",1,[[25,-3,[0,"73qhPTQGhdz4oHW/dNQ/Qi"],[0],[23],1]],[2,"00Zog+PflU/7gt80PSDeIA",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[437,438]],[[[71,"sfx_player_slide_landing_1",".mp3",1.306122],-1],0,0,[],[],[]],[[[119,[[187,"Base Layer",[89,[-34,-35,-36,-37,-38,-39,-40,-41,-42,-43],[[92,-5,-4],[120,0,-7,-6,[[72,1,[44,"locked"]],[84,[44,"equipped"]]]],[120,0,-9,-8,[[72,1,[44,"locked"]],[72,1,[44,"equipped"]]]],[48,0,false,-11,-10,[[72,1,[44,"equipped"]]]],[48,0,false,-13,-12,[[84,[44,"equipped"]]]],[120,0,-15,-14,[[84,[44,"locked"]]]],[48,0,false,-17,-16,[[72,1,[44,"locked"]]]],[48,0,false,-19,-18,[[84,[44,"selected"]]]],[48,0,false,-21,-20,[[72,1,[44,"selected"]]]],[48,0,false,-23,-22,[[84,[44,"selected"]]]],[48,0,false,-25,-24,[[72,1,[44,"selected"]]]],[48,0,false,-27,-26,[[84,[44,"selected"]]]],[48,0,false,-29,-28,[[72,1,[44,"selected"]]]],[48,0,false,-31,-30,[[72,1,[44,"locked"]]]],[48,0,false,-33,-32,[[84,[44,"equipped"]]]]],-3,-2,-1]],[449,"Status Layer",0,[89,[-53,-54,-55,-56,-57],[[92,-48,-47],[48,0,false,-50,-49,[[72,1,[44,"inScene"]]]],[48,0,false,-52,-51,[[84,[44,"inScene"]]]]],-46,-45,-44]],[187,"Gacha Layer",[89,[-67,-68,-69,-70,-71],[[92,-62,-61],[120,0,-64,-63,[[67,"gachaRoll"]]],[192,0,-66,-65]],-60,-59,-58]]],[{},"locked",4,[121,1,false],"equipped",4,[121,1,false],"inScene",4,[121,1,true],"gachaRoll",4,[77,2],"selected",4,[121,1,false]]],[43,"StoreItem_Equipped",[35,0]],[43,"StoreItem_Unlocked",[35,2]],[137,"Empty"],[43,"StoreItem_Locked",[35,1]],[43,"StoreItem_UnlockedSelected",[35,5]],[43,"StoreItem_EquippedSelected",[35,3]],[43,"StoreItem_LockedSelected",[35,4]],[43,"StoreItem_Intro",[35,6]],[137,"Empty"],[33,"Entry"],[33,"Entry"],[43,"StoreItem_Exit",[35,7]],[33,"Entry"],[43,"StoreItem_GachaRoll",[35,8]],[33,"Exit"],[33,"Any"],[33,"Exit"],[33,"Any"],[33,"Exit"],[33,"Any"]],0,[0,24,16,0,25,15,0,26,10,0,10,3,0,9,10,0,10,1,0,9,3,0,10,2,0,9,3,0,10,2,0,9,1,0,10,1,0,9,2,0,10,4,0,9,3,0,10,3,0,9,4,0,10,6,0,9,1,0,10,1,0,9,6,0,10,5,0,9,2,0,10,2,0,9,5,0,10,7,0,9,4,0,10,4,0,9,7,0,10,5,0,9,7,0,10,6,0,9,5,0,-1,10,0,-2,15,0,-3,16,0,-4,1,0,-5,4,0,-6,2,0,-7,3,0,-8,6,0,-9,7,0,-10,5,0,24,18,0,25,17,0,26,11,0,10,8,0,9,11,0,10,12,0,9,8,0,10,8,0,9,12,0,-1,11,0,-2,17,0,-3,18,0,-4,8,0,-5,12,0,24,20,0,25,19,0,26,13,0,10,9,0,9,13,0,10,14,0,9,9,0,10,9,0,9,14,0,-1,13,0,-2,19,0,-3,20,0,-4,9,0,-5,14,71],[0,0,0,0,0,0,0,0,0],[15,15,15,15,15,15,15,15,15],[154,155,156,162,161,160,157,158,159]],[[[29,".bin",3810789542,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0468840599060059,-0.8803560733795166,-0.6526428461074829],"maxPosition",8,[1,1.0592732429504395,1.0218333005905151,0.9227009415626526]]],-1],0,0,[],[],[]],[[[37,"SM_Logs_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Logs_01",[-2],[2,"6dgP8j2aRZD5EHMUZgqMY7",-1,0]],[28,"SM_Logs_01",1,[[25,-3,[0,"3bUZwrIC1bKL4D1OgSOiqw"],[0],[23],1]],[2,"41A35Z4V5TGpjQQJoz+ONX",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[439,440]],[[[119,[[129,[89,[-12,-13,-14,-15,-16,-17],[[120,0,-5,-4,[[67,"fadeIn"]]],[48,0,false,-7,-6,[[67,"fadeOut"]]],[48,0,false,-9,-8,[[67,"fadeIn"]]],[92,-11,-10]],-3,-2,-1]]],[{},"fadeIn",4,[77,2],"fadeOut",4,[77,2]]],[43,"Background_FadeIn",[35,0]],[33,"Entry"],[43,"Background_FadeOut",[35,1]],[137,"Empty"],[33,"Exit"],[33,"Any"]],0,[0,24,6,0,25,5,0,26,2,0,10,1,0,9,4,0,10,3,0,9,1,0,10,1,0,9,3,0,10,4,0,9,2,0,-1,2,0,-2,5,0,-3,6,0,-4,1,0,-5,3,0,-6,4,17],[0,0],[15,15],[237,238]],[[[36],[11,"SM_Cabin_01",[-2],[2,"cd0zRxMplV+rCfMtT5BGEi",-1,0]],[28,"SM_Cabin_01",1,[[25,-3,[0,"b9Yg+wvW5UlYWCDPMedtCL"],[0],[23],1]],[2,"72X+LKaeZYWZ4pYGHdRj6B",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[441,442]],[[[37,"SM_Cabin_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1660474990,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":2928,"count":732,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.793076515197754,-3.709552049636841,-0.5],"maxPosition",8,[1,2.772963047027588,3.812917470932007,5.570366382598877]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Autumn_Cabin_02"],[11,"NorthernHeights_Autumn_Cabin_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["56tsrdmgpWR60nmKDsdNJO"]],[10,0,null,1,[9,"56tsrdmgpWR60nmKDsdNJO",-4,[13,"d3aiQhR7pFNZc/yXeuTR/V",1,[[6,"SM_CabinAutumn_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["73qhPTQGhdz4oHW/dNQ/Qi"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[443,18]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[165,165,37]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[114,23]],[[[37,"SM_SnowmanSpring_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_SnowmanSpring_03",[-2],[2,"fdtTQJ29dV9rRj2w7jmDnV",-1,0]],[28,"SM_SnowmanSpring_03",1,[[25,-3,[0,"314zUsDhRVAbDIw4DMD60F"],[0],[23],1]],[2,"cfDuZf1JlXg63jbBiajcxL",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[444,445]],[[[29,".bin",4172201257,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38304,"length":5232,"count":1308,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38304,"count":798,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.9460548162460327,-0.8690799474716187,-0.24402347207069397],"maxPosition",8,[1,1.073415756225586,1.2823227643966675,2.0623979568481445]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_05_Snowman_02"],[11,"NorthernHeights_05_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"e3UDMMVg9FV4YDdSFpCTv/",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,26]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[168,25]],[[{"name":"Icon_Jacket","rect":{"x":0,"y":9,"width":80,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[446]],[[[29,".bin",1134922778,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46704,"length":6312,"count":1578,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46704,"count":973,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.8715646266937256,-4.282245635986328,-0.5662473440170288],"maxPosition",8,[1,3.6509053707122803,4.211568832397461,8.01072883605957]]],-1],0,0,[],[],[]],[[[36],[11,"SM_Cabin_02",[-2],[2,"dbUd/SI9hUnqHCpdADe+yO",-1,0]],[28,"SM_Cabin_02",1,[[25,-3,[0,"7cRIW03WRaOoemTdaVOGDq"],[0],[23],1]],[2,"137oTbqMZWD6DPcZq6LKGw",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[447,448]],[[[37,"SM_Cabin_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"Level5"],[173,"Level5",[[232,8,0.25,-10,20,-2,[0,"b1Wc0B9G5Lyr0Zq6Qyan1F"],[73,15,30],[73,35,60],[169,5],[73,20,20],[73,10,35],[169,10],[73,35,45],[73,8,10],[233]]],[2,"30ri/pS/pO+ZMkTG+GtXvT",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[],[],[]],[[{"name":"UI_Button_Store Color","rect":{"x":0,"y":0,"width":92,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[449]],[[[29,".bin",3857121235,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7968,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7968,"count":166,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25567540526390076,-0.009081652387976646,0],"maxPosition",8,[1,0.25904056429862976,0.6243953108787537,0]]],-1],0,0,[],[],[]],[[[119,[[129,[89,[-12,-13,-14,-15,-16,-17],[[92,-5,-4],[48,0,false,-7,-6,[[67,"clickPlay"]]],[311,0,true,false,-9,-8,[[67,"clickStore"]]],[311,0,true,false,-11,-10,[[67,"clickBack"]]]],-3,-2,-1]]],[{},"intro",4,[77,2],"clickPlay",4,[77,2],"clickStore",4,[77,2],"clickBack",4,[77,2]]],[43,"Menu_Intro",[35,0]],[33,"Entry"],[43,"Menu_ToStore",[35,2]],[33,"Exit"],[33,"Any"],[43,"Menu_ToGameplay",[35,1]]],0,[0,24,5,0,25,4,0,26,2,0,10,1,0,9,2,0,10,6,0,9,1,0,10,3,0,9,1,0,10,1,0,9,3,0,-1,2,0,-2,4,0,-3,5,0,-4,1,0,-5,6,0,-6,3,17],[0,0,0],[15,15,15],[239,174,175]],[[[12,"NorthernHeights_Candy_Logs_01"],[11,"NorthernHeights_Candy_Logs_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["b4HgqkzfdUWqFmkq1J+mto"]],[10,0,null,1,[9,"b4HgqkzfdUWqFmkq1J+mto",-4,[13,"7cPP63ELhEo6YeLSOAxXIb",1,[[6,"SM_CandyLogs_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["2csK3wTPNX87q5ryFBs4a3"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[79,15]],[[[12,"NorthernHeights_Christmas_Snowman_02"],[11,"NorthernHeights_Christmas_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"b2YmRoDQVB1opd/Tjk59lJ",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,29]],[[[12,"SM_Number_5"],[140,"SM_Number_5",[-2],[2,"4erKDcjMxTjIlkAA1Ye7pb",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_5",1,[[25,-3,[0,"99F0ka4ehU9aSzwuUbimVr"],[0],[23],1]],[2,"61oPP+05VU7IBj1JKctRwP",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,450]],[[[56,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[240,23]],[[{"name":"Icon_Hat","rect":{"x":5,"y":7,"width":70,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[451]],[[[71,"sfx_player_collect_coin_3",".mp3",0.287347],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Autumn_Snowman_02"],[11,"NorthernHeights_Autumn_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["a4HFpX9wNTtrN63nLs18E9"]],[10,0,null,1,[9,"a4HFpX9wNTtrN63nLs18E9",-4,[13,"e3Du+ay55BU611pG1TXosJ",1,[[6,"SM_SnowmanAutumn_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["2fu/KOjxdYH7ZgTB/ixBPo"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[452,18]],[[[12,"Content Holder_Menu"],[163,"Content Holder_Menu",33554432,[-16,-17,-18,-19,-20,-21,-22,-23],[[[5,-2,[0,"74x1OYuPNBgqu2bMU0ZeU3"],[5,414,896]],[90,45,100,100,1,-3,[0,"93elQ8Y01D8LUs7S8hGlsC"]],[134,false,-4,[0,"3b+hWjVvRFprhjcpVbNbcy"],[77,78,79,80],81],-5,[249,-9,[0,"3fweDaQBJKtLHA5P3B5BPz"],[[145,"stopWind",[[383,"cc.ParticleSystem","stop"]]],[145,"activeStoreCanvas",[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-6],[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-7]]],[145,"playWindTransition",[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-8]]]]],[284,true,-11,[0,"d8+eBFCQ5GE6I6EjrCW6Gn"],-10],[313,-13,[0,"3aYXixmxZCoqDnRfpOl5GY"],-12],-14,-15],4,4,4,1,4,4,4,1,1],[2,"76Pz2epqhCxYoXCgxstZTt",-1,0]],[132,"Panel_Speed",33554432,[-28,-29,-30,-31,-32,-33,-34],[[[41,-24,[0,"a1tt3SlR1MbJPj7mpXKWa9"],[5,192,64],[0,0,0]],[34,-25,[0,"2bNh2EB9lLBqY2/+xX3xU1"],[4,4281539080],34],[82,-26,[0,"c4zz/P6PBCjo6OsdogGdar"]],-27],4,4,4,1],[2,"04FAwZYjZLdqYPFowSCKM3",1,0],[1,-112,-3,0]],[132,"Panel_Prize",33554432,[-39,-40,-41,-42,-43,-44,-45],[[[41,-35,[0,"6ftf1E8GdHF7ZK9He2bfNS"],[5,192,64],[0,0,0]],[34,-36,[0,"0eYhtFVWtENpclEcKMIZXn"],[4,4281539080],59],[82,-37,[0,"fezd4/b+xLAbp7vdBQWy1M"]],-38],4,4,4,1],[2,"e6E+n9MV9P3oegGl75ViZ8",1,0],[1,-80,-86,0]],[156,"Button_Play",33554432,[-56,-57,-58],[[5,-46,[0,"72Y0yVzMRECYlHVd51E2jw"],[5,156,152]],[70,-47,[0,"15gEi7TxhIjL541Kus6Tal"],72],[110,3,0.9,-52,[0,"6dJRIaO09PL4vKzxKB9o7F"],[[42,"d97b7uthpROcqUQ04yZ+xyO","startGame",-49],[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickPlay",1],[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-50],[42,"cc.ParticleSystem","stop",-51]],-48,73],[480,-53,[0,"27xEj8pTxOoZZ5ptv3eqAj"]],[82,-54,[0,"a9RtkqLjZAbZinAX1lXeIv"]],[104,5,-55,[0,"8baNfPEotJPLq1qEkRekjI"]]],[2,"5fkmgS6DROO5q9byepgL14",1,0],[1,90.703,217.386,0]],[157,"Button_MAX",false,33554432,2,[-62,-63,-64,-65],[[5,-59,[0,"87xHhpnHVNLLTwIvW+g6jt"],[5,80,80]],[222,3,0.9,-60,[0,"48woXtF29EJqQri6tqWtgS"]],[181,"sfx_ui_speed_level_up",null,-61,[0,"54gIydIS5JDZ0H3R80HiZk"]]],[2,"e3fe4bDk1MwZQ91Dg0eGGL",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[175,"Button_Ad",false,33554432,2,[-70,-71,-72,-73],[[[5,-66,[0,"10OrNw9VZM4aU+TdwEclu/"],[5,80,80]],-67,[127,"sfx_ui_prize_level_up",-68,[0,"24u7bJ1bpPH43PeTYFGsMi"]],[118,true,-69,[0,"eewbaj5BtC5aZwWQA1Kyw8"],[32],33]],4,1,4,4],[2,"97cXX4T1JMKbWzxoBUpzV+",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[157,"Button_MAX",false,33554432,3,[-77,-78,-79,-80],[[5,-74,[0,"8d7waIVWdNq4CYl9ClUTn6"],[5,80,80]],[222,3,0.9,-75,[0,"859PXY9zhDioxPXHWFLlS9"]],[181,"sfx_ui_speed_level_up",null,-76,[0,"b7dbyI4hxN248sgWuZkQgV"]]],[2,"f3gTmQaNlC2Z+tPdqXl97d",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[175,"Button_Ad",false,33554432,3,[-85,-86,-87,-88],[[[5,-81,[0,"b6TmHLUwxP4JDCcSbyjCXq"],[5,80,80]],-82,[127,"sfx_ui_prize_level_up",-83,[0,"fdZaqI9HtKmZJu9gza0Zwk"]],[118,true,-84,[0,"57uImdDPpLBp1exCltNlmH"],[57],58]],4,1,4,4],[2,"3f9yBfpFBD/J8TZ72N5jW6",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[156,"Button_SkinShop",33554432,[-94,-95,-96],[[5,-89,[0,"12QR6CyrhAjIO4h2Vmn5Mz"],[5,108,96]],[31,0,-90,[0,"5c8DXF7XZHPJ2HxF/vaGHj"],67],[110,3,0.9,-92,[0,"9bo+ptNeBB6KMz2/saSCG1"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStore",1]],-91,68],[104,1,-93,[0,"b58RTrKLVFxodcIFxSc2Wz"]]],[2,"214nqzELpONrXdMv0YVIAJ",1,0],[1,122,18,0]],[102,"Holder_Snow Panel",33554432,[-99,-100,-101,9,4],[[5,-97,[0,"72cBvtmm1PwZ943MDcvvHB"],[5,414,100]],[124,44,100,1,-98,[0,"0eK0Zvpn9AcbthR1XEMo08"]]],[2,"29BnRHCtlJMpUutXCZk79Y",1,0]],[156,"Holder_Player Level",33554432,[-105,-106,-107],[[41,-102,[0,"56GEvsR1VPCoyNCFReS7Wo"],[5,200,100],[0,0,0.5]],[245,17,-108,1,-103,[0,"da4t+MZc9B6I540kL/ihqZ"]],[82,-104,[0,"d4fwCLNdhNkYjy0GFj8HvI"]]],[2,"3eZd7/UD5PQKB32tZCQF3D",1,0],[1,-208,0,0]],[214,"Button_Upgrade",33554432,2,[-111,-112,-113],[[[5,-108,[0,"dbLuhLIvtLIbkojoQ4jFNo"],[5,80,80]],-109,[127,"sfx_ui_speed_level_up",-110,[0,"0cDoSHsidHp7TJQeFUhdWc"]]],4,1,4],[2,"68vlRAnSJN2pe9e2LBGvKP",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[157,"Button_NotEnough Money",false,33554432,2,[-118,-119],[[5,-114,[0,"4evZwV/DJBO7o8JjDf/CKd"],[5,80,80]],[223,false,3,0.9,-116,[0,"49uNOoHAtKxJwhk9ws425U"],-115],[127,"sfx_ui_speed_level_up",-117,[0,"2dkX1AaRZEvYfJYbHLY4Lt"]]],[2,"79jzMXpw5Jn6EF7pU9aogB",1,0],[1,163.94299999999998,53.692000000000036,0],[1,0.92,0.92,1]],[214,"Button_Upgrade",33554432,3,[-123,-124,-125],[[[5,-120,[0,"25qeBrLMBFN7/i6eWV4Eur"],[5,80,80]],-121,[181,"sfx_ui_prize_level_up",null,-122,[0,"f0JvEYTx1K/LultgSBWhhX"]]],4,1,4],[2,"16EPQNbg1Ii5rGzE/W7weI",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[157,"Button_NotEnough Money",false,33554432,3,[-130,-131],[[5,-126,[0,"41CX5uDSJJXKudXMsjontS"],[5,80,80]],[223,false,3,0.9,-128,[0,"259aYLuapODZZ3LWyZO5Bg"],-127],[127,"sfx_ui_speed_level_up",-129,[0,"af2ipvl7xPAqiWuAUAPqDn"]]],[2,"a2vvqmA8VAfbXLHp47LWMZ",1,0],[1,163.94299999999998,53.692000000000036,0],[1,0.92,0.92,1]],[46,"Particle_Wind Lateral",33554432,1,[[413,true,1,2,true,-132,[0,"98TX0tv05Lk5HAj9f62WH/"],[[0,null],6,0],[136,2,[4,4292203725],[4,4294951313]],[107,6,20],[7,2],[7,1],[15,3,200,600],[1],[1],[7,0.19198621771937624],[1],[7,5],[1],[7,2],[1],[[98,[7,4]]],[57,true,[59,1,[100,[[58,255],[18,255,0.375]]]]],[168,true,true,2,5,0,40,0,[7,1],[1,50,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[64,2,-3.8518518518518534,-3.8518518518518534]]]],[65,1,5,[32,[0,1],[[64,2,2.6825396825396823,2.6825396825396823],[64,2,-4.766666666666664,-4.766666666666664]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,1]],[76,-133,[0,"a2CDksE1pMmo/wPEd0LVmu"]],[5,-134,[0,"0aWOwoLJJNEZMMs6LEmbQC"],[5,100,900]],[221,8,-840.818,1,-135,[0,"a6RL3GdkxPEpsjD0g03mh6"]]],[2,"51aPH29eJLdaHZyp5aK3uX",1,0],[1,-997.818,-232.954,0],[3,0.06777318155497801,-0.703851401832742,0.067773181554978,0.7038514018327421],[1,11,-90,0]],[263,"Level_Outline",33554432,11,[-138,-139,-140],[[5,-136,[0,"d3A9Tx9sxF37QSqqmJUmkL"],[5,64,64]],[125,0,false,-137,[0,"8ax9+VpXlDgoymRmGz1j88"],[4,4281539080],6]],[2,"a6w+2UhzVJXp1mVgPxZFnF",1,0],[1,49.98,-23.997,0],[1,0.8,0.8,1]],[156,"Holder_Logo",33554432,[-144,-145],[[5,-141,[0,"dcrYJ0o1pG55m/2GffBKqz"],[5,340,140]],[246,17,89.454,1,-142,[0,"7cPdvCWqBMvoKZDTEEhVJN"]],[82,-143,[0,"4cWJ1OU/5L3JfiXwwBKrwb"]]],[2,"5b0kHMv2dF1o6ji9RFFepN",1,0],[1,0,-109.454,0]],[69,"Holder_UpgradeCost",33554432,2,[-148,-149],[[5,-146,[0,"84WNS0OClPb55RN0ONTnbQ"],[5,40.69,20]],[105,1,1,1,-147,[0,"a7CXy71b1Jv66UDrJDDhwF"]]],[2,"81VkhlwC9LiapzOzHj12NZ",1,0],[1,157.321,91.62900000000002,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[69,"Holder_UpgradeCost",33554432,3,[-152,-153],[[5,-150,[0,"02WFqCJIlKdZWzqjtWoaXZ"],[5,40.69,20]],[105,1,1,1,-151,[0,"63qY8S4KhCDo26xQQ/5bA9"]]],[2,"f9Bg/7voRDXLm6pKi8tOlb",1,0],[1,157.594,90.953,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[49,"TopPanel",33554432,1,[11,18],[[5,-154,[0,"03X3eS0jxHXKAhNBty0Elu"],[5,414,100]],[124,41,100,1,-155,[0,"09jVJw0HtFLJwk+Rk8PBbq"]]],[2,"3cF0/J2qRNRaSjkP4S9aIN",1,0],[1,0,398,0]],[49,"Holder_Stats Info",33554432,10,[2,3],[[5,-156,[0,"4a0WXTywREpJhVuFc/MkV9"],[5,260,200]],[245,20,-76.322,1,-157,[0,"cf98GaGllED4Jf0LVqvQJO"]]],[2,"b6pESBJoBOrZNCUz45OB07",1,0],[1,-76.322,50,0]],[69,"Holder_CurrentSpeed",33554432,2,[-160,-161],[[41,-158,[0,"57Yjt/C15OpIv9BYjVJfiZ"],[5,71.75999999999999,40],[0,1,0.5]],[105,1,1,-14,-159,[0,"1emvQ78RZKipKT0Z6agDwK"]]],[2,"52xof9dRxKmIR4vvnmS70K",1,0],[1,129.422,41.32600000000002,0],[3,0,0,0.06975647374412529,0.9975640502598243],[1,0,0,8]],[49,"Color",33554432,12,[-164],[[5,-162,[0,"9bO9bStEJM0oDucCFsP04O"],[5,88,76]],[34,-163,[0,"79rwgVtVtPRa4v7g0QsaKS"],[4,4278250032],17]],[2,"71HDiLdp1IYo12fufeg6JT",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,13,[-167],[[5,-165,[0,"38cs42nn9HAJ90/Rx7sOAq"],[5,88,76]],[34,-166,[0,"c3+RR1S2JENrIy90WgkMXI"],[4,4286936683],20]],[2,"daj/Aws2JDU4JKnQAydshi",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[210,"Holder_FreeUpgrade",33554432,6,[-171],[[5,-168,[0,"14xzqyMZ1JrrWWy7l9/rdz"],[5,80,18]],[105,1,1,1,-169,[0,"25swoIUKtD45QmAqH2Fvnx"]],[31,0,-170,[0,"00hzA9oi5BmbHuaZ1stOSl"],27]],[2,"c4ZLyEEDBKnpPJZFUprOhM",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,1.0869565217391306,1.0869565217391306,1],[1,0,0,8.999999999999998]],[69,"Holder_CurrentPrize",33554432,3,[-174,-175],[[41,-172,[0,"bcj9HOmK5Alo656IrFlJQL"],[5,59.129999999999995,40],[0,1,0.5]],[105,1,1,-14,-173,[0,"f7IBh9GRFFKKg2adJZ63Gb"]]],[2,"8aYG8S9Y9CdYo7jqCknXi4",1,0],[1,126.785,40.241,0],[3,0,0,0.06975647374412529,0.9975640502598243],[1,0,0,8]],[49,"Color",33554432,14,[-178],[[5,-176,[0,"a7qepcNdlJUaOtj3rBUf6B"],[5,88,76]],[34,-177,[0,"2fSUO5YxZJXon+mlawxy+E"],[4,4278250032],42]],[2,"c5gvG2r8VGZqJYnGXN+YTw",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,15,[-181],[[5,-179,[0,"c6NB+DfaFD74PkczXUE9oT"],[5,88,76]],[34,-180,[0,"94lH3SAWZGL6Dt9Af+VIwd"],[4,4286936683],45]],[2,"d0xbF2fDlHg7TzyG/fJJmX",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[210,"Holder_FreeUpgrade",33554432,8,[-185],[[5,-182,[0,"9caRxQo8JDWqiy1yWqaQ2y"],[5,42.95,18]],[105,1,1,1,-183,[0,"79qrkMqHNFspjWNw4l4rS6"]],[31,0,-184,[0,"4dyOtcJ6dJsYGIrH3t/+r7"],52]],[2,"f3SYEa82RBX6PGAC+Sxvza",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,1.0869565217391306,1.0869565217391306,1],[1,0,0,8.999999999999998]],[49,"Holder_Currency Total",33554432,10,[-188,-189],[[5,-186,[0,"c9q6o2rptHxblHGk5g5dZF"],[5,180,90]],[82,-187,[0,"12xxD9vtdCu7EnWXzN5mhN"]]],[2,"decD/xNvRHbbJbVteJBMmP",1,0],[1,-104,182,0]],[26,"Button_Color",33554432,9,[[5,-190,[0,"f4TxVVZq9Msa72U1Yw2RJS"],[5,108,96]],[39,0,-191,[0,"d95tpwe4RAwo9UV9Pg7qbD"],[4,4294400626],64],[50,45,88,76,-192,[0,"b5iTY05dNJAI/FPQsH2Hy3"]]],[2,"18RdUwxO5GoohAFNOzzQ/4",1,0]],[26,"Button_Color",33554432,4,[[5,-193,[0,"d5Ao/wOYxB4L6YLfmXTp7k"],[5,156,152]],[34,-194,[0,"65Y+wvzVhJ1qzVmikfqWL4"],[4,4292759605],70],[50,45,156,152,-195,[0,"47LJQB0m1HfLJ8kCWEjdbt"]]],[2,"18zFLMQGhJmoJucYsreYaX",1,0]],[266,"Particle_Transition",33554432,[[182,1,false,4,false,true,-196,[0,"edcmDWst9PO5EUKuI0ign4"],[[74,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,1,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,75]],[76,-197,[0,"08UCuj5m1FKITj2lIBCdvs"]],[5,-198,[0,"7dXveb7nhKT5D26wkM52PD"],[5,100,900]],[178,16,-1088.915,-930,1,-199,[0,"7c1OAqZr5BJLxqskpVjzhH"]]],[2,"4aUSxYZDRGXpmgfFhvlQQ5",1,0],[1,-930,-164.343,300],[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[195,"UpgradesMenu",33554432,[[27,-200,[0,"63clZ6luVMZ6mMoscwCdTU"]],[314,-206,[0,"79MuW+eZZNG64bP37SVhDd"],-205,19,-204,-203,5,-202,13,-201],[315,-212,[0,"1eoJzxSdxOi5gYvCiQ3T4o"],-211,20,-210,-209,7,-208,15,-207],[286,-214,[0,"bbwrPqx/BN8YlxqFNvx7JA"],-213]],[2,"5dRxXZRNhNGa+07s4l5y7K",1,0]],[69,"XP_Bar Outline",33554432,11,[-217],[[5,-215,[0,"a0xQt62OhCXJ04zHwh+xzl"],[5,220,64]],[34,-216,[0,"39OBGIapJHA55IQqLgpHzh"],[4,4281539080],3]],[2,"0dRsRQvkVH0JG0nV49rTug",1,0],[1,145.258,-2.025,0],[3,0,0,0.008726535498373935,0.9999619230641713],[1,0,0,1]],[26,"Level_Color",33554432,17,[[5,-218,[0,"baFw4egUVFuLB9WeivRwOl"],[5,64,64]],[125,0,false,-219,[0,"a3i/agUr1DHrhpzIRduyBY"],[4,4294400569],4],[368,-220,[0,"1eOFU3PU9JnaSrgqaC1XzE"]]],[2,"38Y6ovmD9BrZ0/VVEmtp+p",1,0]],[46,"Text_Level v2",33554432,17,[[5,-221,[0,"1aFtdZxx5EAaut13QVmlfr"],[5,51.18,31.72]],[99,"Level",18,18,22,false,-222,[0,"16n5yw7xxCQLjakmzyrASt"],5],[186,-223,[0,"5029vMJfFIjpJ/LtKyDaW5"],[4,4281539080]]],[2,"93hgbB0VFPtY8O04Iw0xDa",1,0],[1,-2.827,27.985,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[49,"BotPanel",33554432,1,[10],[[5,-224,[0,"26JdtcJ4dNj6b8tKLVqTyW"],[5,414,100]],[124,44,100,1,-225,[0,"f71k5cJyVIiL/6MMKAXDwu"]]],[2,"1bSl2FYEdMB7hRQF3PWUhI",1,0],[1,0,-398,0]],[69,"Panel_Color",33554432,10,[-228],[[5,-226,[0,"4crPBGjm9LQKV56Kh6ccux"],[5,1000,390]],[201,3,0,1,-227,[0,"6020+chipPApKpMgKrBjmg"],10]],[2,"21Jf0+FvpOxZh6AuEM9VRu",1,0],[1,46,-73.75900000000001,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[22,"Panel_Edge",33554432,40,[[5,-229,[0,"f3nv+yUg5KK6zOufyaYhhf"],[5,1000,100]],[201,3,0,1,-230,[0,"d5EUS3XFhK4oUlHNLgiI+X"],9],[246,17,-100,1,-231,[0,"aaTjZl5kNIrI3kKcYPjcKd"]]],[2,"298OZaQ5RIx5BC0rx0a5ty",1,0],[1,0,245,0]],[46,"Text_Speed",33554432,2,[[5,-232,[0,"f9oxjA+JFIWKdT+f3ksEXt"],[5,55.010000000000005,29.14]],[99,"Speed",16,16,19,false,-233,[0,"64iuEaq2ROzIOlRD1ZMG25"],11],[91,2.6,-234,[0,"9bdax5PhFB9bkK3AwjVkPI"],[4,4281539080]]],[2,"ccfSatjMtHuKsEhPDQvsDH",1,0],[1,24.225,55.188,0],[3,0,0,0.05233595624294384,0.9986295347545739],[1,0,0,6.000000000000002]],[22,"Text_KMh",33554432,23,[[5,-235,[0,"806G8z6flAn79DfB8cI8oI"],[5,37.76,16.6]],[99,"km/h",12,12,10,false,-236,[0,"41Zw6KveJGs5pAGRLlRBCn"],12],[186,-237,[0,"e76HG4wX9MtIaYMdanl2ec"],[4,4281539080]]],[2,"b4Ih5FYV1Fr7fIK8bTbPfo",1,0],[1,-18.879999999999992,-8.436,0]],[22,"Text_Free",33554432,26,[[41,-238,[0,"32KfwOtUhO14YQqEmJPprr"],[5,42.95,17.64],[0,0,0.5]],[228," FREE! ",0,13,13,14,false,-239,[0,"8eEN82AChJIKVL3jRI2GEr"],[4,4278234623],25],[200,true,-240,[0,"d5V5k+hQtLEa2iGlknvLJp"],[26]]],[2,"a23TvbbyJF+7ydil11eiMQ",1,0],[1,-21.475,0.413,0]],[22,"Outline",33554432,6,[[5,-241,[0,"e1TDzzMXBJ2r2Ggys++6v8"],[5,88,76]],[34,-242,[0,"2a/WznE6JLUoXv+O7/4B4I"],[4,4278250032],29]],[2,"e2n+EpB+FGCKhEx7hzKiFO",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,6,[-245],[[5,-243,[0,"84QS4OloxA1p66bv29l5UI"],[5,88,76]],[34,-244,[0,"7bBarTH09NxYUadih6NL5H"],[4,4278250032],31]],[2,"b5iYPO6lFHuI1gGxfKw4SX",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_Prize",33554432,3,[[5,-246,[0,"cb3E974EhExLH98htK4Tcn"],[5,95.41,29.14]],[99,"Coin Bonus",16,16,19,false,-247,[0,"5chwoOCndI8rGJi8LF/PL0"],36],[91,2.6,-248,[0,"c0+SNnWs5GNYDi54mgEUos"],[4,4281539080]]],[2,"f7gKDwoiFORLBbZ0cBeSVh",1,0],[1,44.026,56.565,0],[3,0,0,0.05233595624294384,0.9986295347545739],[1,0,0,6.000000000000002]],[22,"Text_%",33554432,27,[[5,-249,[0,"09sFsNXF1PJ61qFlO+u5hD"],[5,16.009999999999998,16.6]],[99,"%",12,12,10,false,-250,[0,"f0n3e3CjpJ464m1h/YyL6Q"],37],[186,-251,[0,"2dKg2m90lNNaOlc+C/b5ed"],[4,4281539080]]],[2,"f2cbNBWJ5I/5K2XwJRBgrq",1,0],[1,-8.004999999999999,-8.436,0]],[22,"Text_Free",33554432,30,[[41,-252,[0,"bdbypA4MlBiKcU4+KLU2Tm"],[5,42.95,17.64],[0,0,0.5]],[228," FREE! ",0,13,13,14,false,-253,[0,"e7sB+izgdE04OGjoHy4iv1"],[4,4278234623],50],[200,true,-254,[0,"cf9ibaA31GSbvDehAVvXHW"],[51]]],[2,"494Vi4KWZBiLxHvXWqmWIq",1,0],[1,-21.475,0.413,0]],[22,"Outline",33554432,8,[[5,-255,[0,"c4XczsQQxFM45PsyB8OdE+"],[5,88,76]],[34,-256,[0,"3b3HxFPzVMxrtYCQA0QAWS"],[4,4278250032],54]],[2,"28uKH5SjFJ8ZGQM/VDsl4W",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,8,[-259],[[5,-257,[0,"83AmJJoOtIjbKXt4+92loB"],[5,88,76]],[34,-258,[0,"ceh9PntMdNcLRA8/AtRMe0"],[4,4278250032],56]],[2,"7fSu2/RMNAf5FV+cXQPICm",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[69,"Panel_Color",33554432,31,[-262],[[5,-260,[0,"f1IME/pJlKH5MIWlh/vbRC"],[5,132,64]],[34,-261,[0,"46kekbImhABJ7gkL9cCh08"],[4,4281539080],61]],[2,"362Ce05M5GlY1B2WOkqPAg",1,0],[1,18.007,3.769,0],[3,0,0,-0.008726535498373935,0.9999619230641713],[1,0,0,-1]],[26,"Button_Outline",33554432,9,[[5,-263,[0,"82SL0b7o9FFYyUXPKYzu3v"],[5,108,96]],[31,0,-264,[0,"0ePqsHBZFCoIST8vOSSSZ0"],63],[50,45,88,76,-265,[0,"7dDPyVMHBNKrY6vy9cwuNQ"]]],[2,"4flnZnoytKOb0dVl+NySjs",1,0]],[69,"Text_Skin",33554432,9,[-268],[[5,-266,[0,"20VW4vY0FA9ZQ3cqS2Nr30"],[5,68.98,34.02]],[108,"Shop",27,27,27,false,-267,[0,"e5mwi7irFAhZVxmrQT201F"],[4,4294174947],66]],[2,"69ZfDMewJGbKfDtnhZDOrj",1,0],[1,2.6,7,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[26,"Button_Outline",33554432,4,[[5,-269,[0,"e5Glc8U79JyLjhU9zI7m5B"],[5,156,152]],[70,-270,[0,"ce+3d4tN5LUatOLo/Bk8Pn"],69],[50,45,156,152,-271,[0,"84OYZhy6lOnq9fzpyWWECH"]]],[2,"ca2JhtydlCpLsLMyuSMTUu",1,0]],[194,"Holder_VFX",false,33554432,1,[34],[[5,-272,[0,"df1eO9F7tClJLgMLzlWxiQ"],[5,414,896]],[50,45,100,100,-273,[0,"5dHZ68IJpEbql8tU4zod8f"]]],[2,"8849aGZ9JBJo1yB9SAqyMJ",1,0]],[68,"EventRaisers",33554432,1,[-275,-276],[[27,-274,[0,"a2AbDgfihB/bLRmglO+njx"]]],[2,"e9DuOd9hdAFodFsfFY9Dkt",1,0]],[26,"RaiseTransition",33554432,57,[[27,-277,[0,"13CdQPFLtDW6KSt/KQyonO"]],[104,15,-278,[0,"1adwiTItFAQolAURNTJeAu"]]],[2,"b7HmOWDNhBzZouxosH9n3q",1,0]],[26,"RaiseActivateStore",33554432,57,[[27,-279,[0,"a8pi2wJKpOX4q+mvvk8WlY"]],[104,16,-280,[0,"5dq+ZkvM1Kj7yJ2nIaEmKC"]]],[2,"e4uzzNIl5B8Zqcn6UbGDpN",1,0]],[68,"Scripts",33554432,1,[-282,35],[[27,-281,[0,"72DSlfogtCVJAcZb9VWhY4"]]],[2,"ee8IzzKP5OnZ78PDC+ya8D",1,0]],[235,"Level_Outline Back",33554432,11,[[5,-283,[0,"b9nqqMz0BMnaqgTQN04XRk"],[5,64,64]],[125,0,false,-284,[0,"980GOUnE9NXoJyR2JK0B2o"],[4,4281539080],2]],[2,"dahuwsmxdJf4FtChOsxiy9",1,0],[1,49.98,-23.997,0],[1,0.8,0.8,1]],[123,"XP_Bar Fill",33554432,36,[[[5,-285,[0,"4ey4ggK6JCiocOz3Dca2Qf"],[5,180,52]],-286],4,1],[2,"90+HV0fdlK54sTnv3pZt8x",1,0],[1,13,1,0]],[158,"Text_Level",33554432,17,[[[5,-287,[0,"64HKnaD1BOCoJciQfq10dj"],[5,40,30]],-288],4,1],[2,"96/CZ7WBJJsbTyJYvi/hZV",1,0],[1,0.729,3.086,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[22,"Logo_Northern",33554432,18,[[5,-289,[0,"59Bxt59C1L/qVi6YLOEaYU"],[5,348,108]],[70,-290,[0,"0a9FWJuJJJ7qG6gL2oiCbg"],7]],[2,"efN8+6ipJGr4RbLvnT60R3",1,0],[1,-4.268,24.639,0]],[22,"Logo_Heights",33554432,18,[[5,-291,[0,"3afV5mnNhIJrFf0AB/mPlN"],[5,296,104]],[70,-292,[0,"c06V0aWZRIh4EK99cpR8dd"],8]],[2,"65heyAdo1AOLQprYzS/yG1",1,0],[1,-6.896,-37.229,0]],[26,"MidPanel",33554432,1,[[5,-293,[0,"e1GhlHIFNAV7hnbJm8jusG"],[5,414,896]],[90,45,100,100,1,-294,[0,"fdQWyejlNJ6qVMvjSJYENx"]]],[2,"45No7rKvVFYbwQhp8R7Djm",1,0]],[123,"Text_CurrentSpeed",33554432,23,[[[41,-295,[0,"9dWfXIKiNARo8jz+ooRHkC"],[5,48,50.4],[0,1,0.5]],-296],4,1],[2,"2afNSgTHRN456L12WFPkCM",1,0],[1,-23.75999999999999,1.58,0]],[22,"Icon_Currency",33554432,19,[[5,-297,[0,"0e2mxLpgNAdaibflic372W"],[5,14,14]],[31,0,-298,[0,"38m77qZddHc7N1RBvHiWO9"],13]],[2,"511IrP2z1GG6ODpYOOwnwd",1,0],[1,-13.344999999999999,-1.552,0]],[123,"Text_Cost",33554432,19,[[[41,-299,[0,"28FIKkb05KNZDMl8HNIm92"],[5,25.69,17.64],[0,0,0.5]],-300],4,1],[2,"78qCgkAn9FlL9DhKj0+JYy",1,0],[1,-5.344999999999999,0,0]],[22,"Shadow",33554432,12,[[5,-301,[0,"efcweeCKFBbZ4hkFIZ36g8"],[5,88,76]],[70,-302,[0,"7fKOeMZyhAlYPll+SaBpgn"],14]],[2,"2d3eg/xeJNhbYnwHKM7Wr8",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,12,[[5,-303,[0,"0d96BjZG9ODK6CQ3qCnc6J"],[5,88,76]],[70,-304,[0,"4e8tc+Yi5KbYkr2eprPye2"],15]],[2,"e3GZETrHxI+Yt6MVq43Fn4",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,24,[[5,-305,[0,"edb5mQCd5KyLQIn3UKLeev"],[5,41,41]],[34,-306,[0,"687QbajHlC36XBu573+6wI"],[4,4279006754],16]],[2,"04OUDrvgdOlItmtRGD6TVT",1,0],[1,4.188,4.188,0]],[22,"Outline",33554432,13,[[5,-307,[0,"68ahbEPgFIK7TbBKEqGEu9"],[5,92,80]],[39,0,-308,[0,"92IlygsjBPGr9gcV+5FiuJ"],[4,4281539080],18]],[2,"6bpSKHCtJH8p0YIS7u25tp",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,25,[[5,-309,[0,"38BIesBQ9KdpJVlaxqWzQu"],[5,41,41]],[34,-310,[0,"7fppMW3mdG45rumv8nz3z1"],[4,4281539080],19]],[2,"1dr+f+gQRGv4W1V1v5px2G",1,0],[1,4.188,4.188,0]],[46,"Holder_Price Blocker",33554432,5,[[5,-311,[0,"86ULDNj2RIgqkl2lBMEfOp"],[5,80,18]],[31,0,-312,[0,"f4eTBaz5NJGIP094+1YpMN"],21]],[2,"adcTHtWQBMMqZJD09KdFq5",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,0,0,8.999999999999998]],[22,"Shadow",33554432,5,[[5,-313,[0,"68832cjwFAvpEJxn1anXeS"],[5,88,74]],[70,-314,[0,"6118lwLItETLeExnmzYlUk"],22]],[2,"7aaRqwGglErp0czXFUIuOH",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,5,[[5,-315,[0,"ed1z4/e4tJD64DEedcYDDq"],[5,88,76]],[34,-316,[0,"7eZ6pCfoBPerU9J8ox5wzX"],[4,4281539080],23]],[2,"00xM4YhcFOPYPiUZKd8yxS",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_MAX",33554432,5,[[5,-317,[0,"0cIKLW51ZDlIWaxQzHo+ht"],[5,53.62,30.24]],[108,"MAX",24,24,24,false,-318,[0,"befzUSoa9Lwrbb5dFTYYOa"],[4,4283222527],24]],[2,"b9GP53sJlJ7JpfoMMiEPLt",1,0],[1,1.792,0.252,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[22,"Shadow",33554432,6,[[5,-319,[0,"88yMcxrRZJfad1GqYYZFSU"],[5,90,76]],[31,0,-320,[0,"9fSwTTzb5GOL7s3be/LJ5e"],28]],[2,"aenYm6R7BEMJ38p37dmDj9",1,0],[1,0.418,-1.675,0]],[22,"Icon_Add",33554432,46,[[5,-321,[0,"f55zx7dmZKorHvQ22rUj9M"],[5,60,60]],[96,0,false,-322,[0,"873qBXkGVOGI8tEtvmShOT"],30]],[2,"4cQbKYaRhHqacXtiJ4A50i",1,0],[1,2.25,4.618,0]],[123,"Text_CurrentPrize",33554432,27,[[[41,-323,[0,"9cmqu5qlxJrbEPb9h2nYKj"],[5,57.12,50.4],[0,1,0.5]],-324],4,1],[2,"24o1v5kjdEt5zFm9fqSLDU",1,0],[1,-2.009999999999998,1.58,0]],[22,"Icon_Currency",33554432,20,[[5,-325,[0,"13haX0XbNLIZ8bOh7gIIBl"],[5,14,14]],[31,0,-326,[0,"9cu04+EERJ2In+01VqSExt"],38]],[2,"ec5zdSuu1Jd4zEqQjjif08",1,0],[1,-13.344999999999999,-1.552,0]],[123,"Text_Cost",33554432,20,[[[41,-327,[0,"7cHz1kpS5EvpIRa06MJWe5"],[5,25.69,17.64],[0,0,0.5]],-328],4,1],[2,"cao+uK10dOkb3XuEKIQT0X",1,0],[1,-5.344999999999999,0,0]],[22,"Shadow",33554432,14,[[5,-329,[0,"7ea2CVR09M364cKuuYvmQ4"],[5,88,76]],[70,-330,[0,"93aYD01q9AqI4h0ivpmf4S"],39]],[2,"35tOoX6opB+6Nk6VgEeDrd",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,14,[[5,-331,[0,"3690kmV61OrbWr/XUUaIUY"],[5,88,76]],[70,-332,[0,"21xTOh0LBD4rQj8K6xwiD7"],40]],[2,"7fwa5+XTZODIbD37UIH88q",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,28,[[5,-333,[0,"62xRkswgpNWpMJiCY4M+at"],[5,41,41]],[34,-334,[0,"3c6+3LyKxNJLFOxqIBvb5F"],[4,4279006754],41]],[2,"2dOGuprPNEHqTYzgVgtKa8",1,0],[1,4.188,4.188,0]],[22,"Outline",33554432,15,[[5,-335,[0,"68ahbEPgFIK7TbBKEqGEu9"],[5,92,80]],[34,-336,[0,"38jcOdYjFAz5tfskGFbQQr"],[4,4281539080],43]],[2,"feYafalHFNIY+wG5+Ifk5U",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,29,[[5,-337,[0,"2dv65/oDtPA7coDEz/C6Fh"],[5,41,41]],[34,-338,[0,"32nxL+KopNybzgUuXceseg"],[4,4281539080],44]],[2,"06HdByDMhH86uWqxykuz6e",1,0],[1,4.188,4.188,0]],[46,"Holder_Price Blocker",33554432,7,[[5,-339,[0,"35uONvloNA+6GwnYQtjZF8"],[5,80,18]],[31,0,-340,[0,"26I7kHKyBEW4iT1I6F99tf"],46]],[2,"49ralosd5EoJGl9NiaeDu4",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,0,0,8.999999999999998]],[22,"Shadow",33554432,7,[[5,-341,[0,"2biZNLO4xDy5hOswiv0w+H"],[5,88,74]],[70,-342,[0,"97et3wvqZFHJZ5X2RykVnN"],47]],[2,"72x7mZwZlCL4GPza1ZwTdN",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,7,[[5,-343,[0,"8e5ksG+61GHI9LTeUAQLqj"],[5,88,76]],[34,-344,[0,"fdyExnxm5Kob3NA6KBEgXp"],[4,4281539080],48]],[2,"f2Sxb1/0FHSqe94z0ZP2T0",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_MAX",33554432,7,[[5,-345,[0,"634PDbq8hNNaVRsZ/MkHcM"],[5,53.62,30.24]],[108,"MAX",24,24,24,false,-346,[0,"29TgOh8eFFQKa4Gj9nSRLY"],[4,4283222527],49]],[2,"3brGYfU8lDO5aNQPo6Nipu",1,0],[1,1.792,0.252,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[22,"Shadow",33554432,8,[[5,-347,[0,"ebLnWndPlEfIZ9bCCkPay2"],[5,90,76]],[31,0,-348,[0,"46MQHPWYpPyrOOw6806oXV"],53]],[2,"fekAqMMPNPG4wdE0hSgJaS",1,0],[1,0.418,-1.675,0]],[22,"Icon_Add",33554432,51,[[5,-349,[0,"303JhUW1VBCofoH7vxq5R0"],[5,60,60]],[96,0,false,-350,[0,"b8Y1WPEO5MnZ4ABy9y+7ZO"],55]],[2,"90cTt+3BdO/LSc2a1zq5ls",1,0],[1,2.25,4.618,0]],[158,"Text_Currency Total",33554432,52,[[[41,-351,[0,"e9Wn7NkytDZYFS4VvrBGym"],[5,96,50.4],[0,0,0.5]],-352],4,1],[2,"8cma2qwwRHUa+12Qs98mmd",1,0],[1,-37.689,-8.376,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[22,"Icon_Currency",33554432,31,[[5,-353,[0,"4fo8CLtkVCuI7VkmAHgVhQ"],[5,58,58]],[31,0,-354,[0,"25/ccGS1FEa5Dxs52rbAep"],62]],[2,"85TpLCuiJA3qqqT999AWj8",1,0],[1,-51.92700000000001,-9.631,0]],[155,"Text_Shop",false,33554432,54,[[5,-355,[0,"3frDCyVV1F/bFEH2ZYNHpB"],[5,46.45,20.16]],[108,"shop",19,19,16,false,-356,[0,"d7IGNJjh1IcoV7Bh/KkmM4"],[4,4286587440],65]],[2,"b05v4D7s5J3qIn+QtswErf",1,0],[1,0,-17.244,0]],[46,"Icon_Play",33554432,4,[[5,-357,[0,"06V6dXXT9MLozbMGqoBGg8"],[5,60,68]],[70,-358,[0,"15fSagrWhKdolQIwwKxoFg"],71]],[2,"0cVrOOxShG9awbxy+ZwJug",1,0],[1,10.494,6.746,0],[3,0,0,0.008726535498373935,0.9999619230641713],[1,0,0,1]],[68,"EventListeners",33554432,1,[-360],[[27,-359,[0,"acLv6t3B5DlqSotXR9M8MT"]]],[2,"f3He8K+whLgb8Ur72SmfOL",1,0]],[26,"ListenStoreBack",33554432,99,[[27,-361,[0,"6cESTYXqhKd5ODrifhSMnR"]],[74,3,-362,[0,"50JfRr9lhF0ZS+XQFAnNq0"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickBack",1]]]],[2,"96KaMUVoFOM42caYe4PQM8",1,0]],[26,"Menu",33554432,60,[[27,-363,[0,"d9C5urISlOFqeJyPpEbPJF"]],[481,-364,[0,"a5jstnYdRDebazfwOHJe+4"],1,76]],[2,"02cL87tidNfpCRbtegE3IM",1,0]],[288,3,0,1,62,[0,"1c8gA9HBZPV7bsEcqW0JIO"],[4,4294400569]],[307,"27",23,22,22,2,false,63,[0,"197wnXsEpAnpNSCMT2Y4O4"]],[229,"20",2,40,false,67,[0,"e6WC6cw69LIIJgAZbhyZCU"],[4,4294893341]],[205,"250",0,13,13,14,false,69,[0,"14o2I5HhNCsoPDm0kxKGU2"],[4,4281539080]],[159,3,0.9,12,[0,"532eZw/0lMVoyTFxsUYLtl"],24],[159,3,0.9,6,[0,"d4qgbBRKtGQIGY32qiLBgU"],45],[166,2,[0,"9e7bl66MVLIIzGJYWwGrRP"],[35]],[229,"20 ",2,40,false,81,[0,"0b/FyDwgpPhrhhMFgYTKmz"],[4,4288169471]],[205,"250",0,13,13,14,false,83,[0,"d04Ya0GNFParnRYVqaISqN"],[4,4281539080]],[159,3,0.9,14,[0,"beBttSIm5NR6conqJ/ZNXr"],28],[159,3,0.9,8,[0,"420Rg/KuVPkLVB24vLoyxK"],50],[166,3,[0,"9e7bl66MVLIIzGJYWwGrRP"],[60]],[227,"99999",0,29,32,32,2,false,false,95,[0,"3fnqYHQU1DzIpcqz40//z7"]],[97,1,[0,"ad8JDC19ZK66lH0baumauG"]],[482,1,[0,"6apmWFvzFHD4z0T0W5SGhU"],103],[484,1,[0,"efbXq4d0BMmrbUxlSLdRGy"],102]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-4,115,0,14,59,0,14,9,0,14,58,0,0,1,0,30,115,0,0,1,0,53,116,0,0,1,0,-8,116,0,-9,117,0,-1,16,0,-2,21,0,-3,66,0,-4,39,0,-5,56,0,-6,57,0,-7,99,0,-8,60,0,0,2,0,0,2,0,0,2,0,-4,108,0,-1,42,0,-2,23,0,-3,19,0,-4,12,0,-5,13,0,-6,5,0,-7,6,0,0,3,0,0,3,0,0,3,0,-4,113,0,-1,47,0,-2,27,0,-3,20,0,-4,14,0,-5,15,0,-6,7,0,-7,8,0,0,4,0,0,4,0,21,33,0,14,4,0,14,4,0,14,16,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,55,0,-2,33,0,-3,98,0,0,5,0,0,5,0,0,5,0,-1,75,0,-2,76,0,-3,77,0,-4,78,0,0,6,0,-2,107,0,0,6,0,0,6,0,-1,26,0,-2,79,0,-3,45,0,-4,46,0,0,7,0,0,7,0,0,7,0,-1,89,0,-2,90,0,-3,91,0,-4,92,0,0,8,0,-2,112,0,0,8,0,0,8,0,-1,30,0,-2,93,0,-3,50,0,-4,51,0,0,9,0,0,9,0,21,32,0,0,9,0,0,9,0,-1,53,0,-2,32,0,-3,54,0,0,10,0,0,10,0,-1,40,0,-2,22,0,-3,31,0,0,11,0,0,11,0,0,11,0,-1,61,0,-2,36,0,-3,17,0,0,12,0,-2,106,0,0,12,0,-1,70,0,-2,71,0,-3,24,0,0,13,0,21,25,0,0,13,0,0,13,0,-1,73,0,-2,25,0,0,14,0,-2,111,0,0,14,0,-1,84,0,-2,85,0,-3,28,0,0,15,0,21,29,0,0,15,0,0,15,0,-1,87,0,-2,29,0,0,16,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,-1,37,0,-2,63,0,-3,38,0,0,18,0,0,18,0,0,18,0,-1,64,0,-2,65,0,0,19,0,0,19,0,-1,68,0,-2,69,0,0,20,0,0,20,0,-1,82,0,-2,83,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,-1,67,0,-2,43,0,0,24,0,0,24,0,-1,72,0,0,25,0,0,25,0,-1,74,0,0,26,0,0,26,0,0,26,0,-1,44,0,0,27,0,0,27,0,-1,81,0,-2,48,0,0,28,0,0,28,0,-1,86,0,0,29,0,0,29,0,-1,88,0,0,30,0,0,30,0,0,30,0,-1,49,0,0,31,0,0,31,0,-1,52,0,-2,96,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,34,0,0,35,0,40,108,0,41,107,0,42,106,0,54,105,0,55,104,0,0,35,0,40,113,0,41,112,0,42,111,0,56,110,0,43,109,0,0,35,0,35,114,0,0,35,0,0,36,0,0,36,0,-1,62,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,-1,41,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,-1,80,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,51,0,0,51,0,-1,94,0,0,52,0,0,52,0,-1,95,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,-1,97,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,57,0,-1,58,0,-2,59,0,0,58,0,0,58,0,0,59,0,0,59,0,0,60,0,-1,101,0,0,61,0,0,61,0,0,62,0,-2,102,0,0,63,0,-2,103,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,0,66,0,0,67,0,-2,104,0,0,68,0,0,68,0,0,69,0,-2,105,0,0,70,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,78,0,0,78,0,0,79,0,0,79,0,0,80,0,0,80,0,0,81,0,-2,109,0,0,82,0,0,82,0,0,83,0,-2,110,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,-2,114,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,-1,100,0,0,100,0,0,100,0,0,101,0,0,101,0,4,1,2,11,22,3,11,22,4,11,10,9,11,10,10,11,39,11,11,21,18,11,21,34,11,56,35,11,60,116,77,117,364],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,103,104,105,108,109,110,113,114,115],[-1,17,3,3,3,12,3,3,3,3,3,12,12,3,3,3,3,3,3,3,3,3,3,3,12,12,-1,3,3,3,3,3,-1,19,3,-1,12,12,3,3,3,3,3,3,3,3,3,3,3,12,12,-1,3,3,3,3,3,-1,19,3,-1,3,3,3,3,12,12,3,22,3,3,3,3,22,-1,17,49,-1,-2,-3,-4,19,3,12,12,12,19,12,12,19,12,23],[60,61,115,241,176,0,115,453,454,84,21,0,40,28,20,7,14,9,7,14,9,21,55,7,0,0,116,21,55,7,117,9,56,56,50,57,0,40,28,20,7,14,9,7,14,9,21,55,7,0,0,116,21,55,7,117,9,56,56,50,57,152,28,7,9,0,0,20,20,177,178,67,74,74,60,61,174,239,455,174,175,175,179,0,40,0,57,40,0,57,0,456]],[[[71,"sfx_player_collect_coin_2",".mp3",0.287347],-1],0,0,[],[],[]],[[[37,"SM_CabinSpring_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_CabinSpring_01",[-2],[2,"cabsO5BWlZpbsY3dx0SB4M",-1,0]],[28,"SM_CabinSpring_01",1,[[25,-3,[0,"0cvq1HnbhV8bOuFVo66pGG"],[0],[23],1]],[2,"9eBNf940dXyKqgLH8LxO9X",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[457,458]],[[[29,".bin",2335241023,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27168,"length":5172,"count":1293,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27168,"count":566,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-3.042307138442993,-4.385671138763428,-3.350330352783203],"maxPosition",8,[1,3.042307138442993,4.385671138763428,6.948537826538086]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_01_Igloo_01"],[11,"NorthernHeights_01_Igloo_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,8]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[180,23]],[[[12,"NorthernHeights_Spring_Grass_02"],[11,"NorthernHeights_Spring_Grass_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["457FHn4QZasI12t5ee3DN6"]],[10,0,null,1,[9,"457FHn4QZasI12t5ee3DN6",-4,[13,"66XNBtTBlAZ5bzE8MrLsJf",1,[[6,"SM_GrassSpring_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["07qmKEfLhU4pGpiSm675m+"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[181,6]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[118,118,37]],[[[119,[[129,[89,[-10,-11,-12,-13,-14,-15],[[92,-5,-4],[192,0,-7,-6],[48,0,false,-9,-8,[[67,"close"]]]],-3,-2,-1]]],[{},"close",4,[77,2]]],[33,"Entry"],[43,"Tutorial_Intro",[35,0]],[43,"Tutorial_Idle",[35,1]],[33,"Exit"],[33,"Any"],[43,"Tutorial_Outro",[35,2]]],0,[0,24,5,0,25,4,0,26,1,0,10,2,0,9,1,0,10,3,0,9,2,0,10,6,0,9,3,0,-1,1,0,-2,4,0,-3,5,0,-4,2,0,-5,3,0,-6,6,15],[0,0,0],[15,15,15],[171,222,221]],[[[12,"NorthernHeights_Candy_Candy_02"],[11,"NorthernHeights_Candy_Candy_02",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["380f+cybtWf5MxnUvh5+JY"]],[10,0,null,1,[9,"380f+cybtWf5MxnUvh5+JY",-4,[13,"f9T81cYA1GXonXqMwipbQq",1,[[6,"SM_Candy_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["f4V3zTDX5dA4fGyuiT0h9/"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[459,15]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,1677721855]]],11]]],0,0,[0],[8],[23]],[[[12,"NorthernHeights_Christmas_Snowman_03"],[11,"NorthernHeights_Christmas_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["afzS+X6JBTj7ZK5x/kINtt"]],[10,0,null,1,[9,"afzS+X6JBTj7ZK5x/kINtt",-4,[13,"dbbRY9vi5Itp7s6U0k+I9t",1,[[6,"SM_ChristmasSnowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["bdhl8lHShRRqcRIplZQ3nk"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[460,29]],[[[12,"NorthernHeights_Autumn_Mushroom_01"],[11,"NorthernHeights_Autumn_Mushroom_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["f6Qeyha7hQOYTX+GOLZrF+"]],[10,0,null,1,[9,"f6Qeyha7hQOYTX+GOLZrF+",-6,[13,"7819GYw5tEBLxPRQ3/GggZ",1,[[6,"SM_Mushroom_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[6,1,["_materials","length"],-4],[133,["_materials","0"],-5,1]]],0]],[3,["f066xjbeFbyo4fWuWDDSiH"]]],0,[0,-1,3,0,1,1,0,-1,3,0,2,4,0,2,4,0,1,3,0,4,1,6],[0,0],[5,6],[461,18]],[[[12,"SM_Number_2"],[140,"SM_Number_2",[-2],[2,"6fsTiieIZVMqzppUAoyle4",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_2",1,[[25,-3,[0,"aeRISQBXJdSbsbfFlrQKc4"],[0],[23],1]],[2,"6eiqfu9t5eb5V8K03fZ5uv",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,462]],[[[36],[11,"SM_Igloo_01",[-2],[2,"46AKCJeXlXdZX/zpHket8X",-1,0]],[28,"SM_Igloo_01",1,[[25,-3,[0,"24OuBDRGNdSL6nTbWV63FN"],[0],[23],1]],[2,"dc39Yo9R9STJyzWxxOjdLW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[463,464]],[[[29,".bin",4194719767,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":96768,"length":12120,"count":3030,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":96768,"count":2016,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.086465358734131,-5.1628241539001465,-0.4097883701324463],"maxPosition",8,[1,4.08646821975708,4.7196807861328125,4.745447158813477]]],-1],0,0,[],[],[]],[[[37,"SM_Igloo_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_Christmas_Tree_03"],[11,"NorthernHeights_Christmas_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["8aCwpwIidTfapVI9+4yYzg"]],[10,0,null,1,[9,"8aCwpwIidTfapVI9+4yYzg",-4,[13,"42T8o9YyNPZasInSaQuFNs",1,[[6,"SM_ChristmasTree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["67QejydqldV72F0E50XGu2"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[465,29]],[[[36],[11,"SM_Mushroom_02",[-2],[2,"89AY9/foRfX52ZYHQAlUKT",-1,0]],[28,"SM_Mushroom_02",1,[[25,-3,[0,"80TovTdpJVJqwt7bVncq9z"],[0],[23],1]],[2,"f0tNgB6K5bnZgyBm1b8q3H",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[466,467]],[[[37,"SM_Mushroom_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1564715761,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6240,"length":2280,"count":570,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6240,"count":130,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5514147281646729,-0.5616670846939087,0.003321967786177993],"maxPosition",8,[1,0.5485802292823792,0.5383274555206299,1.2035506963729858]]],-1],0,0,[],[],[]],[[[119,[[129,[89,[-10,-11,-12,-13,-14],[[92,-5,-4],[48,0,false,-7,-6,[[84,[44,"isOn"]]]],[48,0,false,-9,-8,[[72,1,[44,"isOn"]]]]],-3,-2,-1]]],[{},"isOn",4,[121,1,false]]],[43,"Tab_NotSelected",[35,0]],[33,"Entry"],[43,"Tab_Selected",[35,1]],[33,"Exit"],[33,"Any"]],0,[0,24,5,0,25,4,0,26,2,0,10,1,0,9,2,0,10,3,0,9,1,0,10,1,0,9,3,0,-1,2,0,-2,4,0,-3,5,0,-4,1,0,-5,3,14],[0,0],[15,15],[43,77]],[[{"name":"Icon_Equiped","rect":{"x":1,"y":2,"width":26,"height":24},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[468]],[[[29,".bin",2610612211,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24576,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24576,"count":512,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0619803667068481,-1.0619806051254272,-4.7330072305840076e-8],"maxPosition",8,[1,1.0619804859161377,1.0619803667068481,1.0827858448028564]]],-1],0,0,[],[],[]],[[[37,"SM_Candy_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Candy_03",[-2],[2,"804zIBxO1fj6I7y14HgrhB",-1,0]],[28,"SM_Candy_03",1,[[25,-3,[0,"01qqlrnSFUcqx8xSmC9bqZ"],[0],[23],1]],[2,"11Z8HMbqtatbs8guPF5dKq",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[469,470]],[[[71,"amb_winter_mountain_loop",".mp3",38.04],-1],0,0,[],[],[]],[[[29,".bin",2970268507,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9744,"length":2412,"count":603,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9744,"count":203,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25691598653793335,-0.008920573629438877,0],"maxPosition",8,[1,0.266274631023407,0.6331920623779297,0]]],-1],0,0,[],[],[]],[[[37,"SM_SnowmanSpring_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",3066035718,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38064,"length":4572,"count":1143,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38064,"count":793,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.50344717502594,-1.3242772817611694,-0.13690978288650513],"maxPosition",8,[1,1.4580469131469727,0.7924747467041016,1.5877416133880615]]],-1],0,0,[],[],[]],[[[36],[11,"SM_SnowmanSpring_02",[-2],[2,"55/l/hAQdaL6zztwUFIpLJ",-1,0]],[28,"SM_SnowmanSpring_02",1,[[25,-3,[0,"9ceYOy54pdcpqKUAA9B+gE"],[0],[23],1]],[2,"b5PUQa/9pVKKTJYia4K/4t",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[471,472]],[[{"name":"UI_Button_Store Outline","rect":{"x":0,"y":0,"width":92,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[473]],[[[12,"NorthernHeights_01_Cabin_01"],[11,"NorthernHeights_01_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"f8UfN/WNFJ1KBrf5UhK1IL",1,[[6,"NorthernHeights_01_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,5.595]],[4,["_lrot"],-12,[3,0,0.2951744758657925,0,0.9554433676557469]],[4,["_euler"],-13,[1,0,34.336,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"56qFSMTmdD/p1qMtFLMmlo",1,[[6,"NorthernHeights_01_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.812,0,-6.011]],[4,["_lrot"],-17,[3,0,-0.27324575741241686,0,0.9619442582894887]],[4,["_euler"],-18,[1,0,-31.715,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[10,0,null,5,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[72,8,39,39,10,8,10,8]],[[[12,"NorthernHeights_06_Cabin_01"],[11,"NorthernHeights_06_Cabin_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-4,[13,"f3jLChv6xPKrrk8SaSUD+M",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[75,22]],[[{"name":"UI_Panel_Painted Edge v2","rect":{"x":0,"y":0,"width":840,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":840,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[474]],[[[37,"SM_FlowerSpring_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_FlowerSpring_01",[-2],[2,"91oMlxUelSQrket2i9iG50",-1,0]],[28,"SM_FlowerSpring_01",1,[[25,-3,[0,"d1z6+YsFFZT4UGA3Pb0OqA"],[0],[23],1]],[2,"33ZnjagJxRF7/hHjehjuW+",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[475,476]],[[[29,".bin",200718004,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24624,"length":5016,"count":1254,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24624,"count":513,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.9739234447479248,-1.482016921043396,-0.5372263193130493],"maxPosition",8,[1,1.5828580856323242,1.706894040107727,2.0184738636016846]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Christmas_EndFlag_01"],[11,"NorthernHeights_Christmas_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[29,42]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[13],[477]],[[{"name":"UI_Logo_Northern","rect":{"x":0,"y":0,"width":348,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":348,"height":108},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[478]],[[[36],[11,"SM_FlowerSpring_06",[-2],[2,"29Ao9RxsdQeoRWNWuB92h6",-1,0]],[28,"SM_FlowerSpring_06",1,[[25,-3,[0,"aa/SbZPpRbzJIPWAoLsCfB"],[0],[23],1]],[2,"84ZJF/CH5W767W47VQOE0l",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[479,480]],[[[29,".bin",1277255340,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12960,"length":2520,"count":630,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12960,"count":270,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.4420232772827148,-0.9855031967163086,-0.35931289196014404],"maxPosition",8,[1,1.2392034530639648,1.2349843978881836,1.6264065504074097]]],-1],0,0,[],[],[]],[[[37,"SM_FlowerSpring_06__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[111,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[481,482]],[[[37,"SM_Candy_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Candy_01",[-2],[2,"4a/4AY6p9eT79oiQIU0hR7",-1,0]],[28,"SM_Candy_01",1,[[25,-3,[0,"e4C1svJkdWU4CHss9YPwxq"],[0],[23],1]],[2,"e9THPYTgpSVKB311IyuUuH",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[483,484]],[[[29,".bin",2086407992,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24576,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24576,"count":512,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.2800867557525635,-1.2800869941711426,-5.705057759541887e-8],"maxPosition",8,[1,1.2800869941711426,1.2800867557525635,1.3051650524139404]]],-1],0,0,[],[],[]],[[[12,"LevelThemeEnd_07"],[88,"LevelThemeEnd_07",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"ecYWMeI6RMS7S0VWfkFk+w",1,0],[1,1.955,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"e82cS1HwBKwZIpCfwJiUi5"],[28],[23],29]],[2,"6e4vWN6p5D4518ra1L6VVU",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"c8vTKP3/RJ3rJM8Mqt2Run",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"85zh25pH5F8qFjfJNLgCIm"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,242,242,36,47,48,30,27,243,16,244,17]],[[[12,"NorthernHeights_Candy_Snowman_01"],[11,"NorthernHeights_Candy_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,15]],[[[29,".bin",3772374153,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7920,"length":3072,"count":768,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7920,"count":165,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1,-1,-0.7285666465759277],"maxPosition",8,[1,1,1,0.586266040802002]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_05_Tree_02"],[11,"NorthernHeights_05_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"d54j/0XgdLmZfKg33XsFdk",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,26]],[[[12,"NorthernHeights_Autumn_Tree_01"],[11,"NorthernHeights_Autumn_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,18]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[182,23]],[[[36],[11,"SM_Candy_02",[-2],[2,"380f+cybtWf5MxnUvh5+JY",-1,0]],[28,"SM_Candy_02",1,[[25,-3,[0,"f4V3zTDX5dA4fGyuiT0h9/"],[0],[23],1]],[2,"9c6Fu3ZDhana8yQCiPyLwl",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[485,486]],[[[29,".bin",1158722275,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24576,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24576,"count":512,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.8565015196800232,-0.8565016388893127,-3.817234173197903e-8],"maxPosition",8,[1,0.8565015196800232,0.8565014600753784,0.8732813000679016]]],-1],0,0,[],[],[]],[[[37,"SM_Candy_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[37,"SM_DeadTree_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_DeadTree_01",[-2],[2,"34DGFFNuVYOJD61ENmSn7I",-1,0]],[28,"SM_DeadTree_01",1,[[25,-3,[0,"e4p+3kG19QZpoJA+VeLN0b"],[0],[23],1]],[2,"2e/KP3DLNT/KhVa9ennYKw",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[487,488]],[[[29,".bin",3050670862,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2400,"length":936,"count":234,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2400,"count":50,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3435630202293396,-0.3435628414154053,-2.8623738288879395],"maxPosition",8,[1,0.4721578359603882,0.5549425482749939,4.241372585296631]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_05_Cabin_02"],[11,"NorthernHeights_05_Cabin_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-4,[13,"f3jLChv6xPKrrk8SaSUD+M",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[75,26]],[[[12,"LevelEndRecord"],[267,"LevelEndRecord",[-5,-6,-7,-8,-9,-10],[[486,0.9,-4,[0,"66rF2Cs1VMk4mwg04tyLRi"],-3,[14,15,16,17,18,19,20,21,22,23],13]],[16,"c46/YsCPVOJYA4mWEpNYRx",-2,0,[-1]],[1,0,0,-0.487]],[3,["95SE6Hp1JWpoOoj13Iw4NB"]],[130,"Text",1,[-11,-12],[2,"e2Asq3mNZBHY5HIf+M0FXB",1,0],[1,-3.146,0,-0.2],[3,0.4983439959781799,0,0,0.8669793894162073],[1,59.781,0,0]],[10,0,null,3,[9,"95SE6Hp1JWpoOoj13Iw4NB",-15,[13,"0c17KCtIhOJa46D/ZXkIKL",1,[[6,"SM_JumpRecord_01",["_name"],2],[4,["_lpos"],2,[1,0,0,-0.797]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[133,["_materials","0"],-13,3],[133,["_materials","1"],-14,4]]],2]],[109,"Quad",1,[[176,"Quad<ModelComponent>",-16,[0,"f9DguiIWNN3b36kgBXWP2X"],[0],[23],1]],[2,"49NScsp9lD84Z8BSiY+8p1",1,0],[1,0,0.1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.741,0.514,1],[1,-90,0,0]],[3,["a9oQPFMUVSAohN4XR0ob2D"]],[324,"Numbers",3,[2,"ab1HWA8O9KCLfw+3zm6Pju",1,0],[1,3.404,0.103,-0.413]],[109,"Quad-001",1,[[176,"Quad<ModelComponent>",-17,[0,"f51ouo78JMMIAhA/cMrhTX"],[5],[23],6]],[2,"90hZsYZO9M361c6/xZH1cA",1,0],[1,-2.39,0.1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.741,0.514,1],[1,-90,0,0]],[109,"Quad-002",1,[[176,"Quad<ModelComponent>",-18,[0,"8dcwF/5fVIb6CEjoXUGhJQ"],[7],[23],8]],[2,"35szrZRSdAWocH/XqBs0b1",1,0],[1,-4.713,0.1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.741,0.514,1],[1,-90,0,0]],[109,"Quad-003",1,[[176,"Quad<ModelComponent>",-19,[0,"e7OqzNOW5MGJL3I0dEuFTc"],[9],[23],10]],[2,"49KMEjci1MDIosDorgk8Xh",1,0],[1,2.405,0.1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.741,0.514,1],[1,-90,0,0]],[109,"Quad-004",1,[[176,"Quad<ModelComponent>",-20,[0,"82PmXeALxDJpeVvXBIhHh2"],[11],[23],12]],[2,"50jq6uU+hIJrZL9iMMsIxz",1,0],[1,4.802,0.1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1.741,0.514,1],[1,-90,0,0]]],0,[0,-1,4,0,1,1,0,78,7,0,0,1,0,-1,5,0,-2,3,0,-3,8,0,-4,9,0,-5,10,0,-6,11,0,-1,4,0,-2,7,0,2,6,0,2,6,0,1,4,0,0,5,0,0,8,0,0,9,0,0,10,0,0,11,0,4,1,20],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,5,6,6,-1,7,-1,7,-1,7,-1,7,79,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],[66,81,489,66,35,66,81,66,81,66,81,66,81,66,490,491,492,493,494,495,496,497,498,499]],[[[119,[[129,[89,[-18,-19,-20,-21,-22,-23,-24,-25],[[92,-5,-4],[120,0,-7,-6,[[67,"activate"]]],[192,0,-9,-8],[193,false,-11,-10,[[67,"clickStore"]]],[193,false,-13,-12,[[67,"clickBack"]]],[193,false,-15,-14,[[67,"clickStore"]]],[193,false,-17,-16,[[67,"clickStore"]]]],-3,-2,-1]],[187,"CoinGain",[450,[[-29,-30,-31,[43,"Clip Motion",[452]]],1,1,1,4],-28,-27,-26]]],[{},"clickBack",4,[77,2],"clickStore",4,[77,2],"activate",4,[77,2]]],[43,"Rewards_ToStore",[35,1]],[43,"Rewards_Intro",[35,0]],[33,"Entry"],[137,"Empty"],[43,"Reward_CoinGain v2",[35,2]],[43,"Rewards_fromStore",[35,3]],[33,"Exit"],[33,"Any"],[33,"Entry"],[33,"Exit"],[33,"Any"]],0,[0,24,8,0,25,7,0,26,3,0,10,4,0,9,3,0,10,2,0,9,4,0,10,5,0,9,2,0,10,1,0,9,5,0,10,6,0,9,1,0,10,1,0,9,6,0,10,1,0,9,2,0,-1,3,0,-2,7,0,-3,8,0,-4,2,0,-5,1,0,-6,4,0,-7,5,0,-8,6,0,24,11,0,25,10,0,26,9,0,-1,9,0,-2,10,0,-3,11,31],[0,0,0,0],[15,15,15,15],[183,245,246,247]],[[[12,"NorthernHeights_Spring_DeadTree_01"],[11,"NorthernHeights_Spring_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["cfDBGgqlFdVqj6BKWmmZHm"]],[10,0,null,1,[9,"cfDBGgqlFdVqj6BKWmmZHm",-4,[13,"f18bfSzZdFa4kYA+uEx+sP",1,[[6,"SM_DeadTreeSpring_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["97KBB1qCtSYogaujdGijNH"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[500,6]],[[[12,"LevelTheme_02"],[88,"LevelTheme_02",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],31,32],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],33]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[28,29,30]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[248,16,49,119,120,121,122,119,120,121,122,119,120,121,122,119,120,121,122,249,250,251,249,250,251,252,253,254,252,253,254,255,17,501]],[[[29,".bin",1257258009,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":192,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":192,"count":4,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-6.000003814697266,-4.842665362048137e-7,-7.017004008957883e-7],"maxPosition",8,[1,6.000003814697266,2.000000476837158,0.000002489838152541779]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_07_Igloo_01"],[11,"NorthernHeights_07_Igloo_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,24]],[[[12,"NorthernHeights_06_Tree_02"],[11,"NorthernHeights_06_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"d54j/0XgdLmZfKg33XsFdk",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,22]],[[[71,"sfx_player_final_jump",".mp3",1.306122],-1],0,0,[],[],[]],[[[12,"NorthernHeights_02_Snowman_03"],[11,"NorthernHeights_02_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"7cmuxLYORNH6uposO82oPM",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,19]],[[[12,"NorthernHeights_06_Snowman_02"],[11,"NorthernHeights_06_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"e3UDMMVg9FV4YDdSFpCTv/",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,22]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@e9a6d","back":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@40c10","left":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@8fd34","right":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@74afd","top":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@bb97f","bottom":"640a9838-0d48-4be0-8e53-26bde29f9b5c@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@e9a6d","back":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@40c10","left":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@8fd34","right":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@74afd","top":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@bb97f","bottom":"64592cea-920a-4f2b-85e1-d3b7acfec8b4@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[184,184,37]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[118,23]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[502,97,38]],[[[12,"NorthernHeights_Spring_Flower_02"],[11,"NorthernHeights_Spring_Flower_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["311UjcO1NaB4MfVax75Hcn"]],[10,0,null,1,[9,"311UjcO1NaB4MfVax75Hcn",-4,[13,"e2fbom/1tIUZcTLXyMsr4u",1,[[6,"SM_FlowerSpring_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["37HwQkELtShbbm+KHwqQ/Q"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[503,6]],[[[12,"NorthernHeights_Candy_Lollipop_01"],[11,"NorthernHeights_Candy_Lollipop_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["b4J+Kx+n5diIwfUVTKvE02"]],[10,0,null,1,[9,"b4J+Kx+n5diIwfUVTKvE02",-4,[13,"8bzpCDAQpPpYOg15Uw2SQk",1,[[6,"SM_Lollipop_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["15uCqE5yxYXq1f0YBVlYl/"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[504,15]],[[[12,"NorthernHeights_06_Tree_01"],[11,"NorthernHeights_06_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"96Wkphaa9DCrR2PWH48Z08",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,22]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[256,25]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@e9a6d","back":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@40c10","left":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@8fd34","right":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@74afd","top":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@bb97f","bottom":"67906115-e865-4b60-8bb2-0661aa8e157e@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[12,"NorthernHeights_06_Snowman_03"],[11,"NorthernHeights_06_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,22]],[[{"name":"UI_Panel_Currency Reward","rect":{"x":0,"y":0,"width":264,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":264,"height":104},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[505]],[[{"name":"UI_WishButton_Color Equip","rect":{"x":11,"y":7,"width":117,"height":112},"offset":{"x":-0.5,"y":5},"originalSize":{"width":140,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[506]],[[[29,".bin",600108422,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":208320,"length":24720,"count":6180,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":208320,"count":4340,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.793076515197754,-3.85703706741333,-0.5],"maxPosition",8,[1,2.772963047027588,3.8508124351501465,5.570366382598877]]],-1],0,0,[],[],[]],[[[36],[11,"SM_ChristmasCabin_01",[-2],[2,"dfMqWlbjpXio5LC5AQ9crP",-1,0]],[28,"SM_ChristmasCabin_01",1,[[25,-3,[0,"06vaaOWtlQno5QB8gIpr4v"],[0],[23],1]],[2,"0cCWqcRa9ch7Rb1JqRtR/c",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[507,508]],[[[37,"SM_ChristmasCabin_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[185,185,37]],[[[12,"LevelTheme_Candy"],[88,"LevelTheme_Candy",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],37,38],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],39]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,1,12],[1,0,0.2,18],[3,4,5,6,7,8,9]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,35],[1,0,0.5,25],[10,11,12,13]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,1,-12],[1,0,0.2,18],[14,15,16,17,18,19,20]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,-36],[1,0,0.5,25],[21,22,23,24]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[25,26,27]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[28,29,30]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[31,32,33]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[34,35,36]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-5,-6,-7,-1,-2,-3,-4,-1,-2,-3,-4,-5,-6,-7,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[257,16,49,123,124,125,126,258,259,260,124,123,126,125,125,126,123,124,258,259,260,125,126,123,124,261,262,263,261,262,263,264,265,266,264,265,266,267,17,509]],[[[111,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[268,25]],[[{"name":"UI_Button_BigHex Color","rect":{"x":0,"y":0,"width":156,"height":152},"offset":{"x":0,"y":0},"originalSize":{"width":156,"height":152},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[510]],[[[36],[11,"SM_Mushroom_01",[-2],[2,"f6Qeyha7hQOYTX+GOLZrF+",-1,0]],[28,"SM_Mushroom_01",1,[[25,-3,[0,"f066xjbeFbyo4fWuWDDSiH"],[0],[23],1]],[2,"ba0UMTFsVWQ7C2A71MsOuJ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[511,512]],[[[29,".bin",2572342891,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3888,"length":1680,"count":420,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3888,"count":81,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.6860134601593018,-0.6319130659103394,-0.0004837025189772248],"maxPosition",8,[1,0.6791970729827881,0.6735377311706543,1.1542003154754639]]],-1],0,0,[],[],[]],[[[37,"SM_Mushroom_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_Spring_Flower_07"],[11,"NorthernHeights_Spring_Flower_07",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["1dpk+pkORW3I5277SxjQ8D"]],[10,0,null,1,[9,"1dpk+pkORW3I5277SxjQ8D",-4,[13,"16AqSa4aRFqrchELfZYLK2",1,[[6,"SM_FlowerSpring_07",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["93QRHNpxlVUJIFI1NLRQBE"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[513,6]],[[[12,"NorthernHeights_Candy_Snowman_02"],[11,"NorthernHeights_Candy_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"b2YmRoDQVB1opd/Tjk59lJ",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,15]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[167,23]],[[{"name":"Icon_Plus","rect":{"x":0,"y":0,"width":41,"height":41},"offset":{"x":0,"y":0},"originalSize":{"width":41,"height":41},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[514]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[515,65,38]],[[[12,"NorthernHeights_Spring_WindMill"],[325,"NorthernHeights_Spring_WindMill",[-12,-13,-14,-15,-16,-17],[16,"981Bhxadtc+I+VPKuWbHh0",-11,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]],[1,-0.039,0,0]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-22,[13,"e4L+fpHQ1KXIG7DHINCM1S",1,[[6,"NorthernHeights_Spring_Grass_02",["_name"],-18],[4,["_lpos"],-19,[1,2.233,-0.053,-6.763]],[4,["_lrot"],-20,[3,0,0.9762997845551298,0,0.21642257432533965]],[4,["_euler"],-21,[1,0,155.002,0]],[21,["_lpos"],[3,["66XNBtTBlAZ5bzE8MrLsJf","f5z4uqJIVez4BAfyRUc4VE"]],[1,0,0,0]]]],4]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-27,[13,"cam45TDUNK3p2XSUHrJoeH",1,[[6,"NorthernHeights_Spring_Grass_01",["_name"],-23],[4,["_lpos"],-24,[1,5.22,-0.147,3.642]],[4,["_lrot"],-25,[3,0,0,0,1]],[4,["_euler"],-26,[1,0,0,0]]]],5]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-32,[13,"b7FmEeJ9lJOZZUfiqEQy89",1,[[6,"NorthernHeights_Spring_Grass_03",["_name"],-28],[4,["_lpos"],-29,[1,7.581,-0.327,-2.761]],[4,["_lrot"],-30,[3,0,0.9999810210240028,0,-0.006160973282922603]],[4,["_euler"],-31,[1,0,180.706,0]]]],6]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-37,[13,"bcsE5AmCBHN7YpsTZ0YIAs",1,[[6,"NorthernHeights_Spring_Grass_04",["_name"],-33],[4,["_lpos"],-34,[1,-1.091,0.108,7.195]],[4,["_lrot"],-35,[3,0,0.2771469614832397,0,0.9608275400614866]],[4,["_euler"],-36,[1,0,32.18,0]]]],7]],[3,["76NM6rjWRY8oLoGULPrJgq"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["457FHn4QZasI12t5ee3DN6"]],[3,["6fhuG7pxRU/KQZlDjw1DJZ"]],[3,["6fhuG7pxRU/KQZlDjw1DJZ"]],[3,["457FHn4QZasI12t5ee3DN6"]],[10,0,null,1,[9,"76NM6rjWRY8oLoGULPrJgq",-38,[13,"51+8lkpMtCzInoIVRYP/h+",1,[[6,"SM_WindMillHelix_01",["_name"],6],[4,["_lpos"],6,[1,0,9.964,5.559]],[4,["_lrot"],6,[3,0,0,0,1]],[4,["_euler"],6,[1,0,0,0]],[21,["_lpos"],[3,["f2FIxf6opVx7TK3Lt2gPAN"]],[1,-0.084,-0.734,0.686]],[14,["_materials","0"],[3,["41ivsXhKhS/INZwBHtanJQ"]],1]]],0]],[10,0,null,1,[9,"59Dd/omQdUtaDIBCYbK0As",-39,[13,"e3NSjbh5VBHqZTmewgcrY5",1,[[8,"SM_WindMill_01",["_name"],[3,["59Dd/omQdUtaDIBCYbK0As"]]],[21,["_lpos"],[3,["59Dd/omQdUtaDIBCYbK0As"]],[1,0,0,0]],[21,["_lrot"],[3,["59Dd/omQdUtaDIBCYbK0As"]],[3,0,0,0,1]],[21,["_euler"],[3,["59Dd/omQdUtaDIBCYbK0As"]],[1,0,0,0]],[14,["_materials","0"],[3,["c5k4kXWTlQoLaXY0oJnf2S"]],3],[21,["_lrot"],[3,["10D8hmc/FQSJKisfVkIoyt"]],[3,-0.7071067811865475,-1.545431009634194e-8,-1.5454310096341944e-8,0.7071067811865474]],[21,["_euler"],[3,["10D8hmc/FQSJKisfVkIoyt"]],[1,-90.00000000000001,-0.0000025044781562438674,0]]]],2]],[10,0,null,2,[9,"457FHn4QZasI12t5ee3DN6",-40,[13,"66XNBtTBlAZ5bzE8MrLsJf",2,[[6,"SM_GrassSpring_02",["_name"],11],[4,["_lpos"],11,[1,0,0,0]],[4,["_lrot"],11,[3,0,0,0,1]],[4,["_euler"],11,[1,0,0,0]],[14,["_materials","0"],[3,["07qmKEfLhU4pGpiSm675m+"]],9]]],8]],[10,0,null,3,[9,"6fhuG7pxRU/KQZlDjw1DJZ",-41,[13,"66NEqxAp5Aa6zSm/hvMUvy",3,[[6,"SM_GrassSpring_01",["_name"],12],[4,["_lpos"],12,[1,0,0,0]],[4,["_lrot"],12,[3,0,0,0,1]],[4,["_euler"],12,[1,0,0,0]],[14,["_materials","0"],[3,["5cONv1WtNZi6AVNrHWEHbY"]],11]]],10]],[10,0,null,4,[9,"6fhuG7pxRU/KQZlDjw1DJZ",-42,[13,"66NEqxAp5Aa6zSm/hvMUvy",4,[[6,"SM_GrassSpring_01",["_name"],13],[4,["_lpos"],13,[1,0,0,0]],[4,["_lrot"],13,[3,0,0,0,1]],[4,["_euler"],13,[1,0,0,0]],[14,["_materials","0"],[3,["5cONv1WtNZi6AVNrHWEHbY"]],13]]],12]],[10,0,null,5,[9,"457FHn4QZasI12t5ee3DN6",-43,[13,"66XNBtTBlAZ5bzE8MrLsJf",5,[[6,"SM_GrassSpring_02",["_name"],14],[4,["_lpos"],14,[1,0,0,0]],[4,["_lrot"],14,[3,0,0,0,1]],[4,["_euler"],14,[1,0,0,0]],[14,["_materials","0"],[3,["07qmKEfLhU4pGpiSm675m+"]],15]]],14]]],0,[0,-1,15,0,-2,16,0,-3,2,0,-4,17,0,-5,3,0,-6,18,0,-7,4,0,-8,19,0,-9,5,0,-10,20,0,1,1,0,-1,15,0,-2,16,0,-3,2,0,-4,3,0,-5,4,0,-6,5,0,2,7,0,2,7,0,2,7,0,2,7,0,1,2,0,2,8,0,2,8,0,2,8,0,2,8,0,1,3,0,2,9,0,2,9,0,2,9,0,2,9,0,1,4,0,2,10,0,2,10,0,2,10,0,2,10,0,1,5,0,1,15,0,1,16,0,1,17,0,1,18,0,1,19,0,1,20,0,4,1,43],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,6,5,6,5,5,5,5,5,6,5,6,5,6,5,6],[516,6,517,6,269,270,270,269,181,6,186,6,186,6,181,6]],[[[12,"LevelTheme_Christmas"],[88,"LevelTheme_Christmas",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],31,32],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],33]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[28,29,30]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[518,16,49,127,128,129,130,127,128,129,130,127,128,129,130,127,128,129,130,271,272,273,271,272,273,274,275,276,274,275,276,519,17,520]],[[[12,"NorthernHeights_Christmas_DeadTree_01"],[11,"NorthernHeights_Christmas_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,29]],[[[37,"SM_SnowmanSpring_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_SnowmanSpring_01",[-2],[2,"c3TD40tENRmpNmA+1hIUc4",-1,0]],[28,"SM_SnowmanSpring_01",1,[[25,-3,[0,"5aEmTLcx5fuI6Xmv0h71iB"],[0],[23],1]],[2,"9f8IeAi3JVNoTVpzTIdmp2",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[521,522]],[[[29,".bin",3833465145,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45312,"length":6432,"count":1608,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45312,"count":944,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.6045483350753784,-0.6281715035438538,-0.36512747406959534],"maxPosition",8,[1,1.4126803874969482,1.5868172645568848,2.1033694744110107]]],-1],0,0,[],[],[]],[[[29,".bin",765973845,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31872,"length":3936,"count":984,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31872,"count":664,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4045594334602356,-0.8643168210983276,-0.4168999195098877],"maxPosition",8,[1,0.3146744966506958,0.9584450721740723,4.387985706329346]]],-1],0,0,[],[],[]],[[[36],[11,"SM_SugarCane_02",[-2],[2,"88E3jC1h1aSIWnkuZKL+tB",-1,0]],[28,"SM_SugarCane_02",1,[[25,-3,[0,"f3+XpPze5Uiq0peYaNFZkm"],[0],[23],1]],[2,"aaLXs0NqBXUL/UHw3Ubpuu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[523,524]],[[[37,"SM_SugarCane_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_Autumn_Snowman_01"],[11,"NorthernHeights_Autumn_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,18]],[[[71,"sfx_ui_final_meter_new_record_landing",".mp3",2.272653],-1],0,0,[],[],[]],[[[12,"NorthernHeights_01_Snowman_01"],[11,"NorthernHeights_01_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,8]],[[[12,"NorthernHeights_01_DeadTree_01"],[11,"NorthernHeights_01_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,8]],[[[119,[[129,[89,[-14,-15,-16,-17,-18,-19],[[188,-5,-4,[[72,1,[44,"IsGrounded"]]]],[188,-7,-6,[[72,1,[44,"IsGrounded"]]]],[478,0.2,0,-9,-8],[92,-11,-10],[92,-13,-12]],-3,-2,-1]]],[{},"IsButtonHeld",4,[121,1,false],"WhenLanding",4,[77,2],"WhenJump",4,[77,2],"IsGrounded",4,[121,1,false],"stuntPlay",4,[77,2],"stuntId",4,[479]]],[43,"IdleAir",[35,2]],[43,"SpeedAir",[35,3]],[43,"IdleGround",[35,0]],[43,"SpeedGround",[35,1]],[33,"Entry"],[316,"Grounded",[89,[-27,-28,-29,3,4],[[188,-23,4,[[84,[44,"IsButtonHeld"]]]],[188,-24,3,[[72,1,[44,"IsButtonHeld"]]]],[193,false,3,4,[[84,[44,"IsButtonHeld"]]]],[193,false,4,3,[[72,1,[44,"IsButtonHeld"]]]],[48,0.2,false,4,-25,[[72,1,[44,"IsGrounded"]]]],[48,0.2,false,3,-26,[[72,1,[44,"IsGrounded"]]]]],-22,-21,-20]],[33,"Entry"],[33,"Exit"],[316,"Aerial",[89,[-41,-42,-43,1,2,-44],[[188,-33,1,[[72,1,[44,"IsButtonHeld"]]]],[188,-34,2,[[84,[44,"IsButtonHeld"]]]],[48,0.2,false,2,1,[[72,1,[44,"IsButtonHeld"]]]],[48,0.1,false,1,2,[[84,[44,"IsButtonHeld"]]]],[48,0.1,false,2,-35,[[84,[44,"IsGrounded"]]]],[48,0.1,false,1,-36,[[84,[44,"IsGrounded"]]]],[312,0.05,-37,1,[[72,1,[44,"IsButtonHeld"]]]],[48,0.2,false,-39,-38,[[67,"stuntPlay"]]],[312,0.15,-40,2,[[84,[44,"IsButtonHeld"]]]]],-32,-31,-30]],[33,"Entry"],[33,"Exit"],[43,"Stunts",[487,"Stunts",[[488,[35,4]],[171,1,[35,5]],[171,2,[35,6]],[171,3,[35,7]],[171,4,[35,8]],[171,5,[35,9]],[171,6,[35,10]],[171,7,[35,11]]],[489,"stuntId"]]],[33,"Any"],[43,"Landing",[35,12]],[33,"Exit"],[33,"Any"],[33,"Any"]],0,[0,24,16,0,25,15,0,26,5,0,10,6,0,9,5,0,10,9,0,9,5,0,10,6,0,9,14,0,10,14,0,9,9,0,10,9,0,9,6,0,-1,5,0,-2,15,0,-3,16,0,-4,6,0,-5,9,0,-6,14,0,24,17,0,25,8,0,26,7,0,9,7,0,9,7,0,10,8,0,10,8,0,-1,7,0,-2,8,0,-3,17,0,24,13,0,25,11,0,26,10,0,9,10,0,9,10,0,10,11,0,10,11,0,9,12,0,10,12,0,9,13,0,9,12,0,-1,10,0,-2,11,0,-3,13,0,-6,12,44],[0,0,0,0,0,0,0,0,0,0,0,0,0],[15,15,15,15,15,15,15,15,15,15,15,15,15],[277,278,279,280,281,282,283,284,285,187,286,287,288]],[[[111,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_VERTEX_COLOR":true,"USE_TEXTURE":true,"USE_NOISE_1":true,"USE_ALPHA_TEST":true,"NOISE_1_BLEND_OVERLAY":true}],[[[{},"mainColor",8,[4,4292907899],"noise1TilingOffset",8,[2,1,1,0,0.5],"mainTexture",6,0,"noise1Texture",6,1]],11]]],0,0,[0,0,0],[16,80,8],[289,289,525]],[[[12,"Content Holder_Background"],[163,"Content Holder_Background",33554432,[-14,-15,-16],[[[5,-2,[0,"83409D6f1GO5q+/LJ3DxRx"],[5,414,896]],[90,45,100,100,1,-3,[0,"8aIyHf2ppH7IeA51V/m5E5"]],[248,false,-4,[0,"bbb11hvTBIDKyLKvhF+bXQ"],[2,3,4]],-5,[167,-7,[0,"ee2tro4KJIkawcKlYcm7c/"],-6],-8,[384,-12,-11,[-9,-10]],[490,-13,[0,"e2T04HocJKMYrypo9+8Sgk"]]],4,4,4,1,4,1,4,4],[2,"9e6juuKcFABoHGxdLQyahb",-1,0]],[26,"Background",33554432,1,[[5,-17,[0,"daUm9JF3dPd4bulFfYOYi3"],[5,414,896]],[39,0,-18,[0,"08QCCQL9ZEWanG32M/qWIK"],[4,4292759605],0],[50,45,60,60,-19,[0,"2dI6xgYGlP6b1F804eRNlm"]]],[2,"1cdZQOOpBIZ7IKO7l+C0uD",1,0]],[46,"Texture_Dots",33554432,1,[[5,-20,[0,"78yK9F/PhNmKC866DfHe1U"],[5,380,380]],[34,-21,[0,"cag0zhaa1L74xlw89HqGR9"],[4,4292362789],1],[244,33,-48,-68,1,-22,[0,"18bedpDkZG1bjbjYnv7xLn"]]],[2,"6dlGtaNmhAXb/eq74wkpRt",1,0],[1,65,326,0],[3,0,0,-0.6427876096865393,0.766044443118978],[1,0,0,-80]],[26,"Events",33554432,1,[[27,-23,[0,"7etF6VVKVGmbhAGkazYvdE"]],[74,5,-24,[0,"1aA7U1PH5Bxrg5RwiLt69W"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","fadeOut",1]]],[74,4,-25,[0,"8cKF6u2/NGhb4T5gdw3CZg"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","fadeOut",1]]],[74,2,-26,[0,"53RFFYrKZCqY3xDsmKw7iS"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","fadeIn",1]]]],[2,"a7xOxmYPtCW710AMf7NdzQ",1,0]],[97,1,[0,"78sKpwZsBH95TMQC1yNZu0"]],[82,1,[0,"d7ucTLGThHzpKyjR7ZA6Va"]]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-4,5,0,30,5,0,0,1,0,-6,6,0,-1,2,0,-2,3,0,36,6,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,4,1,26],[0,0,0,0,0,5],[3,3,-1,-2,-3,23],[21,102,526,237,238,527]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@e9a6d","back":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@40c10","left":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@8fd34","right":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@74afd","top":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@bb97f","bottom":"76a0df40-bdd5-4b49-a77a-cc1e280431de@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[12,"NorthernHeights_Spring_Grass_01"],[11,"NorthernHeights_Spring_Grass_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["6fhuG7pxRU/KQZlDjw1DJZ"]],[10,0,null,1,[9,"6fhuG7pxRU/KQZlDjw1DJZ",-4,[13,"66NEqxAp5Aa6zSm/hvMUvy",1,[[6,"SM_GrassSpring_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["5cONv1WtNZi6AVNrHWEHbY"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[186,6]],[[{"name":"UI_Button_SmallHex Shadow","rect":{"x":0,"y":0,"width":84,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":84},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[528]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[240,118,37]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295]]],11]]],0,0,[0],[8],[25]],[[[12,"NorthernHeights_Christmas_Snowman_01"],[11,"NorthernHeights_Christmas_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,29]],[[[37,"SM_Snowman_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Snowman_02",[-2],[2,"e7MPxqYFheCLNxaeWePfgS",-1,0]],[28,"SM_Snowman_02",1,[[25,-3,[0,"0amrvQ6DNbiIgE1v3q+99a"],[0],[23],1]],[2,"01AnJlv6pTp5yd2DdVoPjX",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[529,530]],[[[29,".bin",165562189,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":39984,"length":4836,"count":1209,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":39984,"count":833,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3411844968795776,-0.9146365523338318,-0.23210862278938293],"maxPosition",8,[1,1.3411846160888672,0.7924747467041016,2.1279773712158203]]],-1],0,0,[],[],[]],[[{"name":"UI_Button_Circle Blue","rect":{"x":1,"y":2,"width":109,"height":108},"offset":{"x":-0.5,"y":0},"originalSize":{"width":112,"height":112},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[531]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@e9a6d","back":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@40c10","left":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@8fd34","right":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@74afd","top":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@bb97f","bottom":"7bade5c9-fc44-4510-b2d1-fd895c5dc815@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[12,"NorthernHeights_Candy_Candy_01"],[11,"NorthernHeights_Candy_Candy_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["4a/4AY6p9eT79oiQIU0hR7"]],[10,0,null,1,[9,"4a/4AY6p9eT79oiQIU0hR7",-4,[13,"44uEVCjU5NEayUIlPmFP1j",1,[[6,"SM_Candy_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4C1svJkdWU4CHss9YPwxq"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[532,15]],[[[12,"NorthernHeights_05_Tree_01"],[11,"NorthernHeights_05_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,26]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[533,65,38]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[534]],[[{"name":"UI_Unlock Panel","rect":{"x":0,"y":0,"width":154,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":154,"height":66},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[535]],[[[12,"VFX_GachaRouletteResult"],[132,"VFX_GachaRouletteResult",8388608,[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15],[[[76,-2,[0,"52NFmyoYVHCIvSVowv/0No"]],[27,-3,[0,"167RSkrXRCPYowqsm5MMrg"]],-4],4,4,1],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0],[1,0,0,300]],[117,"VFX_ShadowBG",8388608,1,[[[27,-16,[0,"7dcRRZ0eBAnaEa69co5gzu"]],-17,[76,-18,[0,"27nuaU+nBGk7aQxDVBsF5i"]]],4,1,4],[2,"11scDNrXFHuIlgiS+ZAHOi",1,0]],[117,"VFX_Cross",8388608,1,[[[27,-19,[0,"0bLlTXVk5HMr2P7WUCcXo9"]],-20,[76,-21,[0,"d72j+XHGBL9IkkQWDSj9VO"]]],4,1,4],[2,"5c9YBt4npOTbK+nSq5Q3qH",1,0]],[117,"VFX_CrossSmall",8388608,1,[[[27,-22,[0,"b58KQZmHNP8466JPBt5KQk"]],-23,[76,-24,[0,"d6Ns36+mRNrKzh+Bmli6+Q"]]],4,1,4],[2,"3bLFg5zxNJE7QcZbWZxXp+",1,0]],[117,"VFX_Shotgun",8388608,1,[[[27,-25,[0,"d1a31eiX5JZby1c/TdNoZf"]],-26,[76,-27,[0,"7bQqHW9odJVLKKmy89aPcu"]]],4,1,4],[2,"e3zPuMDCRN16+37o1uUgLO",1,0]],[117,"VFX_ChargeUpWave",8388608,1,[[[27,-28,[0,"46UHlOhjpKhI1TKHwEYtW4"]],-29,[76,-30,[0,"efs7onZlxCtLvOQWm6cPqR"]]],4,1,4],[2,"a9YGF91vhGmbocGdQL8g8k",1,0]],[117,"VFX_Shine",8388608,1,[[[27,-31,[0,"9bGI+d3CFGuZsRwXociblL"]],-32,[76,-33,[0,"c0FqYxs+5KkJj2WPrWPSMP"]]],4,1,4],[2,"edTz+3MEZCaZzxnrmgjUco",1,0]],[117,"VFX_Bokeh",8388608,1,[[[27,-34,[0,"74tQzd12RCJrhO+oJIkEto"]],-35,[76,-36,[0,"41TN7+cjRJhLg65AzdypSq"]]],4,1,4],[2,"a66QV+fB1HcZKH5GZMUMKD",1,0]],[117,"VFX_RainbowRing",8388608,1,[[[27,-37,[0,"6baNELEmxLII3xa7A5x1KI"]],-38,[76,-39,[0,"f1pb5alIZJR5A9DpcZ6b8k"]]],4,1,4],[2,"4d4JYBz5dI4ITYuoB4RAHT",1,0]],[117,"VFX_ChargeUpMotes",8388608,1,[[-40,[76,-41,[0,"39kYG6zJNGi4JHyvmeCPlC"]],[27,-42,[0,"79EbltprRECbxjc1OLmMK2"]]],1,4,4],[2,"1an7gXFzpKVKlNAfrNTKI5",1,0]],[117,"VFX_CircleBlast",8388608,1,[[[27,-43,[0,"33r6M/hXNOYZF4FWllialD"]],-44,[76,-45,[0,"37p1KhImdATLwJi2E0FoxJ"]]],4,1,4],[2,"b6cyzb2epCNaM3UBk7oxgj",1,0]],[117,"VFX_OutMotes",8388608,1,[[-46,[76,-47,[0,"65jBgmDChJA7wDrChxD1Ph"]],[27,-48,[0,"83udzhQYBLw5Wc6uSs9Bee"]]],1,4,4],[2,"c01/kq4IFOR78uzTGargBI",1,0]],[253,3,false,2,[0,"35O36IpGFIvIzQmQJD/lX0"],[0],[184,[4,1879048192]],[7,5000],[1],[1],[7,5],[1],[1],[1],[1],[7,2],[1],[1],[1],[[98,[7,1]]],[57,true,[59,1,[100,[[58,0],[18,255,0.046875],[18,0,0.8459821428571428]]]]],[128,[1]],[185,[1],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-49],[61,1]],[183,1,false,3,[0,"2bAVmnY3ZOkKWnRaPZ4r6J"],[[2,null],6,0],[20],[7,110],[1],[1],[7,5],[1],[1],[85,3,6.283185307179586],[1],[7,0.4],[1],[1],[1],[[83,0.3,[7,1]]],[57,true,[59,1,[100,[[58,255],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,0.38461538461538464,0.6897435897435897,0.9974358974358974],[[47,2,0.1111111111111111,1.692063492063492,1.692063492063492],[47,2,0.7481481481481481,1.1304347826086967,1.1304347826086967],[47,2,1,-0.03903903903903968,-0.03903903903903968],[47,2,0.3,-3.8819444444444478,-3.8819444444444478]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[7,-0.08726646259971647]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,3]],[183,1,false,4,[0,"39+wrDtN1Pe5Mffis/iFK3"],[[4,null],6,0],[184,[4,2550136831]],[7,80],[1],[1],[7,5],[1],[1],[85,3,6.283185307179586],[1],[7,0.5],[1],[1],[1],[[83,0.3,[7,1]]],[57,true,[59,1,[100,[[58,255],[18,255,0.3303571428571429],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,0.7,1],[[47,2,0.6407407407407407,1.3436692506459949,1.3436692506459949],[47,2,1,0.058956916099772445,0.058956916099772445],[47,2,0.35555555555555557,-3.8819444444444478,-3.8819444444444478]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[7,0.8726646259971648]],[52,[1],[1]],[55,[1],[1],[20],[20],-51],[61,5]],[414,false,5,[0,"ffGd46D7xO+rqHokI2YuCo"],[[6,null],6,0],[20],[15,3,0.5,2],[1],[1],[15,3,100,800],[1],[1],[1],[1],[7,0.5],[1],[1],[1],[[83,0.3,[7,40]]],[57,true,[59,1,[78,[[189],[86,0.3214285714285714],[40,0.6629464285714286,[4,4294292084]],[40,0.9308035714285714,[4,4285998353]]],[[18,255,0.4263392857142857],[18,0,1]]]]],[427,true,1,15,360,[1]],[185,[1],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[453,0,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-52],[304,1,0.05]],[183,1,false,6,[0,"d6hCVI06hDJpR2CvERLDZn"],[[7,null],6,0],[20],[7,300],[1],[1],[7,5],[1],[1],[7,0.7853981633974483],[1],[7,0.2],[1],[1],[1],[[98,[7,1]]],[57,true,[59,1,[100,[[58,110],[18,255,0.3303571428571429],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,1],[[75,2,1,-1.9542483660130723,1,-1.9542483660130723,1],[255,2,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-53],[61,8]],[423,2.2,false,7,[0,"d3wj8t37FNWps9OPEr2iji"],[9],[20],[15,3,15,25],[1],[1],[7,5],[1],[1],[1],[7,0.2],[15,3,0.2,0.45],[1],[65,1,10,[32,[0,1],[[60,2,1],[47,2,0.2777777777777778,-1.191666666666667,-1.191666666666667]]]],[1],[57,true,[59,1,[100,[[58,0],[18,255,0.09375],[18,255,0.45089285714285715],[18,0,1]]]]],[226,true,3,50,[1]],[63,true,[66,1,[32,[0,0.07692307692307693,0.2,0.3153846153846154,1],[[60,2,0.5],[47,2,0.5,-0.03611111111111116,-0.03611111111111116],[60,2,1],[47,2,0.5111111111111111,-0.14444444444444424,-0.14444444444444424],[60,2,0.40370370370370373]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-54],[61,10]],[253,3,false,8,[0,"c1H9rALCJIZYp5fWTJdB0Y"],[11],[136,2,[4,712373225],[4,1325028056]],[15,3,30,50],[1],[1],[7,5],[1],[1],[1],[1],[15,3,1,2],[1],[1],[1],[[83,0.2,[7,5]]],[57,true,[59,1,[100,[[58,0],[18,255,0.4799107142857143],[18,0,1]]]]],[226,true,3,80,[1]],[63,true,[66,1,[32,[0,1],[[47,2,0.8814814814814815,0.24999999999999994,0.24999999999999994],[60,2,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-55],[61,12]],[183,1,false,9,[0,"f1N/lh1LJKw5+IIELmvHmI"],[[13,null],6,0],[20],[7,80],[1],[1],[7,5],[1],[1],[85,3,6.283185307179586],[1],[7,1.2],[1],[1],[1],[[83,0.35,[7,1]]],[57,true,[59,1,[100,[[58,0],[18,162,0.1741071428571429],[18,0,1]]]]],[128,[1]],[63,true,[65,1,2,[32,[0,0.2230769230769231,1],[[47,2,0.12222222222222222,4.5740740740740735,4.5740740740740735],[47,2,0.7851851851851852,0.9259259259259258,0.9259259259259258],[47,2,0.9740740740740741,-0.027253668763102364,-0.027253668763102364]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[7,1.7453292519943295]],[52,[1],[1]],[55,[1],[1],[20],[20],-56],[61,14]],[297,false,10,[0,"46h3ckrWVJXouWL61mBXX2"],[15],[20],[15,3,8,15],[1],[1],[7,-500],[1],[1],[1],[1],[7,0.2],[1],[1],[1],[[98,[7,30]]],[57,true,[59,1,[100,[[58,0],[18,255,0.1294642857142857],[18,255,0.5714285714285714],[18,0,1]]]]],[226,true,3,150,[1]],[63,true,[66,1,[32,[0,1],[[301,1,-1,1,-1,1],[302,-1,1,-1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-57],[305,0.01,16]],[183,1,false,11,[0,"2bAVmnY3ZOkKWnRaPZ4r6J"],[[17,null],6,0],[184,[4,2248146943]],[7,70],[1],[1],[7,5],[1],[1],[7,0.7853981633974483],[1],[7,0.3],[1],[1],[1],[[83,0.3,[7,1]]],[57,true,[59,1,[78,[[308,[4,4293505337]],[40,0.8303571428571428,[4,4284882976]]],[[58,255],[18,255,0.24553571428571433],[18,0,1]]]]],[128,[1]],[63,true,[65,1,10,[32,[0,0.3974358974358974,1],[[47,2,0.04074074074074074,3.6111111111111107,3.6111111111111107],[47,2,0.762962962962963,0.5252525252525247,0.5252525252525247],[47,2,1,0.15757575757575773,0.15757575757575773]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-58],[61,18]],[297,false,12,[0,"1eu9MLCahPVYxYsXcvB/t1"],[19],[20],[15,3,8,15],[1],[1],[15,3,100,400],[1],[1],[1],[1],[15,3,0.5,1],[1],[1],[1],[[83,0.3,[7,30]]],[57,true,[59,1,[100,[[58,0],[18,255,0.1294642857142857],[18,0,1]]]]],[226,true,3,50,[1]],[63,true,[66,1,[32,[0,1],[[301,1,-1,1,-1,1],[302,-1,1,-1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-59],[305,0.01,20]],[183,1,false,1,[0,"2bAVmnY3ZOkKWnRaPZ4r6J"],[[21,null],6,0],[20],[7,70],[1],[1],[7,5],[1],[1],[7,0.7853981633974483],[1],[7,0.41],[1],[1],[1],[[83,0.3,[7,1]]],[57,true,[59,1,[100,[[58,255],[18,255,0.24553571428571433],[18,0,1]]]]],[128,[1]],[63,true,[65,1,3,[32,[0,0.29743589743589743,1],[[47,2,0.20370370370370372,3.6111111111111107,3.6111111111111107],[47,2,0.7518518518518519,0.5252525252525247,0.5252525252525247],[47,2,1,0.15757575757575773,0.15757575757575773]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-60],[61,22]]],0,[0,1,1,0,0,1,0,0,1,0,-3,24,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,11,0,-11,12,0,0,2,0,-2,13,0,0,2,0,0,3,0,-2,14,0,0,3,0,0,4,0,-2,15,0,0,4,0,0,5,0,-2,16,0,0,5,0,0,6,0,-2,17,0,0,6,0,0,7,0,-2,18,0,0,7,0,0,8,0,-2,19,0,0,8,0,0,9,0,-2,20,0,0,9,0,-1,21,0,0,10,0,0,10,0,0,11,0,-2,22,0,0,11,0,-1,23,0,0,12,0,0,12,0,18,13,0,18,14,0,18,15,0,18,16,0,18,17,0,18,18,0,18,19,0,18,20,0,18,21,0,18,22,0,18,23,0,18,24,0,4,1,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,17,-1,17,-1,17,-1,-1,17,-1,17,-1,17,-1,17,-1,17,-1,17,-1,17,-1,17],[100,78,536,236,214,169,73,131,82,30,27,131,82,537,268,100,78,131,82,100,78,131,82]],[[[12,"NorthernHeights_02_Cabin_01"],[11,"NorthernHeights_02_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"3e/hBAwflBu6uuY6UH/ZVb",1,[[6,"NorthernHeights_02_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,1.016,0,5.283]],[4,["_lrot"],-12,[3,0,0.2508277574033399,0,0.9680317330108612]],[4,["_euler"],-13,[1,0,29.053,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"f3YoNVwOROj601YBaBJuA2",1,[[6,"NorthernHeights_02_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.843,0,-5.813]],[4,["_lrot"],-17,[3,0,-0.23879616595220302,0,0.971069714864246]],[4,["_euler"],-18,[1,0,-27.631,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[10,0,null,5,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[72,19,132,132,10,19,10,19]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@e9a6d","back":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@40c10","left":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@8fd34","right":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@74afd","top":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@bb97f","bottom":"7f4b762a-fa38-4210-8253-15984174091a@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[37,"SM_ChristmasTree_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",2937320971,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":166656,"length":19968,"count":4992,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":166656,"count":3472,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.250575065612793,-1.250575304031372,-2.8358912467956543],"maxPosition",8,[1,1.2505755424499512,1.250575304031372,5.556077003479004]]],-1],0,0,[],[],[]],[[[36],[11,"SM_ChristmasTree_03",[-2],[2,"8aCwpwIidTfapVI9+4yYzg",-1,0]],[28,"SM_ChristmasTree_03",1,[[25,-3,[0,"67QejydqldV72F0E50XGu2"],[0],[23],1]],[2,"91yyIVhHtYN7hmIQ+HxTq3",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[538,539]],[[[12,"NorthernHeights_Autumn_Igloo_01"],[11,"NorthernHeights_Autumn_Igloo_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,18]],[[[12,"Button_StoreItem"],[102,"Button_StoreItem",33554432,[-16,-17,-18,-19,-20],[[5,-2,[0,"bdBbrqJhxOXLbWZevCeLye"],[5,82,78]],[39,0,-3,[0,"4dokyv0s1AiYOCyTh6aPg8"],[4,4294563521],16],[110,3,0.9,-6,[0,"da9uwF49RCML8GEv38xVw9"],[[42,"89809SEwNdEF7xmaZgSjTo+","onClick",-5]],-4,17],[292,-12,[0,"82JyJakLtH75L9OWwYnz0S"],-11,-10,-9,-8,-7],[134,false,-13,[0,"97dhXadUZE7JLXHGvtGjGW"],[18,19,20,21,22,23,24,25,26,27],28],[224,-14,[0,"483EJ0wm1CNowZr7HKt1gE"],29],[181,"sfx_ui_generic_tap",null,-15,[0,"4ciBo+QRxANa+hVPNHnce8"]]],[2,"deLm+/0aROKZZY5ReLqvTL",-1,0]],[68,"Button_Outline",33554432,1,[-24,-25,-26],[[5,-21,[0,"86cOer53xJoJDDlYJxEJsY"],[5,82,78]],[31,0,-22,[0,"d1vcRrKodKLqBt5NLxgNUe"],4],[50,45,92,88,-23,[0,"87s3uAehxBh5GpwsKEhs83"]]],[2,"afSGf5Yo9HWaLWF47Bl+yS",1,0]],[273,"PivotGachaItems",33554432,1,[-29,-30,-31,-32],[[[27,-27,[0,"b7KQulW8NOi6P85V2ybxGS"]],-28],4,1],[2,"e4vHjpzSRLV7kXDQDGwSlJ",1,0]],[49,"Status_Panel (New)",33554432,1,[-36,-37,-38],[[5,-33,[0,"c8/MYQXC5GyJRAo9UCXkpS"],[5,35,34]],[39,0,-34,[0,"aa0FumunpFLJxIHUahSAN4"],[4,4281539080],15],[279,false,45,45.494,1.5060000000000002,37.25,6.75,84,36,-35,[0,"3dB9iHEtRKO4wt14mhwjZE"]]],[2,"ae8vdAzYVHcqUONQLT0JDP",1,0],[1,23.164,-16.654,0]],[26,"Button_Color",33554432,2,[[5,-39,[0,"e4Aotze09OdaWEYrW1p+Fp"],[5,82,78]],[39,0,-40,[0,"78fCtdIChIBY6mhLAQcyuI"],[4,4294632254],2],[50,45,92,88,-41,[0,"72SMRf8RRP8IIivbs2evOP"]]],[2,"feNzbL3ExGypUdek3+lSKq",1,0]],[26,"Gacha Color",33554432,2,[[5,-42,[0,"51MDW1tMFNKIWETtefy4ZU"],[5,82,78]],[39,0,-43,[0,"48+iIOdJ9MeJGIrfZW8tMV"],[4,16442174],3],[50,45,92,88,-44,[0,"8c20ICiQRN36u03zFOPbfV"]]],[2,"5a6x1C8DlIr4x/YC5EbjQX",1,0]],[172,"PivotBodyColors",8388608,3,[[27,-45,[0,"53DSRQ0VFLLZmFumC2KR2z"]],[118,true,-46,[0,"7au4ELbgxEVrMRMYhYaun7"],[7],8]],[2,"62v0d0A8BKvaQKPTuGTwQI",1,0],[1,-4,-7,-1.5],[3,0.2355291986754818,0.057138667278520815,0.08925437835773739,0.9660718530300393],[1,47.99999999999999,48,47.99999999999999],[1,26.999999999999982,4,11.499999999999998]],[172,"PivotSnowboards",8388608,3,[[27,-47,[0,"f0MAXKAd5DZYY5Ffp2NHGp"]],[118,true,-48,[0,"00J3aMlStKkKm+GyWKy7t+"],[9],10]],[2,"4eV7tkEDdExobF9krvZNAe",1,0],[1,-20.081999999999994,23.619000000000028,-5.182],[3,0.4770174817116392,0.8314580111451306,0.2171783212747037,-0.18429724526528177],[1,30.000000000000004,29.999999999999996,30.000000000000007],[1,-49.999999999999986,-132.879,45.495000000000005]],[26,"Gacha Status_Panel",33554432,4,[[5,-49,[0,"c9fzJCWjZJTLFyrVZfX58+"],[5,35,34]],[39,0,-50,[0,"a6szV2PjlM2YoWfCHg+51t"],[4,11482590],12],[50,45,84,36,-51,[0,"b5bAp3TPdGMpW//jkBKR4K"]]],[2,"dcKJ3ghVJGDJr1rTh8gziE",1,0]],[26,"Gacha Color_Outline2",33554432,1,[[5,-52,[0,"02CUZ+gmtG0priLBagMaMT"],[5,82,78]],[39,0,-53,[0,"4dokyv0s1AiYOCyTh6aPg8"],[4,11482590],0]],[2,"17WlK7jCVO1r9+75Xr/g53",1,0]],[26,"Gacha Color_Outline 1",33554432,2,[[5,-54,[0,"0cE20Gh2pKyqoB68Hje2Gz"],[5,84,80]],[39,0,-55,[0,"23VehhZ61KF7Yyu8iN3ohg"],[4,11482590],1]],[2,"f2XdCkFk9DGb+nYIysfiUM",1,0]],[172,"PivotHelmet",8388608,3,[[118,true,-56,[0,"4fUIHWoThIpb6UE1d5sGKN"],[5],6]],[2,"24dcLJtkZCX5e2ZOMm2NqW",1,0],[1,-5.699999999999989,-2.8000000000000114,7.4],[3,0.21390732870680887,0.3229411149012301,0.15654743068252022,0.9085403639787113],[1,48,48.00000000000001,48.00000000000001],[1,18.50000000000001,35.00000000000001,25.000000000000004]],[26,"PivotStunts",33554432,3,[[5,-57,[0,"06TLk0ZKRJiJghyV63Cd2a"],[5,82,78]]],[2,"a1elaUK/dJjrFDvcPbrF51",1,0]],[141,"Icon_Lock",false,33554432,4,[[5,-58,[0,"59yGvKc21DQbANWgY+TUE4"],[5,24,30]],[39,0,-59,[0,"01v4YzCCFN1IpyqS7r3Lj6"],[4,4293979371],13]],[2,"3aRt68piVJ3IqVZb8z4pF+",1,0],[1,-1.463,1.93,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[46,"Icon_Equipped",33554432,4,[[5,-60,[0,"5bxDNwUKhNB4uqaX6bVoJr"],[5,26,26]],[96,0,false,-61,[0,"7euain+G1MtpsnQTBVv9QN"],14]],[2,"67TS86WDtJyJKagkXE0bbw",1,0],[1,-1.677,0.498,0],[3,0,0,0.052335956242943835,0.9986295347545738],[1,0,0,6]],[26,"Pivot_VFX_GachaRouletteResult",33554432,1,[[27,-62,[0,"7aZ21zEzdBULIiWzUpetuI"]]],[2,"f3IiDXEpRBFoZb9XI3eFR2",1,0]],[166,3,[0,"f9Dh3gMItF1q8hqhs1ZkFz"],[11]]],0,[0,1,1,0,0,1,0,0,1,0,21,5,0,14,1,0,0,1,0,44,17,0,45,13,0,37,8,0,46,7,0,38,12,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,10,0,-2,2,0,-3,16,0,-4,3,0,-5,4,0,0,2,0,0,2,0,0,2,0,-1,11,0,-2,5,0,-3,6,0,0,3,0,-2,17,0,-1,12,0,-2,7,0,-3,8,0,-4,13,0,0,4,0,0,4,0,0,4,0,-1,9,0,-2,14,0,-3,15,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,4,1,62],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17],[3,3,3,3,3,-1,19,-1,19,-1,19,-1,3,3,3,3,3,22,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,19,23,19],[46,44,45,45,44,93,93,94,94,95,95,52,46,197,198,46,46,46,154,155,156,157,158,159,52,160,161,162,52,199,52]],[[[12,"SM_Number_0"],[3,["1eHxuz/7RfdrODjHIAvRs8"]],[11,"SM_Number_0",[-3],[16,"1eHxuz/7RfdrODjHIAvRs8",-2,0,[-1]]],[10,0,null,2,[9,"1eHxuz/7RfdrODjHIAvRs8",-4,[13,"23WUhpS7FInLxfGSGVSSkp",2,[[6,"SM_Number_0",["_name"],1],[4,["_lpos"],1,[1,0,0,0]],[4,["_lrot"],1,[3,0,0,0,1]],[4,["_euler"],1,[1,0,0,0]],[14,["_materials","0"],[3,["6e0J0kvcJf9bb09yCq+ImV"]],1],[4,["_lscale"],1,[1,1.5,1.5,1.5]]]],0]]],0,[0,-1,3,0,1,2,0,-1,3,0,1,3,0,4,2,4],[0,0],[5,6],[540,541]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[542,65,38]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@e9a6d","back":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@40c10","left":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@8fd34","right":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@74afd","top":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@bb97f","bottom":"81cf78b2-36f5-47aa-8aa0-b9d9a618e158@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[29,".bin",3803232648,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6480,"length":1596,"count":399,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6480,"count":135,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2414374202489853,0.00004646197339752689,0],"maxPosition",8,[1,0.2625024914741516,0.6355770826339722,0]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_01_Logs_01"],[11,"NorthernHeights_01_Logs_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"6dgP8j2aRZD5EHMUZgqMY7",-4,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[10,8]],[[[37,"SM_ChristmasTree_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",710147160,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":155136,"length":18624,"count":4656,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":155136,"count":3232,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0649864673614502,-1.0750924348831177,-2.8358912467956543],"maxPosition",8,[1,1.1451040506362915,1.0650935173034668,4.490630149841309]]],-1],0,0,[],[],[]],[[[36],[11,"SM_ChristmasTree_02",[-2],[2,"0aET2r7h9UpJXfdvFoP71m",-1,0]],[28,"SM_ChristmasTree_02",1,[[25,-3,[0,"3aJ6rKJiFSgIPbkXAwg1Vg"],[0],[23],1]],[2,"0afPrPnipWPJdPSGkXOubG",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[543,544]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.55,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.05,0.01,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[290,290,38]],[[[12,"CharacterModelGameplay"],[196,0,null,[9,"83yYEVbixRL5ZsYAVRZfdA",-13,[215,"9daIO1Ul1IhoMlxV010IKU",-12,[[234,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[-10,-11]]],[[190,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[[224,-9,[0,"2fD/ivLH1GL7As29Aa3OCz"],1]]]],[[8,"SK_Armature",["_name"],[3,["83yYEVbixRL5ZsYAVRZfdA"]]],[21,["_lpos"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[1,0,0,0]],[21,["_lrot"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[3,0,-0.7071067811865475,0,0.7071067811865476]],[21,["_euler"],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[1,0,-90,0]],[14,["_materials","0"],[3,["46r2eLwu1fPqtmJsINAqA0"]],2],[177,["_skinningRoot"],[3,["46r2eLwu1fPqtmJsINAqA0"]],-1],[8,false,["playOnLoad"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[8,2,["_sockets","length"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[216,["_sockets","0"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[162,"SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck/DEF-Head",-2]],[216,["_sockets","1"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[162,"SK_Armature/DEF-ROOT/PVT-Board",-3]],[8,false,["_useBakedAnimation"],[3,["b2Q11wxwRRY7wG7RK/G5o9"]]],[14,["_materials","0"],[3,["aajcY4kBBd8476dCQyztSa"]],3],[177,["_skinningRoot"],[3,["aajcY4kBBd8476dCQyztSa"]],-4],[8,2,["_layer"],[3,["83yYEVbixRL5ZsYAVRZfdA"]]],[8,2,["_layer"],[3,["1aETFLNnpUyrzqsbYSX1oY"]]],[8,2,["_layer"],[3,["45WIlVUKBYCI7aqXsWOzZ5"]]],[8,2,["_layer"],[3,["03l3u1nLha8bBAAuWzbbRD"]]],[8,2,["_layer"],[3,["28tzY+16NSbom2b3ja/8Zm"]]],[8,2,["_layer"],[3,["b7M7VQAEhTH7iAwIqCbaYM"]]],[8,2,["_layer"],[3,["7f6NkFTBNYebHPfkjoZKJv"]]],[8,2,["_layer"],[3,["57j9gDVJRRZ7RmnbipMl2X"]]],[8,2,["_layer"],[3,["689zN6A5tUioN/MRmMO7yK"]]],[8,2,["_layer"],[3,["06OhWVSk5R44gZF07OECn/"]]],[8,2,["_layer"],[3,["b8zRda/PdbWY2GLaNkeEhA"]]],[8,2,["_layer"],[3,["d9XANdQOxcE5IqxBYg1/rn"]]],[8,2,["_layer"],[3,["06LTyPm9JclpfeLHEX1O+z"]]],[8,2,["_layer"],[3,["53TAej7+FRmbGIvuvb/Zzu"]]],[8,2,["_layer"],[3,["4e9DpEXF9TL6tLR/XciP3n"]]],[8,2,["_layer"],[3,["09DB4i5ulTdbTt0g2ov7ku"]]],[8,2,["_layer"],[3,["c04GHtL+dVjKGb5dxGJA+7"]]],[8,2,["_layer"],[3,["f2sJnjZ9ZWXaAEVrrydpZZ"]]],[8,2,["_layer"],[3,["6f8P+ZWLNcd4rakEQ8xJu4"]]],[8,2,["_layer"],[3,["4bir84c9FchY1htP3/5J2X"]]],[8,2,["_layer"],[3,["dcb+0Q7BxVg4ket6gwkyll"]]],[8,2,["_layer"],[3,["7aednaSMVfI6OYLybTU8RA"]]],[8,2,["_layer"],[3,["16hK99H51dUpgx6wYg1C56"]]],[8,2,["_layer"],[3,["5baf56MBZacZM+3pibQIE9"]]],[8,2,["_layer"],[3,["984JbYsVtXCLHtMqVz842U"]]],[8,2,["_layer"],[3,["7fOX3jZYFXOq+WneTm8lpD"]]],[8,2,["_layer"],[3,["f47v0tKP9Rm52QYsFN/Gr8"]]],[8,2,["_layer"],[3,["524q9MP1xb0Is7hyL2iez0"]]],[8,2,["_layer"],[3,["d0YBoMtI9fTrRPAaV2NbrL"]]],[8,2,["_layer"],[3,["a4z86+tzxePbJS4RfxLozo"]]],[8,2,["_layer"],[3,["0e0ilYB3xcMbMcFRF3NKsQ"]]],[8,2,["_layer"],[3,["21v622JsBfxK2vufo9CfyB"]]],[8,2,["_layer"],[3,["f6jc1Xdy5U7oJPQUVC51WD"]]],[8,2,["_layer"],[3,["10RV4J6d1Zro60XwIzhLKx"]]],[8,2,["_layer"],[3,["53s5LGERlUlqXbf6P8N6YT"]]],[8,2,["_layer"],[3,["8bkfWCamhafbHlO7EXp3Gj"]]],[14,["_materials","0"],[3,["230TJNZx9QzpP8wIPNEhjb"]],4],[177,["_skinningRoot"],[3,["230TJNZx9QzpP8wIPNEhjb"]],-5],[8,"SM_Character",["_name"],[3,["a2A9o067JcCKm9sFsBzm9E"]]],[21,["_lrot"],[3,["a2A9o067JcCKm9sFsBzm9E"]],[3,-0.7071067811865475,-1.545431009634194e-8,-1.5454310096341944e-8,0.7071067811865474]],[21,["_euler"],[3,["a2A9o067JcCKm9sFsBzm9E"]],[1,-90.00000000000001,-0.0000025044781562438674,0]],[6,"SM_Helmet_01",["_name"],-6],[4,["_lrot"],-7,[3,-0.7071067811865475,-1.545431009634194e-8,-1.5454310096341944e-8,0.7071067811865474]],[4,["_euler"],-8,[1,-90.00000000000001,-0.0000025044781562438674,0]]]],0]],[349,"CharacterModelGameplay",2,[1],[-18],[241,"e7UKk3shNCNb06y1Oa6Api",-17,0,[[138,["_pivotHelmet"],-14,1,[3,["97bFYTxOdOL7ZPYDlDGVB3"]]],[138,["_pivotSnowboard"],-15,1,[3,["cflXNrgvpMNoqkAVrPd+Cz"]]],[138,["_body"],-16,1,[3,["230TJNZx9QzpP8wIPNEhjb"]]]],[1]]],[317,2,[0,"df0Q2SCMFLsZjgxjuwF7Ks"]],[208,"DEF-Head Socket",2,1,[2,"97bFYTxOdOL7ZPYDlDGVB3",2,0],[1,0.21121055500876035,2.469569303796788,0.03970563571509993],[3,0.16508034576965108,0.6078599253230407,0.15089803513336153,0.7618953820580042],[1,4.327227328887806,76.18766046802284,25.50745202584509]],[209,"PVT-Board Socket",2,1,[2,"cflXNrgvpMNoqkAVrPd+Cz",2,0],[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262],[1,-90,0.00022152757132124867,-4.853141298619868e-20]],[3,["f54rDv1mZTBrSbrcqNBSjV"]]],0,[0,6,1,0,14,4,0,14,5,0,6,1,0,6,1,0,2,6,0,2,6,0,2,6,0,0,1,0,-1,4,0,-2,5,0,39,2,0,1,1,0,28,3,0,28,3,0,28,3,0,1,2,0,-1,3,0,4,2,1,11,2,3,37,5,3,38,4,18],[0,0,0,0,0],[5,23,6,6,6],[99,101,34,34,34]],[[[71,"sfx_player_smooth_bonus_3",".mp3",0.574694],-1],0,0,[],[],[]],[[[71,"sfx_player_crash",".mp3",1.697959],-1],0,0,[],[],[]],[[[12,"NorthernHeights_05_Igloo"],[11,"NorthernHeights_05_Igloo",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,26]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[291,25]],[[[12,"StorePage"],[102,"StorePage",33554432,[-6,-7,-8,-9,-10,-11],[[278,"pageView-horizontal<UITransform>",-4,[0,"ed35PA+BZLG67nNeabFc2O"],[5,414,220]],[402,3,60,60,20,20,20,2,3,-5,[0,"881qzPAkpN9qALpRl5Jq7G"]]],[16,"4e3EJnFkJGZZ9AUvceVi9P",-3,0,[-1,-2]]],[69,"Button_ShopItem 02",33554432,1,[-16,-17,-18,-19],[[5,-12,[0,"12atnd1/ZN0Y5T+v5sJ53U"],[5,82,78]],[31,0,-13,[0,"4516/nEM1GNLWKfmsyUS5M"],6],[202,3,0.9,-15,[0,"71mtPqkxFK1LTX7DjvBcFJ"],-14,7]],[2,"dfCfRvAqRPlopuJ9d3x7qB",1,0],[1,-4,51,0],[3,0,0,-0.08715574274765818,0.9961946980917455],[1,0,0,-10.000000000000002]],[69,"Button_ShopItem 03",33554432,1,[-24,-25,-26,-27],[[5,-20,[0,"bfRsA302dDXqJ2A4C+efCO"],[5,82,78]],[31,0,-21,[0,"cbA5ImlxFKqpwjOXSHPgyy"],13],[202,3,0.9,-23,[0,"04uQpEX2NIHbd53TEbIYG2"],-22,14]],[2,"d6ZiB5iStHFZ3pVagpgpsD",1,0],[1,98,51,0],[3,0,0,-0.08715574274765818,0.9961946980917455],[1,0,0,-10.000000000000002]],[69,"Button_ShopItem 04",33554432,1,[-32,-33,-34,-35],[[5,-28,[0,"a5IpKJAW5Dm4iKo7GpSU1n"],[5,82,78]],[31,0,-29,[0,"93+v+H6uxLWaFnoDr/VRHw"],20],[202,3,0.9,-31,[0,"84WCZ3dp5DJq4Tr8qIQckV"],-30,21]],[2,"33mxDK9hpLo43JClUeeCpT",1,0],[1,-106,-47,0],[3,0,0,-0.08715574274765818,0.9961946980917455],[1,0,0,-10.000000000000002]],[69,"Button_ShopItem 05",33554432,1,[-40,-41,-42,-43],[[5,-36,[0,"51jSVx4LxCOai8bSotdRWw"],[5,82,78]],[31,0,-37,[0,"787RdNN9VK6r2F9iJ9qDbi"],27],[202,3,0.9,-39,[0,"24Ti6ZmvpDWLemAHc7sJky"],-38,28]],[2,"b3uQpLgOJFoqziVQ6bap6q",1,0],[1,-4,-47,0],[3,0,0,-0.08715574274765818,0.9961946980917455],[1,0,0,-10.000000000000002]],[69,"Button_ShopItem 06",33554432,1,[-48,-49,-50,-51],[[5,-44,[0,"99oRy3as5CH64zgS5DH3dB"],[5,82,78]],[31,0,-45,[0,"dcn+TTiUdNNLqCZX+wt55y"],34],[202,3,0.9,-47,[0,"bakTiQCvFGkoGOFcdh9UPw"],-46,35]],[2,"2aHxhrwLRHjoJBq4pMrpJX",1,0],[1,98,-47,0],[3,0,0,-0.08715574274765818,0.9961946980917455],[1,0,0,-10.000000000000002]],[26,"Button_Color",33554432,2,[[5,-52,[0,"ceVXAfix5P/omsgc36+LfM"],[5,82,78]],[39,0,-53,[0,"7bZtPqYSBCqp2fNt0MRGag"],[4,4294400626],2],[50,45,92,88,-54,[0,"94lhLgHZVDHqI9QryJ1HbY"]]],[2,"ffN6VuqPBPr5qGrY1Ei6cD",1,0]],[211,"Equip_Panel",false,33554432,2,[-58],[[5,-55,[0,"e5WBDXQCtCjrkhd/8h5llF"],[5,84,36]],[34,-56,[0,"c5tw6tYJBLXKakDahvA5B7"],[4,4281539080],5],[165,45,-0.6060000000000016,8.606000000000002,28.931,23.069,84,36,-57,[0,"4bT60J43VDMZoFpGOHaXY/"]]],[2,"137TPiEQBG1L18UPk1LRK4",1,0],[1,-4.606,-2.931,0]],[26,"Button_Color",33554432,3,[[5,-59,[0,"9dvEaXfYhGnKlWaTWlczHo"],[5,82,78]],[39,0,-60,[0,"36AWrYHq9CTp/l7Izy+Q9f"],[4,4294400626],9],[50,45,92,88,-61,[0,"04lMYiB19EnIqrOY9hXTYE"]]],[2,"9dRHGhj8RBxpprU5dLWLfQ",1,0]],[211,"Equip_Panel",false,33554432,3,[-65],[[5,-62,[0,"ecg9jowopEJI1/GIupClHz"],[5,84,36]],[34,-63,[0,"c6kGNAjlZN2rzmnk79B35j"],[4,4281539080],12],[165,45,-0.6060000000000016,8.606000000000002,28.931,23.069,84,36,-64,[0,"23kP+8Sf5EPoaV1DcrbkoH"]]],[2,"adYrr4+N1Io4A0aF1ecLVz",1,0],[1,-4.606,-2.931,0]],[26,"Button_Color",33554432,4,[[5,-66,[0,"c4fqqM7KBF5oL9HXaMszi7"],[5,82,78]],[39,0,-67,[0,"fbrzI41BNAGY02FTWzjMgt"],[4,4294400626],16],[50,45,92,88,-68,[0,"75nB3FWblDHastR2Gt6gkZ"]]],[2,"44NEf6cllIJ7MqatLJelpl",1,0]],[211,"Equip_Panel",false,33554432,4,[-72],[[5,-69,[0,"eded9hsMRCz7HcGg/+Cet0"],[5,84,36]],[34,-70,[0,"8ck32YVD9NZpvDbd4cd+w5"],[4,4281539080],19],[165,45,-0.6060000000000016,8.606000000000002,28.931,23.069,84,36,-71,[0,"6b1JwqvddHBrRrdbJxO3Ef"]]],[2,"68SAuPHKtFZppwPd2ZZur9",1,0],[1,-4.606,-2.931,0]],[26,"Button_Color",33554432,5,[[5,-73,[0,"86X5GoN1JAoopASOVRIvUh"],[5,82,78]],[39,0,-74,[0,"d9yP/N7ARDOL0nd5xA+XNG"],[4,4294400626],23],[50,45,92,88,-75,[0,"40PdsUQ1FBpZStFdGvR5mz"]]],[2,"25WjpIARRGxookU2ReIo1S",1,0]],[49,"Equip_Panel",33554432,5,[-79],[[5,-76,[0,"d6KXQ5IW9IcJ3vbGr+yxey"],[5,74,26]],[39,0,-77,[0,"51Hf2F/tdAU6FdMu1AbV98"],[4,4281539080],26],[165,45,-0.6060000000000016,8.606000000000002,28.931,23.069,84,36,-78,[0,"93pt4CvA5CPo4JqYBu3taH"]]],[2,"495PpujvdPkZv+E6lmiVde",1,0],[1,-4.606000000000002,-2.931000000000001,0]],[26,"Button_Color",33554432,6,[[5,-80,[0,"02WAXm5gpPzaylr5qekGeC"],[5,82,78]],[39,0,-81,[0,"06pfPY+BVHsrh9NB1O5zfJ"],[4,4294400626],30],[50,45,92,88,-82,[0,"4b/wKB5XZEfqyGWEwRLSc6"]]],[2,"4eYMVgvhlKbJrQPkOW8WbJ",1,0]],[211,"Equip_Panel",false,33554432,6,[-86],[[5,-83,[0,"4b8G/splVNn5IGoA4984JY"],[5,84,36]],[34,-84,[0,"ebplKK+7JNLIlWtlmp6Yhj"],[4,4281539080],33],[165,45,-0.6060000000000016,8.606000000000002,28.931,23.069,84,36,-85,[0,"3a8OTkP0NK3YuQ0xpxAxpo"]]],[2,"29H7+Z92pKYqvXXB0rtXdQ",1,0],[1,-4.606,-2.931,0]],[10,0,{},1,[9,"deLm+/0aROKZZY5ReLqvTL",-87,[13,"d6PFYFiIVKWq7q9/6REn/D",1,[[8,"Button_ShopItem 01",["_name"],[3,["deLm+/0aROKZZY5ReLqvTL"]]],[21,["_lpos"],[3,["deLm+/0aROKZZY5ReLqvTL"]],[1,-106,51,0]],[21,["_lrot"],[3,["deLm+/0aROKZZY5ReLqvTL"]],[3,0,0,0,1]],[21,["_euler"],[3,["deLm+/0aROKZZY5ReLqvTL"]],[1,0,0,0]],[8,"Button_Color",["_name"],[3,["feNzbL3ExGypUdek3+lSKq"]]],[8,"Button_Outline",["_name"],[3,["afSGf5Yo9HWaLWF47Bl+yS"]]]]],0]],[26,"Button_Outline",33554432,2,[[5,-88,[0,"ccsD+45+5GtbvqITuov2Ys"],[5,82,78]],[31,0,-89,[0,"6dNvsXwElEoZoahOHspcRE"],1],[50,45,92,88,-90,[0,"afPxrF1LBNSJoAqjejxeaW"]]],[2,"07n8gznYZGyrpTkTI6JKaO",1,0]],[26,"Button_Outline",33554432,3,[[5,-91,[0,"c8GnV1tbNBKqdHd/V4oPYU"],[5,82,78]],[31,0,-92,[0,"34LGtHFiJEl5hCrN+5cAkV"],8],[50,45,92,88,-93,[0,"56sz1bEXBBdaMVfNdVz+bU"]]],[2,"55d/vEBe5AGLM/wcc2UeoO",1,0]],[26,"Button_Outline",33554432,4,[[5,-94,[0,"5cOiRx+8RPGJYouxsYlZjR"],[5,82,78]],[31,0,-95,[0,"a01HUy5ddMBK8NIlDpwwDJ"],15],[50,45,92,88,-96,[0,"84bQS6UvZODJHpa2nhlswO"]]],[2,"d38mabiahNWos/94NtYGVU",1,0]],[26,"Button_Outline",33554432,5,[[5,-97,[0,"1bIvSQP1BJYpqbIpzNe8y4"],[5,82,78]],[31,0,-98,[0,"15WfqJvv5CmLkXPQVgVv2h"],22],[50,45,92,88,-99,[0,"021YF/PiRLPJLQ5Kqfj2Qd"]]],[2,"e5PNSW6sFI5LvsxkuSYw/N",1,0]],[26,"Button_Outline",33554432,6,[[5,-100,[0,"e1zoB7AftH4IMunK6C58Bd"],[5,82,78]],[31,0,-101,[0,"e4eHneZ/tCpaHflUkFzFn7"],29],[50,45,92,88,-102,[0,"d62nl9RzBHzqNXWnA9AEJy"]]],[2,"efq7kDa2tDT7/WMzMKq8UH",1,0]],[3,["7fbeJN2DRf9r2Mn3Ygx/Wd"]],[26,"Icon_Shop Item",33554432,2,[[5,-103,[0,"44r61KuI5MGpSN67KpWULU"],[5,41,41]],[70,-104,[0,"27BOzogsNFf7LfSGuXKpOA"],3]],[2,"c4FBMEErFFMoAZvy7Kv/9b",1,0]],[46,"Text_Equip",33554432,8,[[5,-105,[0,"0bIzr+RDRM9r0xX9IWy+Ro"],[5,56.65,22.68]],[99,"Equip!",18,18,18,false,-106,[0,"6eqZAiWWRCvJc9bYQuxwCL"],4]],[2,"61DaURpD9CPbLyXfx3FO6v",1,0],[1,-0.419,0.419,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[26,"Icon_Shop Item",33554432,3,[[5,-107,[0,"f68ajzRsRFGry0g30lnpMW"],[5,41,41]],[70,-108,[0,"830Vg+BOhAb5ynigC4fGxq"],10]],[2,"03z2ARm1FPo5CxWqDMAsth",1,0]],[46,"Text_Equip",33554432,10,[[5,-109,[0,"97l9JUn8pKI6nNT1eoH0ZI"],[5,56.65,22.68]],[99,"Equip!",18,18,18,false,-110,[0,"f75XEuz91D7KpAQ/x8xvlY"],11]],[2,"31Li5+5hdFa7Sr3/e+ik5m",1,0],[1,-0.419,0.419,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[26,"Icon_Shop Item",33554432,4,[[5,-111,[0,"f2qN4BuWxDRqLX4qem8Lnv"],[5,41,41]],[70,-112,[0,"e1ux2szLBGlY5Kmig8gV/8"],17]],[2,"0d5reiRndHR7KyqmvJmvsO",1,0]],[46,"Text_Equip",33554432,12,[[5,-113,[0,"b4bnI/1m1CUr79fKtVQ2DI"],[5,56.65,22.68]],[99,"Equip!",18,18,18,false,-114,[0,"8bUbk4pNVChoBT3q0B0e4E"],18]],[2,"62aENNw/RHMJkhj4/Phlb1",1,0],[1,-0.419,0.419,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[26,"Icon_Shop Item",33554432,5,[[5,-115,[0,"58XuI6VtJNOqDJtQ5YTAKA"],[5,41,41]],[70,-116,[0,"95eSA2dvZGCKgYI07a17zf"],24]],[2,"f3jHOe/elEsrqljPn5oAAS",1,0]],[46,"Text_Equip",33554432,14,[[5,-117,[0,"49Q9hAbhFJ0LZ6q2FkXrtA"],[5,56.65,22.68]],[99,"Equip!",18,18,18,false,-118,[0,"424ixsm0NLFYYOF0LuN1nF"],25]],[2,"77FhnlrS9JuID7CZretMIl",1,0],[1,-0.419,0.419,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[26,"Icon_Shop Item",33554432,6,[[5,-119,[0,"63g1QDYnNAm4V9vkMxE3WE"],[5,41,41]],[70,-120,[0,"8d5spH4whIVI+MjjPNUeeo"],31]],[2,"0a4La9/K1PNJySz3FsFhk0",1,0]],[46,"Text_Equip",33554432,16,[[5,-121,[0,"38UBO3GrdJA6JasxE0S/G0"],[5,56.65,22.68]],[99,"Equip!",18,18,18,false,-122,[0,"04oEPAh+BLfJH3YEKZPtwN"],32]],[2,"daCQc7iNlJM6bAMc1xe4l4",1,0],[1,-0.419,0.419,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[276,0,null,[268,"New Node"],[9,"7fbeJN2DRf9r2Mn3Ygx/Wd",-123,[359,"7enTIaaxFHF4h6itg+vz5M",17,[[190,[3,["ee9w2+yq5Uoq7Mf6+RM6O5"]],[[257,[0,"22CmcFkh1CDavWPdrQLSIt"]],[243,[0,"7f5m8nD5VK+pTgfbhNKnyQ"]]]]],[[6,"SM_Jacket",["_name"],23],[4,["_lpos"],23,[1,0,0,0]],[4,["_lrot"],23,[3,0,0,0,1]],[4,["_euler"],23,[1,0,0,0]],[14,["_materials","0"],[3,["ceLvrjRI9Z347m5lzJ1rr0"]],37]]],36]]],0,[0,-1,17,0,-2,34,0,1,1,0,0,1,0,0,1,0,-1,17,0,-2,2,0,-3,3,0,-4,4,0,-5,5,0,-6,6,0,0,2,0,0,2,0,21,7,0,0,2,0,-1,18,0,-2,7,0,-3,24,0,-4,8,0,0,3,0,0,3,0,21,9,0,0,3,0,-1,19,0,-2,9,0,-3,26,0,-4,10,0,0,4,0,0,4,0,21,11,0,0,4,0,-1,20,0,-2,11,0,-3,28,0,-4,12,0,0,5,0,0,5,0,21,13,0,0,5,0,-1,21,0,-2,13,0,-3,30,0,-4,14,0,0,6,0,0,6,0,21,15,0,0,6,0,-1,22,0,-2,15,0,-3,32,0,-4,16,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,-1,25,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,-1,27,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,-1,29,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,-1,31,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,-1,33,0,1,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,1,34,0,4,1,123],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,3,3,3,12,3,3,22,3,3,3,12,3,3,22,3,3,3,12,3,3,22,3,3,3,12,3,3,22,3,3,3,12,3,3,22,5,6],[196,44,45,14,0,83,41,41,44,45,14,0,83,41,41,44,45,14,0,83,41,41,44,45,14,0,83,41,41,44,45,14,0,83,41,41,545,34]],[[[12,"LevelThemeEnd_Autumn"],[88,"LevelThemeEnd_Autumn",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"edEgk7xXdHRYkAaCxOGJbw",1,0],[1,2.097,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"e5JwGqFKVLELBBwBhHQFJL"],[28],[23],29]],[2,"2bnQ8/d4FKqKc1YXuh31MM",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"4bu4kfbbZP0ZOyGAd83GPj",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"33UJ5iP1JNOrTv7YUwtsZF"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,292,292,36,47,48,30,27,293,16,294,17]],[[[12,"LevelAssembler"],[173,"LevelAssembler",[[491,4,false,false,-2,[0,"4fBRnV0npDgYDi3icPNdf7"],[0,1,2,3],[[139,[4,4287389140],[4,4293510597],4,5],[139,[4,4288303462],[4,4292588999],6,7],[139,[4,4283089407],[4,4292723904],8,9],[139,[4,4285350023],[4,4288370816],10,11],[139,[4,4283089407],[4,4292071334],12,13],[139,[4,4292343919],[4,4292137676],14,15],[139,[4,4287389140],[4,4288452536],16,17],[139,[4,4281813208],[4,4292071633],18,19],[139,[4,4283889867],[4,4292072913],20,21],[139,[4,4281637868],[4,4292137676],22,23]],24]],[2,"81zpXPXW5PqLeVPhPgobDW",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,81],[295,546,547,548,549,550,551,552,553,554,555,556,557,558,296,297,559,560,561,562,563,564,296,297,565]],[[[29,".bin",291172571,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31872,"length":3936,"count":984,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":31872,"count":664,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.34247636795043945,-1.4539272785186768,-0.5932759642601013],"maxPosition",8,[1,0.3424694240093231,1.1337546110153198,6.142716407775879]]],-1],0,0,[],[],[]],[[[36],[11,"SM_SugarCane_01",[-2],[2,"1eJGL4DTpQBru9cN0bIXZ+",-1,0]],[28,"SM_SugarCane_01",1,[[25,-3,[0,"cfrZa53gFYlrAP6gytjkjP"],[0],[23],1]],[2,"01iiVrZ3pdMa0tm8L4Yr5T",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[566,567]],[[[37,"SM_SugarCane_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[71,"sfx_ui_xp_growing",".mp3",2.481633],-1],0,0,[],[],[]],[[[12,"NorthernHeights_01_Tree_03"],[11,"NorthernHeights_01_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"96Wkphaa9DCrR2PWH48Z08",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,8]],[[{"name":"UI_Confirmation Panel","rect":{"x":0,"y":0,"width":336,"height":324},"offset":{"x":0,"y":0},"originalSize":{"width":336,"height":324},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[568]],[[[12,"NorthernHeights_Christmas_Logs_01"],[11,"NorthernHeights_Christmas_Logs_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"6dgP8j2aRZD5EHMUZgqMY7",-4,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[10,29]],[[[12,"NorthernHeights_Christmas_Cabin_02"],[11,"NorthernHeights_Christmas_Cabin_02",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"44YWt20BdD7LjquU/zxSnl",1,[[6,"NorthernHeights_Christmas_Logs_02",["_name"],-10],[4,["_lpos"],-11,[1,-0.636,0,-5.536]],[4,["_lrot"],-12,[3,0,0.22646431329885913,0,0.9740194632562925]],[4,["_euler"],-13,[1,0,26.178,0]]]],0]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"5eZBdGusZKwKtAr1F4VWcU",1,[[6,"NorthernHeights_Christmas_Logs_01",["_name"],-15],[4,["_lpos"],-16,[1,0,0,6.006]],[4,["_lrot"],-17,[3,0,-0.2442582016393053,0,0.9697102303945919]],[4,["_euler"],-18,[1,0,-28.276,0]]]],1]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["0d4EP+x8hSIaK8k0a5McE+"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"0d4EP+x8hSIaK8k0a5McE+",-20,[13,"09umGHg/VC/rSjmM0rJJpJ",1,[[6,"SM_ChristmasCabin_02",["_name"],6],[4,["_lpos"],6,[1,0,0,0]],[4,["_lrot"],6,[3,0,0,0,1]],[4,["_euler"],6,[1,0,0,0]],[14,["_materials","0"],[3,["24P2EhUBpaJoAM1MhVBk53"]],3]]],2]],[10,0,null,2,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[10,0,null,4,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]]],0,[0,-1,2,0,-2,10,0,-3,4,0,-4,11,0,-5,9,0,1,1,0,-1,2,0,-2,4,0,-3,9,0,2,3,0,2,3,0,2,3,0,2,3,0,1,2,0,2,5,0,2,5,0,2,5,0,2,5,0,1,4,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,5,5,6,5,6,5,6],[133,133,569,29,10,134,10,134]],[[{"name":"Icon_Menu","rect":{"x":0,"y":0,"width":36,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[570]],[[[29,".bin",3934851410,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4464,"length":1116,"count":279,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4464,"count":93,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3268708884716034,0.00004646197339752689,0],"maxPosition",8,[1,0.22968192398548126,0.6243953704833984,0]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_02_Tree_01"],[11,"NorthernHeights_02_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,19]],[[[12,"NorthernHeights_Autumn_Pumpkin"],[11,"NorthernHeights_Autumn_Pumpkin",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["89PRF0Xw1WRajPE8iueT+O"]],[10,0,null,1,[9,"89PRF0Xw1WRajPE8iueT+O",-6,[13,"4bVwu6T7BIF6TmYtdr1BLC",1,[[6,"SM_Pumpkin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[6,1,["_materials","length"],-4],[133,["_materials","0"],-5,1]]],0]],[3,["78k2gIOAVRHIutsnQQjyqz"]]],0,[0,-1,3,0,1,1,0,-1,3,0,2,4,0,2,4,0,1,3,0,4,1,6],[0,0],[5,6],[571,18]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[1],0,[0],[13],[572]],[[[12,"NorthernHeights_Spring_Flower_03"],[11,"NorthernHeights_Spring_Flower_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["9cxpBaphVZvIToIVmR+I6a"]],[10,0,null,1,[9,"9cxpBaphVZvIToIVmR+I6a",-4,[13,"f42uVtInNM/a6UHGMY0ra7",1,[[6,"SM_FlowerSpring_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["630cMRBGRdNoqPhaYY1Uh3"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[573,6]],[[{"name":"UI_Tutorial","rect":{"x":26,"y":6,"width":460,"height":244},"offset":{"x":0,"y":0},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[574]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[65,65,38]],[[[12,"SM_Number_9"],[140,"SM_Number_9",[-2],[2,"5dv1aeJEFTR4OakgQV4i6N",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_9",1,[[25,-3,[0,"1c2MERgBpXSYFrGRCqjXCG"],[0],[23],1]],[2,"6avOgcqAVdErQoGHUPv2IR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,575]],[[[71,"sfx_player_slide_landing_2",".mp3",1.567347],-1],0,0,[],[],[]],[[[71,"music_menu_loop",".mp3",45.216],-1],0,0,[],[],[]],[[{"name":"UI_Panel_XP Fill v2","rect":{"x":0,"y":0,"width":180,"height":52},"offset":{"x":0,"y":0},"originalSize":{"width":180,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[576]],[[[12,"NorthernHeights_Autumn_Snowman_03"],[11,"NorthernHeights_Autumn_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"d6ZfKOhiBP1JGSkMpo5vAh",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,18]],[[[12,"UICharacterModel"],[196,0,null,[9,"83yYEVbixRL5ZsYAVRZfdA",-22,[215,"15Ie77+OtESr869XYwl5IR",-21,[[234,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[-19,-20]]],[[190,[3,["72K185M+VeQaG9OVHg/pe8"]],[[257,[0,"8ch5tVtUlGRZlyAsXkMDtm"]],[243,[0,"aah5B7fT1Pt6UzJFZKYylv"]]]],[190,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[[224,-18,[0,"2fD/ivLH1GL7As29Aa3OCz"],1]]]],[[6,"SK_Armature",["_name"],-1],[4,["_lpos"],-2,[1,0,0,0]],[4,["_lrot"],-3,[3,0,0,0,1]],[4,["_euler"],-4,[1,0,0,0]],[133,["_materials","0"],-5,2],[217,["_skinningRoot"],-7,-6],[133,["_materials","0"],-8,3],[217,["_skinningRoot"],-10,-9],[6,2,["_sockets","length"],-11],[218,["_sockets","0"],-13,[162,"SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck/DEF-Head",-12]],[218,["_sockets","1"],-15,[162,"SK_Armature/DEF-ROOT/PVT-Board",-14]],[6,8388608,["_layer"],-16],[8,8388608,["_layer"],[3,["1aETFLNnpUyrzqsbYSX1oY"]]],[8,8388608,["_layer"],[3,["45WIlVUKBYCI7aqXsWOzZ5"]]],[8,8388608,["_layer"],[3,["03l3u1nLha8bBAAuWzbbRD"]]],[8,8388608,["_layer"],[3,["28tzY+16NSbom2b3ja/8Zm"]]],[8,8388608,["_layer"],[3,["b7M7VQAEhTH7iAwIqCbaYM"]]],[8,8388608,["_layer"],[3,["7f6NkFTBNYebHPfkjoZKJv"]]],[8,8388608,["_layer"],[3,["57j9gDVJRRZ7RmnbipMl2X"]]],[8,8388608,["_layer"],[3,["689zN6A5tUioN/MRmMO7yK"]]],[8,8388608,["_layer"],[3,["06OhWVSk5R44gZF07OECn/"]]],[8,8388608,["_layer"],[3,["b8zRda/PdbWY2GLaNkeEhA"]]],[8,8388608,["_layer"],[3,["d9XANdQOxcE5IqxBYg1/rn"]]],[8,8388608,["_layer"],[3,["06LTyPm9JclpfeLHEX1O+z"]]],[8,8388608,["_layer"],[3,["53TAej7+FRmbGIvuvb/Zzu"]]],[8,8388608,["_layer"],[3,["4e9DpEXF9TL6tLR/XciP3n"]]],[8,8388608,["_layer"],[3,["09DB4i5ulTdbTt0g2ov7ku"]]],[8,8388608,["_layer"],[3,["c04GHtL+dVjKGb5dxGJA+7"]]],[8,8388608,["_layer"],[3,["f2sJnjZ9ZWXaAEVrrydpZZ"]]],[8,8388608,["_layer"],[3,["6f8P+ZWLNcd4rakEQ8xJu4"]]],[8,8388608,["_layer"],[3,["4bir84c9FchY1htP3/5J2X"]]],[8,8388608,["_layer"],[3,["dcb+0Q7BxVg4ket6gwkyll"]]],[8,8388608,["_layer"],[3,["7aednaSMVfI6OYLybTU8RA"]]],[8,8388608,["_layer"],[3,["16hK99H51dUpgx6wYg1C56"]]],[8,8388608,["_layer"],[3,["5baf56MBZacZM+3pibQIE9"]]],[8,8388608,["_layer"],[3,["984JbYsVtXCLHtMqVz842U"]]],[8,8388608,["_layer"],[3,["7fOX3jZYFXOq+WneTm8lpD"]]],[8,8388608,["_layer"],[3,["f47v0tKP9Rm52QYsFN/Gr8"]]],[8,8388608,["_layer"],[3,["524q9MP1xb0Is7hyL2iez0"]]],[8,8388608,["_layer"],[3,["d0YBoMtI9fTrRPAaV2NbrL"]]],[8,8388608,["_layer"],[3,["a4z86+tzxePbJS4RfxLozo"]]],[8,8388608,["_layer"],[3,["0e0ilYB3xcMbMcFRF3NKsQ"]]],[8,8388608,["_layer"],[3,["21v622JsBfxK2vufo9CfyB"]]],[8,8388608,["_layer"],[3,["f6jc1Xdy5U7oJPQUVC51WD"]]],[8,8388608,["_layer"],[3,["10RV4J6d1Zro60XwIzhLKx"]]],[8,8388608,["_layer"],[3,["53s5LGERlUlqXbf6P8N6YT"]]],[8,8388608,["_layer"],[3,["8bkfWCamhafbHlO7EXp3Gj"]]],[6,false,["_useBakedAnimation"],-17]]],0]],[340,"UICharacterModel",8388608,[1],[[-27,[492,-28,[0,"d33cDjjEFC753yl5WqOav9"]],[493,-29,[0,"3ee5WkyHtBWbMmdA+Xs4+W"]]],1,4,4],[241,"e7UKk3shNCNb06y1Oa6Api",-26,0,[[138,["_body"],-23,1,[3,["aajcY4kBBd8476dCQyztSa"]]],[138,["_pivotHelmet"],-24,1,[3,["87uXPeuBpBo5OHiP3OaGM3"]]],[138,["_pivotSnowboard"],-25,1,[3,["c2+W+qblxO06yYtNrPX8/7"]]]],[1]],[1,100,100,100]],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[317,2,[0,"df0Q2SCMFLsZjgxjuwF7Ks"]],[208,"DEF-Head Socket",8388608,1,[2,"87uXPeuBpBo5OHiP3OaGM3",2,0],[1,0.25532676479447997,2.5957802516058894,0.341680347076843],[3,0.14439738302150953,0.6227623107788529,0.08646131851862053,0.7640948493617905],[1,6.8293115510881925,77.26849015939163,18.17858253567236]],[209,"PVT-Board Socket",8388608,1,[2,"c2+W+qblxO06yYtNrPX8/7",2,0],[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262],[1,-90,0.00022152757132124867,-4.853141298619868e-20]],[3,["46r2eLwu1fPqtmJsINAqA0"]],[3,["aajcY4kBBd8476dCQyztSa"]]],0,[0,2,3,0,2,3,0,2,3,0,2,3,0,2,8,0,6,1,0,2,8,0,2,9,0,6,1,0,2,9,0,2,4,0,14,6,0,2,4,0,14,7,0,2,4,0,2,3,0,2,4,0,0,1,0,-1,6,0,-2,7,0,39,2,0,1,1,0,28,5,0,28,5,0,28,5,0,1,2,0,-1,5,0,0,2,0,0,2,0,4,2,1,11,2,5,37,7,5,38,6,29],[0,0,0,0],[5,23,6,6],[99,101,34,34]],[[[12,"NorthernHeights_05_DeadTree_01"],[11,"NorthernHeights_05_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,26]],[[[12,"NorthernHeights_Christmas_Tree_01"],[11,"NorthernHeights_Christmas_Tree_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["91PzPyO/dYL4zw0QtLDeSj"]],[10,0,null,1,[9,"91PzPyO/dYL4zw0QtLDeSj",-4,[13,"1eW3B51thH76l6NENk9ByO",1,[[6,"SM_ChristmasTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["37SzA5gIFZMJpXhDKRDyEW"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[577,29]],[[[29,".bin",3829621961,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":672,"length":144,"count":36,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":64272,"length":15504,"count":3876,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":672,"count":14,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]},{"view":{"offset":816,"length":63456,"count":1322,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.8434176445007324,-0.8405983448028564,-0.03686833754181862],"maxPosition",8,[1,5.011045932769775,1.002819299697876,0.01723945140838623]]],-1],0,0,[],[],[]],[[[37,"SM_JumpRecord_01__1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[37,"SM_JumpRecord_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_JumpRecord_01",[-2],[2,"95SE6Hp1JWpoOoj13Iw4NB",-1,0]],[28,"SM_JumpRecord_01",1,[[25,-3,[0,"a9oQPFMUVSAohN4XR0ob2D"],[0,1],[23],2]],[2,"8fSd6THENdI6JWierLsA9t",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0,0],[-1,-2,7],[578,579,580]],[[[71,"sfx_ui_generic_tap_3",".mp3",0.156735],-1],0,0,[],[],[]],[[[12,"LevelThemeEnd_Candy"],[88,"LevelThemeEnd_Candy",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"4e+hZtI1lFe61BcUiW6IWc",1,0],[1,0.684,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"a817DGADJHrZd5d57AUIHe"],[28],[23],29]],[2,"c61k+ch9FHFLAg+jEVomKH",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"d1rtmgPEdMvqNiXgqeLqtX",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"01DIOkZ95HpJ4HQNrLsWBP"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,298,298,36,47,48,30,27,257,16,267,17]],[[[12,"SM_Number_4"],[140,"SM_Number_4",[-2],[2,"71UiO2fZRU9Y/9q4CJDkzc",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_4",1,[[25,-3,[0,"2ccxwMhRxULbccsC6QJfUt"],[0],[23],1]],[2,"edkcfEPAhQ5KYzGWQO7OLr",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,581]],[[[29,".bin",1679568940,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3216,"length":780,"count":195,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3216,"count":67,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2003515362739563,0.000040277402149513364,0],"maxPosition",8,[1,0.2625351846218109,0.6243954300880432,0]]],-1],0,0,[],[],[]],[[{"name":"UI_WishButton_Outline 1","rect":{"x":0,"y":0,"width":140,"height":136},"offset":{"x":0,"y":0},"originalSize":{"width":140,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[582]],[[[12,"NorthernHeights_Autumn_DeadTree_01"],[11,"NorthernHeights_Autumn_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,18]],[[[12,"NorthernHeights_05_Snowman_03"],[11,"NorthernHeights_05_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"d6ZfKOhiBP1JGSkMpo5vAh",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,26]],[[[12,"NorthernHeights_01_Tree_02"],[11,"NorthernHeights_01_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"d54j/0XgdLmZfKg33XsFdk",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,8]],[[{"name":"UI_WishButton_Outline 2","rect":{"x":5,"y":3,"width":129,"height":125},"offset":{"x":-0.5,"y":2.5},"originalSize":{"width":140,"height":136},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[583]],[[{"name":"UI_Currency Bar Resizeble","rect":{"x":0,"y":0,"width":124,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":124,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[584]],[[[29,".bin",1805101668,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13152,"length":1824,"count":456,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13152,"count":274,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.084740400314331,-0.2499513328075409,-3.3463335037231445],"maxPosition",8,[1,2.084740400314331,0.2499513328075409,21.770496368408203]]],-1],0,0,[],[],[]],[[[12,"SM_Number_8"],[140,"SM_Number_8",[-2],[2,"157twb/kJUfb9+bn/W2QiZ",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_8",1,[[25,-3,[0,"1aCF/7bQJULrX/QcRqObJe"],[0],[23],1]],[2,"3bJcNockFQ5rkRmaK9MorF",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,585]],[[{"name":"UI_Panel_HexSide Outline Round","rect":{"x":0,"y":0,"width":88,"height":76},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":76},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[586]],[[[12,"NorthernHeights_07_DeadTree_01"],[11,"NorthernHeights_07_DeadTree_01",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["34DGFFNuVYOJD61ENmSn7I"]],[10,0,null,1,[9,"34DGFFNuVYOJD61ENmSn7I",-4,[13,"3699zIM8NM8q+1nL3af+/O",1,[[6,"SM_DeadTree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["e4p+3kG19QZpoJA+VeLN0b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[63,24]],[[{"name":"UI_Button_BigHex Shadow","rect":{"x":0,"y":0,"width":156,"height":152},"offset":{"x":0,"y":0},"originalSize":{"width":156,"height":152},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[587]],[[[12,"LevelTheme_05"],[88,"LevelTheme_05",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],31,32],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],33]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[28,29,30]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[26,16,49,135,136,137,138,135,136,137,138,135,136,137,138,135,136,137,138,299,300,301,299,300,301,302,303,304,302,303,304,207,17,588]],[[[29,".bin",1368506171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3648,"length":864,"count":216,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3648,"count":76,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-130.8822021484375,0,-39],"maxPosition",8,[1,130.8822021484375,2,3.978469133377075]]],-1],0,0,[],[],[]],[[{"name":"UI_Panel_HexSide Color","rect":{"x":0,"y":0,"width":88,"height":76},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":76},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[589]],[[{"name":"default_scrollbar_vertical","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"packable":true}],[1],0,[0],[13],[590]],[[[119,[[129,[89,[-26,-27,-28,-29,-30,-31,-32,-33,-34,-35],[[48,0,false,-5,-4,[[67,"clickBack"]]],[48,0,false,-7,-6,[[67,"exit"]]],[48,0,false,-9,-8,[[67,"exit"]]],[92,-11,-10],[120,0,-13,-12,[[67,"intro"]]],[120,0,-15,-14,[[67,"clickStoreRewards"]]],[48,0,false,-17,-16,[[67,"clickStore"]]],[48,0,false,-19,-18,[[67,"clickStore"]]],[48,0,false,-21,-20,[[67,"clickStoreRewards"]]],[48,0,false,-23,-22,[[67,"exit"]]],[48,0,false,-25,-24,[[67,"clickStoreRewards"]]]],-3,-2,-1]],[129,[89,[-41,-42,-43,-44],[[92,-40,-39]],-38,-37,-36]]],[{},"exit",4,[77,2],"clickBack",4,[77,2],"clickStore",4,[77,2],"clickStoreRewards",4,[77,2],"intro",4,[77,2]]],[43,"StoreOpenInRewards",[35,4]],[43,"StoreOpenInMenu",[35,0]],[43,"CharacterUI_Intro",[35,1]],[43,"CharacterUI_Exit",[35,2]],[43,"StoreCloseInMenu",[35,3]],[137,"Empty"],[33,"Entry"],[43,"StoreCloseInRewards",[35,5]],[33,"Entry"],[33,"Exit"],[33,"Any"],[33,"Exit"],[33,"Any"],[43,"CharacterUI_Sway",[35,6]]],0,[0,24,11,0,25,10,0,26,7,0,10,5,0,9,2,0,10,4,0,9,3,0,10,8,0,9,1,0,10,6,0,9,7,0,10,3,0,9,6,0,10,1,0,9,6,0,10,2,0,9,3,0,10,2,0,9,5,0,10,1,0,9,8,0,10,4,0,9,5,0,10,1,0,9,4,0,-1,7,0,-2,10,0,-3,11,0,-4,2,0,-5,3,0,-6,4,0,-7,5,0,-8,1,0,-9,8,0,-10,6,0,24,13,0,25,12,0,26,9,0,10,14,0,9,9,0,-1,9,0,-2,12,0,-3,13,0,-4,14,44],[0,0,0,0,0,0,0],[15,15,15,15,15,15,15],[305,306,307,308,309,310,311]],[[[12,"NorthernHeights_07_EndFlag_01"],[11,"NorthernHeights_07_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[24,42]],[[{"name":"Icon_Currency DarkPink","rect":{"x":0,"y":0,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[591]],[[{"name":"UI_Textura Corner","rect":{"x":0,"y":0,"width":380,"height":380},"offset":{"x":0,"y":0},"originalSize":{"width":380,"height":380},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[592]],[[{"name":"UI_Button_Store Shadow White","rect":{"x":0,"y":0,"width":92,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[593]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[82,25]],[[{"name":"Icon_Ad","rect":{"x":2,"y":1,"width":56,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[594]],[[[37,"Character__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[494,"Skin-0",551894982,["SK_Armature/DEF-ROOT","SK_Armature/DEF-ROOT/PVT-Board","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.R","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.R/DEF-Foot.R","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.R/DEF-Foot.R/DEF-Ball.R","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.L","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.L/DEF-Foot.L","SK_Armature/DEF-ROOT/PVT-Board/MCH-Leg-IK.L/DEF-Foot.L/DEF-Ball.L","SK_Armature/DEF-ROOT/CTRL-COG","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck/DEF-Head","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L/DEF-Arm.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L/DEF-Arm.L/DEF-Forearm.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L/DEF-Arm.L/DEF-Forearm.L/DEF-Hand.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L/DEF-Arm.L/DEF-Forearm.L/DEF-Hand.L/DEF-Fingers.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.L/DEF-Arm.L/DEF-Forearm.L/DEF-Hand.L/DEF-Thumb.L","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R/DEF-Arm.R","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R/DEF-Arm.R/DEF-Forearm.R","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R/DEF-Arm.R/DEF-Forearm.R/DEF-Hand.R","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R/DEF-Arm.R/DEF-Forearm.R/DEF-Hand.R/DEF-Fingers.R","SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Shoulder.R/DEF-Arm.R/DEF-Forearm.R/DEF-Hand.R/DEF-Thumb.R","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/DEF-Thigh.L","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/DEF-Thigh.L/DEF-Shin.L","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/DEF-Thigh.R","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/DEF-Thigh.R/DEF-Shin.R","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/CTRL-Pole-Leg.R","SK_Armature/DEF-ROOT/CTRL-COG/CTRL_Hips/DEF-SpineA/CTRL-Pole-Leg.L"],[[[7,1,-0.000003910096893378068,2.3942438393146843e-22,0,0.000003910096893378068,1,4.680903396355179e-28,0,-2.3942438393146843e-22,4.680780136838738e-28,1,0,0,0,0,1],[7,1,-0.000004326303951529553,2.6490971561054743e-22,0,0.000004326303951529553,1,5.730334919332006e-28,0,-2.6490971561054743e-22,5.730458178848447e-28,1,0,0,0,0,1],[7,1,-0.0000016998235423670849,1.860230448413186e-13,0,0.0000016998235423670849,1,-1.0943668371510284e-7,0,-1.0408417585748386e-22,1.0943668371510284e-7,1,0,0.27995380759239197,-0.018121415749192238,-0.13850262761116028,1],[7,1,-0.000010453991308168042,3.894148790095642e-7,0,-0.000010453991308168042,-1,1.9276323826034059e-7,0,3.894128610681946e-7,-1.9276730256478913e-7,-1,0,0.27995365858078003,0.018119055777788162,0.13850273191928864,1],[7,1,-0.000001828297058636963,6.278329465203569e-7,0,-0.0000018282971723238006,-1,1.390565813608191e-7,0,6.278327191466815e-7,-1.3905773244005104e-7,-1,0,0.27995526790618896,-0.1724148839712143,0.05881870165467262,1],[7,1,-9.26654593058629e-7,1.0140996251290293e-13,0,9.26654593058629e-7,1,-1.0943663397711134e-7,0,-5.674120612339866e-23,1.0943663397711134e-7,1,0,-0.2799537777900696,-0.018120896071195602,-0.13850262761116028,1],[7,1,0.00001088829230866395,-3.894150211181113e-7,0,0.00001088829230866395,-1,1.9030848363854602e-7,0,-3.894129463333229e-7,-1.9031271847325115e-7,-1,0,-0.27995362877845764,0.018119223415851593,0.13850273191928864,1],[7,1,0.000002493132114977925,-6.278326623032626e-7,0,0.0000024931323423516005,-1,1.2864198595252674e-7,0,-6.278323212427495e-7,-1.286435491465454e-7,-1,0,-0.2799551784992218,-0.17241480946540833,0.05881870165467262,1],[7,1,-4.545253333865934e-13,2.7831646728260864e-29,0,4.545253333865934e-13,1.0000001192092896,0,0,-2.7831646728260864e-29,0,1,0,3.654229487892735e-7,-0.028264762833714485,-1.863708257675171,1],[7,1,-1.849311459523051e-8,3.4415589311720396e-7,0,3.446524203809531e-7,0.05365729331970215,-0.9985594153404236,0,-1.9079937032842802e-20,0.9985594153404236,0.05365729331970215,0,3.5568106682148937e-7,-1.8625400066375732,-0.07177755236625671,1],[7,1,-1.2472472832314452e-8,3.767668488308118e-7,0,3.7697319044127653e-7,0.03308583423495293,-0.9994525909423828,0,8.325291623937956e-17,0.999452531337738,0.033085837960243225,0,4.118905962968711e-7,-2.164876699447632,-0.027209075167775154,1],[7,1,2.0671873812716512e-7,9.608252184989396e-7,0,9.828108886722475e-7,-0.2103341817855835,-0.9776297211647034,0,-6.332879099596456e-15,0.9776296019554138,-0.21033421158790588,0,4.898457177660021e-7,-2.6506776809692383,0.6523812413215637,1],[7,1,-7.27181586057668e-8,6.360568249874632e-7,0,6.402000281013898e-7,0.11358662694692612,-0.9935283064842224,0,-2.0232785902279038e-15,0.9935281872749329,0.11358664184808731,0,3.8229316601245955e-7,-2.9060890674591064,-0.2930314540863037,1],[7,1.0593459620622525e-7,0.9417369365692139,-0.33635032176971436,0,-1.5273684539351962e-7,0.33635029196739197,0.9417369961738586,0,1.0000001192092896,-4.838944178686688e-8,1.7946908315025212e-7,0,-2.619194507598877,-0.10546507686376572,0.0891602411866188,1],[7,-2.963392198296333e-8,0.9999998211860657,0.000003933907464670483,0,1.4958041916202092e-8,0.0000039339056456810795,-1.0000001192092896,0,-1.0000001192092896,-2.9633854481403432e-8,-1.4958159155753492e-8,0,2.5060384273529053,-0.39628493785858154,0.03853081911802292,1],[7,-3.9024541820253944e-8,0.9999998807907104,0.000004007630650448846,0,1.4646119872452346e-8,0.000004007628831459442,-1.0000001192092896,0,-1.0000001192092896,-3.902446721326669e-8,-1.4646276191854213e-8,0,2.506038188934326,-0.7868782877922058,0.038530781865119934,1],[7,-3.902452405668555e-8,0.9999999403953552,0.00000376474235963542,0,1.4646115431560247e-8,0.000003764741677514394,-1.0000001192092896,0,-1.0000001192092896,-3.902446010783933e-8,-1.4646262869177917e-8,0,2.506038188934326,-1.2463771104812622,0.0385310985147953,1],[7,0.16075000166893005,0.986994743347168,-0.00000395165034206002,0,0.0000014651079709437909,0.000003765096835195436,1,0,0.9869951605796814,-0.16074992716312408,-8.408149483329908e-7,0,-2.734877347946167,-1.2023184299468994,-0.038528650999069214,1],[7,0.6721360087394714,0.7302836775779724,-0.12214472144842148,0,0.6006566882133484,-0.4413265287876129,0.666665256023407,0,0.43294888734817505,-0.5214568972587585,-0.7352811694145203,0,-2.050020694732666,0.21023932099342346,2.0855519771575928,1],[7,5.797821955866311e-8,-0.941737174987793,0.33634984493255615,0,1.0803341154996815e-7,0.33634981513023376,0.9417372345924377,0,-1.0000001192092896,-1.8263223822145846e-8,1.2124003490043833e-7,0,2.619194269180298,-0.10546516627073288,0.08916041254997253,1],[7,-1.982765596153513e-8,-1.0000003576278687,-0.0000032782570542622125,0,3.635389234091235e-8,0.000003278257281635888,-1.000000238418579,0,1.0000001192092896,-1.9827780306513887e-8,3.6353828392066134e-8,0,-2.506038188934326,-0.39628496766090393,0.03853069245815277,1],[7,-2.2517371078834003e-8,-1.0000003576278687,-0.0000034186502944066888,0,2.940903129911021e-7,0.0000034186505217803642,-1.0000001192092896,0,1.0000001192092896,-2.2518381825875622e-8,2.940902845693927e-7,0,-2.506037950515747,-0.7868783473968506,0.0385299026966095,1],[7,-2.2517447462178097e-8,-1.0000003576278687,-0.000003177214239258319,0,2.940903129911021e-7,0.0000031772144666319946,-1.0000001192092896,0,1.0000001192092896,-2.251838715494614e-8,2.940902845693927e-7,0,-2.506037950515747,-1.2463773488998413,0.03853019326925278,1],[7,0.1607498675584793,-0.986995279788971,0.0000034739011880446924,0,-0.000001911337221827125,0.000003208378302588244,1.0000001192092896,0,-0.9869952201843262,-0.1607498675584793,-0.0000013707344805879984,0,2.734877109527588,-1.202318787574768,-0.03852701932191849,1],[7,0.6721358895301819,-0.7302834391593933,0.1221441924571991,0,-0.6006566882133484,-0.4413265287876129,0.6666651368141174,0,-0.43294915556907654,-0.5214561820030212,-0.7352811694145203,0,2.050020217895508,0.21023787558078766,2.0855515003204346,1],[7,1,2.2579831338020995e-8,-4.1583058418837027e-7,0,4.164431857134332e-7,-0.05422068014740944,0.9985290169715881,0,-2.0325642153819586e-16,-0.9985290169715881,-0.05422068014740944,0,3.5365198414183396e-7,1.8624993562698364,0.07282840460538864,1],[7,1,-1.608256994245494e-8,2.9617712016261066e-7,0,2.966134218240768e-7,0.05422064661979675,-0.9985290765762329,0,-2.8951255264906964e-16,0.9985290169715881,0.05422065034508705,0,2.9861647021789395e-7,-1.5643129348754883,-0.07282837480306625,1],[7,1,2.198683191068085e-8,-5.558686098083854e-7,0,5.56303291432414e-7,-0.039523106068372726,0.999218761920929,0,5.5019438017464865e-16,-0.9992187023162842,-0.039523109793663025,0,-0.2799535393714905,1.4081768989562988,0.044015344232320786,1],[7,1,-1.9674576634542973e-8,-4.415307159888471e-7,0,4.419688082180073e-7,0.044515758752822876,0.9990087747573853,0,4.721405587829609e-16,-0.9990086555480957,0.044515762478113174,0,-0.27995380759239197,0.8122349977493286,-0.02426961250603199,1],[7,1,2.8271550434055825e-8,-7.147584142330743e-7,0,7.153172987273138e-7,-0.03952309116721153,0.999218761920929,0,7.077316557543118e-16,-0.9992187023162842,-0.03952309489250183,0,0.2799535393714905,1.4081768989562988,0.04401515796780586,1],[7,1,-3.4479430865985705e-8,-7.737765486126591e-7,0,7.745442758277932e-7,0.04451576620340347,0.9990087747573853,0,8.271839477452575e-16,-0.9990086555480957,0.04451576992869377,0,0.2799537777900696,0.8122349977493286,-0.024269776418805122,1],[7,1,-5.662229227709759e-7,-2.2396584142825304e-8,0,5.666656761604827e-7,0.9992186427116394,0.03952345252037048,0,-5.604484022154316e-16,-0.03952345624566078,0.9992185235023499,0,0.2799540162086487,2.4243662357330322,-0.8114038705825806,1],[7,1,-4.847140644415049e-7,-1.917255154637587e-8,0,4.850930963584688e-7,0.9992186427116394,0.03952345252037048,0,-4.798647051685321e-16,-0.03952345624566078,0.9992185235023499,0,-0.2799530625343323,2.4243664741516113,-0.8114038705825806,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[36],[88,"SK_Armature",[-3,-4],[[495,-2,[0,"b2Q11wxwRRY7wG7RK/G5o9"],[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],18]],[2,"83yYEVbixRL5ZsYAVRZfdA",-1,0]],[353,"DEF-SpineA",[[-5,-6,[122,"CTRL-Pole-Leg.R",-7,[2,"7aednaSMVfI6OYLybTU8RA",1,0],[1,-0.4468177855014801,-0.7886661887168884,2.3632142543792725],[3,-0.701885770715882,2.826775231098941e-7,-1.7412479550711828e-7,0.712289523204197],[1,-89.15699226578246,0.000009067919049752419,-0.000036948283353805615]],[122,"CTRL-Pole-Leg.L",-8,[2,"16hK99H51dUpgx6wYg1C56",1,0],[1,1.5154720544815063,-0.7886666059494019,2.3632147312164307],[3,-0.7018857707159122,-1.491524154001764e-7,4.2550092110169105e-8,0.7122895232042278],[1,-89.15699226578418,-0.000008751861411605183,0.00001546939555439036]]],1,1,4,4],[2,"53TAej7+FRmbGIvuvb/Zzu",1,0],[1,6.265246099701471e-9,0.2981863021850586,1.2082194800200341e-8],[3,0.9999999999999942,1.44413374623475e-14,-7.549790836947024e-8,-7.549790126404288e-8],[1,-179.9999913485778,0.000008651423023271977,2.3080196554378125e-12]],[326,"DEF-SpineC",[-9,-10,-11],[2,"06LTyPm9JclpfeLHEX1O+z",1,0],[1,1.30385160446167e-8,0.30131763219833374,1.3737007975578308e-8],[3,0.08324104746434076,0.06770920915293734,-0.0003139672119232357,0.9942264794489799],[1,9.530511817964726,7.741069369162014,0.6101005393307679]],[327,"DEF-ROOT",[-12,-13],[2,"03l3u1nLha8bBAAuWzbbRD",1,0],[3,-3.3087224502057873e-24,1.8774836280224175e-29,0.0000019550484466852976,0.9999999999980889],[1,-3.7915166396033255e-22,2.8926976315012088e-27,0.0002240320494774925]],[79,"PVT-Board",4,[-14,-15],[2,"28tzY+16NSbom2b3ja/8Zm",1,0]],[130,"CTRL-COG",4,[-16,-17],[2,"b7M7VQAEhTH7iAwIqCbaYM",1,0],[1,0.09071414917707443,0.21802037954330444,1.4678142070770264],[3,0.11192756985796165,-2.1882383023908e-7,-0.0000019427639181627722,0.9937163675324409],[1,12.852886961645472,2.5729216295112525e-12,-0.00022403208117282013]],[277,"DEF-Hand.L",[[122,"DEF-Fingers.L",-18,[2,"f6jc1Xdy5U7oJPQUVC51WD",1,0],[1,1.6391277313232422e-7,0.37993696331977844,1.1920928955078125e-7],[3,0.08063752883038647,0.9967434920499559,-5.763395402461549e-8,4.298782094972391e-7],[1,0.00001069417134621683,179.99994971347576,9.250423685788334]],[122,"DEF-Thumb.L",-19,[2,"10RV4J6d1Zro60XwIzhLKx",1,0],[1,-0.024613291025161743,0.2327195107936859,0.10475854575634003],[3,0.3547656779175814,0.8411147464171524,0.0948702156750432,0.3970729647168883],[1,9.495036369213883,125.78387585119232,42.23229824312377]]],[2,"0e0ilYB3xcMbMcFRF3NKsQ",1,0],[1,-1.341104507446289e-7,0.4594986140727997,-3.725290298461914e-9],[3,0.10324820250040333,0.12995232791445993,0.02470410457408739,0.9858204239957908],[1,11.40323024920978,14.586279201389726,4.332382791365584]],[277,"DEF-Hand.R",[[122,"DEF-Fingers.R",-20,[2,"53s5LGERlUlqXbf6P8N6YT",1,0],[1,-1.3282988220453262e-7,0.37993723154067993,-7.776543498039246e-8],[3,-0.08063752883038171,0.9967434920498971,-8.161929021140647e-8,-5.475365538201671e-7],[1,0.000014571367926503825,-179.99993587310382,-9.25042368578492]],[122,"DEF-Thumb.R",-21,[2,"8bkfWCamhafbHlO7EXp3Gj",1,0],[1,0.024613337591290474,0.2327197939157486,0.1047583594918251],[3,-0.3547654978891703,0.8411149223516696,0.09487020789969065,-0.3970727547413236],[1,9.49500923848698,-125.78392068938385,-42.2322809069035]]],[2,"21v622JsBfxK2vufo9CfyB",1,0],[1,-2.60770320892334e-8,0.4594990015029907,-2.9802322387695312e-8],[3,0.17599860207598106,0.08440566987291594,-0.025734764139175338,0.9804274052041313],[1,20.45840489746076,10.05558086773997,-1.1890630882491597]],[28,"SM_Character",1,[[496,-22,[0,"aajcY4kBBd8476dCQyztSa"],[0],[23],1,1,2]],[2,"1aETFLNnpUyrzqsbYSX1oY",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]],[236,"SK_Armature",1,[4],[2,"45WIlVUKBYCI7aqXsWOzZ5",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]],[130,"MCH-Leg-IK.R",5,[-23],[2,"7f6NkFTBNYebHPfkjoZKJv",1,0],[1,-0.35145628452301025,0.01812243089079857,0.13850262761116028],[3,5.424860317198919e-8,-7.15457530186626e-9,-0.1307497647505645,0.9914154018461026],[1,0.000006270257105168887,-1.946367236474095e-11,-15.025840978503195]],[198,"DEF-Foot.R",11,[[122,"DEF-Ball.R",-24,[2,"4e9DpEXF9TL6tLR/XciP3n",1,0],[1,-9.257931310457934e-8,0.19053636491298676,0.07968408614397049],[3,-2.0775592801474045e-8,1.1920919007367664e-7,-0.00000433623790736887,0.9999999999905913],[1,-0.0000023806483342798448,0.000013660356617859903,-0.0004968962623991083]]],[2,"b8zRda/PdbWY2GLaNkeEhA",1,0],[1,3.348105224176834e-7,0.0000010377494845670299,8.056055378347082e-9],[3,0.999999999981497,-0.000006079673766977352,1.9470738265776056e-7,-7.549671465627769e-8],[1,-179.99999134884942,-0.000022311769936895954,-0.000696679297017156]],[130,"MCH-Leg-IK.L",5,[-25],[2,"57j9gDVJRRZ7RmnbipMl2X",1,0],[1,0.6257030367851257,0.018118511885404587,0.13850262761116028],[3,5.172483258392929e-8,1.7850368352134237e-8,0.3262197385811525,0.945293966002133],[1,0.000006270240449044299,2.680492532733705e-11,38.078977726249484]],[198,"DEF-Foot.L",13,[[122,"DEF-Ball.L",-26,[2,"09DB4i5ulTdbTt0g2ov7ku",1,0],[1,3.669995862765063e-8,0.19053636491298676,0.07968408614397049],[3,-2.0775605235982516e-8,-1.1920897691091669e-7,0.00000421702861782136,0.9999999999911011],[1,-0.0000023806513877115613,-0.00001366033247498247,0.0004832358840593325]]],[2,"d9XANdQOxcE5IqxBYg1/rn",1,0],[1,-2.7753418407883146e-7,0.0000010833842907231883,-4.032566724987419e-9],[3,0.9999999999825682,0.000005900859377913458,-1.9470741107967854e-7,-7.549675018349534e-8],[1,-179.99999134884138,0.000022311774740686586,0.000676188677397647]],[236,"DEF-SpineB",6,[3],[2,"689zN6A5tUioN/MRmMO7yK",1,0],[3,0.6513813123493437,0.038875292900005874,-0.028300046857715585,0.7572253329569981],[1,81.38422732375906,5.494250074412458,0.44612398910427675]],[198,"DEF-Neck",3,[[122,"DEF-Head",-27,[2,"5baf56MBZacZM+3pibQIE9",1,0],[1,2.7008354663848877e-8,0.19635923206806183,2.2351741790771484e-8],[3,-0.1448829735139027,0.5076332565878565,-0.005825111501964555,0.8492840919667379],[1,-14.075195362385477,60.617819280751704,-9.032180459372194]]],[2,"c04GHtL+dVjKGb5dxGJA+7",1,0],[1,-6.426125764846802e-8,0.5648834705352783,-0.017146164551377296],[3,0.20853452020991195,0.08755034055695374,0.009784444996042594,0.9740392991996282],[1,23.90081190391421,9.597855425344298,3.1858775525244316]],[130,"DEF-Shoulder.L",3,[-28],[2,"f2sJnjZ9ZWXaAEVrrydpZZ",1,0],[1,0.12931017577648163,0.45127859711647034,0.10791528970003128],[3,0.6810990002677012,0.7309069066141219,-0.00413755096257383,-0.04315236227769621],[1,-36.15360349177841,-140.01001019680413,84.87168746773918]],[130,"DEF-Arm.L",17,[-29],[2,"984JbYsVtXCLHtMqVz842U",1,0],[1,-0.11315608024597168,0.28069132566452026,-0.007842451333999634],[3,-0.3885224409544812,0.8794189573817642,-0.22846023432549414,-0.153227058982031],[1,41.26183327974359,-145.5294829138587,-37.831068288800395]],[130,"DEF-Forearm.L",18,[7],[2,"d0YBoMtI9fTrRPAaV2NbrL",1,0],[1,-1.4528632164001465e-7,0.39059343934059143,1.7881393432617188e-7],[3,0.2943792976420313,-7.796035027338157e-9,-2.9235126689581332e-8,0.9556886674643492],[1,34.24064216450599,1.3242587130789894e-7,-0.0000034646380389613896]],[130,"DEF-Shoulder.R",3,[-30],[2,"6f8P+ZWLNcd4rakEQ8xJu4",1,0],[1,-0.12930922210216522,0.4512785077095032,0.10791536420583725],[3,-0.6565150204120751,0.69377883207753,-0.19720438668282694,0.22083792701327606],[1,-15.181592058506787,130.41402908754242,-86.42392799065608]],[130,"DEF-Arm.R",20,[-31],[2,"7fOX3jZYFXOq+WneTm8lpD",1,0],[1,0.11315625160932541,0.2806912064552307,-0.0078425332903862],[3,0.34003057863644837,0.9212226214123117,-0.08998930398079408,0.1662227799052911],[1,20.330852985138296,152.75134651615176,36.62471900926888]],[130,"DEF-Forearm.R",21,[8],[2,"a4z86+tzxePbJS4RfxLozo",1,0],[1,2.9802322387695312e-8,0.3905932903289795,2.2351741790771484e-8],[3,0.3193093219938297,1.1596689046288567e-7,-5.2086825187869687e-8,0.9476505457645369],[1,37.242321514099494,0.000014499028848424085,-0.0000014130054985212674]],[236,"CTRL_Hips",6,[2],[2,"06OhWVSk5R44gZF07OECn/",1,0],[3,-0.784454479035521,-2.087479382518997e-7,1.1823696013087765e-8,0.6201863996582525],[1,-103.34050471605399,-0.000013772470819128453,0.000019605028726431135]],[198,"DEF-Thigh.L",2,[[122,"DEF-Shin.L",-32,[2,"f47v0tKP9Rm52QYsFN/Gr8",1,0],[1,-4.470348358154297e-8,0.5967722535133362,6.705522537231445e-8],[3,0.6804171827593188,9.65856376488688e-8,0.000007597872839255558,0.732824984118401],[1,85.75250357222734,-0.0005842958122038419,0.00064556639544166]]],[2,"4bir84c9FchY1htP3/5J2X",1,0],[1,0.2799537777900696,-0.15693606436252594,-0.00809894036501646],[3,0.8341987260523247,0.18408191485417852,-0.14182053723129792,0.5001132564686958],[1,115.97791398028184,25.25217445286231,9.512869495452188]],[198,"DEF-Thigh.R",2,[[122,"DEF-Shin.R",-33,[2,"524q9MP1xb0Is7hyL2iez0",1,0],[1,-2.468004822731018e-8,0.596772313117981,-7.450580596923828e-9],[3,0.6978501222570848,-4.323509815430995e-8,-0.000008138818139688542,0.7162438179834639],[1,88.5095449859152,0.0006472942977481588,-0.0006714549464194206]]],[2,"dcb+0Q7BxVg4ket6gwkyll",1,0],[1,-0.2799532413482666,-0.1569358855485916,-0.008098862133920193],[3,0.861506507026176,-0.08253594347306735,-0.035105116067352816,0.499761930535396],[1,119.64924440362877,-1.281492056945352,-10.212468073734053]]],0,[0,1,1,0,0,1,0,-1,9,0,-2,10,0,-1,24,0,-2,25,0,11,2,0,11,2,0,-1,16,0,-2,17,0,-3,20,0,-1,5,0,-2,6,0,-1,11,0,-2,13,0,-1,15,0,-2,23,0,11,7,0,11,7,0,11,8,0,11,8,0,0,9,0,-1,12,0,11,12,0,-1,14,0,11,14,0,11,16,0,-1,18,0,-1,19,0,-1,21,0,-1,22,0,11,24,0,11,25,0,4,1,2,11,23,3,11,15,4,11,10,7,11,19,8,11,22,33],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,7,82,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,19],[595,596,597,187,598,284,277,278,279,280,288,283,281,282,599,286,285,287,187]],[[[29,".bin",1367228587,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":105952,"length":20616,"count":5154,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":105952,"count":1204,"stride":88},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,3,4,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30]]},"minPosition",8,[1,-1.830978512763977,-0.3992261290550232,0.00043058517621830106],"maxPosition",8,[1,1.8309787511825562,0.4888639450073242,3.701240301132202]]],-1],0,0,[],[],[]],[[{"name":"UI_Smooth Base","rect":{"x":11,"y":13,"width":206,"height":56},"offset":{"x":0,"y":3},"originalSize":{"width":228,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[600]],[[[12,"NorthernHeights_Spring_Tree_02"],[11,"NorthernHeights_Spring_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"9ddZfN6VRDLL5zyQDnnUat",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1],[21,["_lscale"],[3,["3fk2SLU61Yb4F4XLJl0fLI"]],[1,0.897,0.897,0.897]]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,6]],[[{"name":"UI_Logo_Heights","rect":{"x":0,"y":0,"width":296,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":296,"height":104},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[601]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"packable":true}],[1],0,[0],[13],[602]],[[[12,"NorthernHeights_Spring_Flower_05"],[11,"NorthernHeights_Spring_Flower_05",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["3ahgNZzBhd1KBtCM/ETlIX"]],[10,0,null,1,[9,"3ahgNZzBhd1KBtCM/ETlIX",-4,[13,"d6rMrGcotGCpDc5ep12Z2e",1,[[6,"SM_FlowerSpring_05",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["59Og79xE9TmJi1grNgz/0a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[603,6]],[[[29,".bin",3969730547,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5280,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5280,"count":110,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.256708025932312,-0.008793588727712631,0],"maxPosition",8,[1,0.25561702251434326,0.6332353353500366,0]]],-1],0,0,[],[],[]],[[[36],[11,"SM_Number_0",[-2],[2,"1eHxuz/7RfdrODjHIAvRs8",-1,0]],[28,"SM_Number_0",1,[[358,[null],-3,[0,"6e0J0kvcJf9bb09yCq+ImV"],[23],0]],[2,"dbq9zxgAtYj7YuyCGq+IAF",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0],[7],[604]],[[[29,".bin",2962870462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3600,"length":540,"count":135,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3600,"count":75,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9320130348205566,-1.3711764812469482,-0.191428542137146],"maxPosition",8,[1,0.7460999488830566,0.8153750896453857,2.029372215270996]]],-1],0,0,[],[],[]],[[[36],[11,"SM_GrassSpring_01",[-2],[2,"6fhuG7pxRU/KQZlDjw1DJZ",-1,0]],[28,"SM_GrassSpring_01",1,[[25,-3,[0,"5cONv1WtNZi6AVNrHWEHbY"],[0],[23],1]],[2,"42AHBSrKVU/awNVeJxWA9s",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[605,606]],[[[37,"SM_GrassSpring_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true}],[[[{},"mainColor",8,[4,4294043107]]],11]]],0,0,[0],[8],[23]],[[[497,"Main"],[341,"Base_Canvas",33554432,"32QH/7usVAwoN8Gp8RSpaC",[-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17],[[[45,-1,[5,414,896]],-2,[369,45,-5.684341886080802e-14,-5.684341886080802e-14,-3],[498,-4],[499,-6,-5]],4,1,4,4,4],[1,207,447.99999999999994,0]],[10,0,{},1,[356,"deK4EAFEpOwKyES4+zZD0+",[],-61,[199,"cciXc7ZbBJdb5hxkLB1uZl",null,[[8,"Content Holder_Rewards",["_name"],[3,["deK4EAFEpOwKyES4+zZD0+"]]],[21,["_lpos"],[3,["deK4EAFEpOwKyES4+zZD0+"]],[1,0,0,0]],[21,["_lrot"],[3,["deK4EAFEpOwKyES4+zZD0+"]],[3,0,0,0,1]],[21,["_euler"],[3,["deK4EAFEpOwKyES4+zZD0+"]],[1,0,0,0]],[6,"Text_CurrentSpeed",["_name"],-18],[4,["_lpos"],-19,[1,-23.759999999999998,1.58,0]],[6,"Text_KMh",["_name"],-20],[4,["_lpos"],-21,[1,-18.88,-8.436,0]],[6,"Icon_Currency",["_name"],-22],[4,["_lpos"],-23,[1,-13.344999999999999,-1.552,0]],[6,"Text_Cost",["_name"],-24],[4,["_lpos"],-25,[1,-5.344999999999999,0,0]],[6,"Text_CurrentPrize",["_name"],-26],[4,["_lpos"],-27,[1,-2.009999999999998,1.58,0]],[6,"Text_%",["_name"],-28],[4,["_lpos"],-29,[1,-8.004999999999999,-8.436,0]],[6,"Icon_Currency",["_name"],-30],[4,["_lpos"],-31,[1,-13.344999999999999,-1.552,0]],[6,"Text_Cost",["_name"],-32],[4,["_lpos"],-33,[1,-5.344999999999999,0,0]],[6,"TopPanel",["_name"],-34],[4,["_lpos"],-35,[1,0,398,0]],[8,"MidPanel",["_name"],[3,["07lcokye5Ij63cEIfK+fpU"]]],[6,"Holder_Player Level",["_name"],-36],[4,["_lpos"],-37,[1,-8,109,0]],[4,["_lscale"],-38,[1,1.4,1.4,1]],[6,"BotPanel",["_name"],-39],[4,["_lpos"],-40,[1,0,-398,0]],[8,"Holder_Snow Panel",["_name"],[3,["4aYkO75xlDxIEPL+IvaYVQ"]]],[6,"Holder_Stats Info",["_name"],-41],[4,["_lpos"],-42,[1,-76.322,50,0]],[21,["_contentSize"],[3,["c5UfhEXZFGsZK8uHi9J7WP"]],[5,414,896]],[21,["_contentSize"],[3,["d0gTXt2cRCNLC17KiEqaCT"]],[5,414,896]],[6,"Panel_Edge",["_name"],-43],[4,["_lpos"],-44,[1,0,245,0]],[8,"Button_Outline",["_name"],[3,["acAebK2y1GHYCZ7p99bHcO"]]],[8,"Button_Color",["_name"],[3,["dc0yVr/8lPaJEOJIKvFFFc"]]],[8,"Button_Outline",["_name"],[3,["780cR3q6dO3qWHTBIhBlRj"]]],[8,"Button_Color",["_name"],[3,["fa4wDRIutPLYfbDBnO1nEf"]]],[8,"Button_Outline",["_name"],[3,["bb34EI3shJC4E6YuT8aTA0"]]],[8,"Button_Color",["_name"],[3,["73mzw5YBRPAqAbjaFmk+KN"]]],[6,"Text_Currency Total",["_name"],-45],[4,["_lpos"],-46,[1,16,0.839,0]],[4,["_lrot"],-47,[3,0,0,0.006108614390678361,0.9999813422410571]],[4,["_euler"],-48,[1,0,0,0.7]],[6,"Holder",["_name"],-49],[4,["_lpos"],-50,[1,35.04,0,0]],[8,"Text_Bonus",["_name"],[3,["eexdXDkfRACot18pNbq89i"]]],[6,"Text_PrizeStats",["_name"],-51],[4,["_lpos"],-52,[1,54.46,3.191,0]],[6,"Text_%",["_name"],-53],[4,["_lpos"],-54,[1,51.260000000000005,-4.255,0]],[6,"Holder_Currency Total",["_name"],-55],[4,["_lpos"],-56,[1,-90,-5,0]],[8,"InputBlocker",["_name"],[3,["05U6lC/P9EO61vPUyn2yqM"]]],[6,"Color",["_name"],-57],[4,["_lpos"],-58,[1,0.41800000000000637,-1.6750000000000114,0]],[6,"Color",["_name"],-59],[4,["_lpos"],-60,[1,0.41800000000000637,-1.6750000000000114,0]]]],8]],[500,"Main",[-93,-94,-95,-96,-97,-98,-99,-100,1,-101,-102,-103,-104],[354,"bb1cd62d-6384-4d60-9cf5-c7fa81d860ae",[[103,["_cameraComponent"],-74,[3,["f65WsEvKVBtYkOnH/ww/Fc"]],-73,[3,["a1AojeVkBN6pYPcEK5h4Xj"]]],[103,["_target"],-76,[3,["9bo+ptNeBB6KMz2/saSCG1"]],-75,[3,["18RdUwxO5GoohAFNOzzQ/4"]]],[103,["_target"],-78,[3,["1fuuFneHhLMYbxPsQBacqA"]],-77,[3,["d1p68GJu1P2rJFvHvS2AUz"]]],[103,["clickEvents","0","target"],2,[3,["f0bAADGRpOvbHd1Mpj4dQJ"]],2,[3,["30TRDricZNCYEMSKjEsImJ"]]],[103,["_target"],2,[3,["f0bAADGRpOvbHd1Mpj4dQJ"]],2,[3,["73mzw5YBRPAqAbjaFmk+KN"]]],[103,["clickEvents","0","target"],2,[3,["f6oAn53GZA/ZKYSHVr28Dt"]],2,[3,["34r3N7RO5DQ4/WLeUAmh4C"]]],[103,["_target"],2,[3,["f6oAn53GZA/ZKYSHVr28Dt"]],2,[3,["fa4wDRIutPLYfbDBnO1nEf"]]],[103,["_animator"],-80,[3,["aam+pIC71BzJnTXEm5XWS5"]],-79,[3,["3fKxD8dNRM5Iq40VPZlQeQ","e9d8Agbu9HSoPeuQCthrQ0"]]],[103,["_target"],2,[3,["28RJ9cK5VKbImXTbuM7ok1"]],2,[3,["dc0yVr/8lPaJEOJIKvFFFc"]]],[103,["_animationEvents","1","_actions","0","target"],2,[3,["abIARDfSpBlajSyorYHZqn"]],2,[3,["a5Boiem/pOE4pc1TvmCkoq"]]],[103,["clickEvents","0","target"],-82,[3,["6dJRIaO09PL4vKzxKB9o7F"]],-81,[3,["5fkmgS6DROO5q9byepgL14"]]],[103,["_target"],-84,[3,["6dJRIaO09PL4vKzxKB9o7F"]],-83,[3,["18zFLMQGhJmoJucYsreYaX"]]],[103,["clickEvents","1","target"],-86,[3,["1fuuFneHhLMYbxPsQBacqA"]],-85,[3,["33RVENEYdNIphjVq9mE6D5"]]],[103,["clickEvents","0","target"],-88,[3,["c6GfH3CvxJWbUT087JLdGA"]],-87,[3,["dedXo5sWpOGKmlBjHpX5K/"]]],[103,["_target"],-90,[3,["c6GfH3CvxJWbUT087JLdGA"]],-89,[3,["85fExKhxNNM64NHcoilKz7"]]],[103,["_animator"],-92,[3,["c3e9wi2+1OwpbbeX2CmMeY"]],-91,[3,["f6KlUnoa1Adpo+URWtARGQ"]]]],[-62,-63,-64,-65,-66,-67,2,-68,-69,-70,-71,-72]],[501,[502,0.5208,[2,0.382363,0.394877,0.646445,0.520833125],[2,0.259762,0.309131,0.567416,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[503,1,1,[4,4283190348]],[504,true,64,65],[505],[506]]],[10,0,{},1,[9,"cbSeFN+YtN9b2RO/aItXVo",-150,[199,"71VJ+mYqdHYqCK1IYPY6wI",null,[[8,"Content Holder_Store",["_name"],[3,["cbSeFN+YtN9b2RO/aItXVo"]]],[21,["_lpos"],[3,["cbSeFN+YtN9b2RO/aItXVo"]],[1,0,0,0]],[21,["_lrot"],[3,["cbSeFN+YtN9b2RO/aItXVo"]],[3,0,0,0,1]],[21,["_euler"],[3,["cbSeFN+YtN9b2RO/aItXVo"]],[1,0,0,0]],[6,"Button_Tab01",["_name"],-105],[4,["_lpos"],-106,[1,27,0,0]],[6,"Button_Tab02",["_name"],-107],[4,["_lpos"],-108,[1,89,0,0]],[6,"Button_Tab03",["_name"],-109],[4,["_lpos"],-110,[1,151,0,0]],[6,"Button_Tab04",["_name"],-111],[4,["_lpos"],-112,[1,213,0,0]],[8,"Button_Outline",["_name"],[3,["7aAlwdl9JNgq8Dl/54tBi5"]]],[8,"Button_Outline",["_name"],[3,["56FiZCMAxNsJNUYZo7pgd4"]]],[8,"Button_Outline",["_name"],[3,["ceCy1yOkVI/5/24A5j+rPN"]]],[8,"Button_Outline",["_name"],[3,["4c3/js6O5FsZPKz7LXwLih"]]],[6,"TopPanel",["_name"],-113],[4,["_lpos"],-114,[1,0,398,0]],[6,"BotPanel",["_name"],-115],[4,["_lpos"],-116,[1,0,-398,0]],[8,"Holder_Snow Panel",["_name"],[3,["51nJ354+lFJ47diKcQlGpv"]]],[6,"Panel_Color BG",["_name"],-117],[4,["_lpos"],-118,[1,46,-273.759,0]],[4,["_lrot"],-119,[3,0,0,0.09584575252022398,0.9953961983671789]],[4,["_euler"],-120,[1,0,0,11]],[6,"Panel_Edge",["_name"],-121],[4,["_lpos"],-122,[1,0,690,0]],[6,"Holder_ShopItens",["_name"],-123],[4,["_lpos"],-124,[1,0.636,305.254,0]],[4,["_lrot"],-125,[3,0,0,0.008726535498373935,0.9999619230641713]],[4,["_euler"],-126,[1,0,0,1]],[6,"PageView",["_name"],-127],[4,["_lrot"],-128,[3,0,0,0.08715574274765817,0.9961946980917455]],[4,["_euler"],-129,[1,0,0,10]],[6,"view",["_name"],-130],[4,["_lpos"],-131,[1,0,3.5,0]],[6,"content",["_name"],-132],[4,["_lpos"],-133,[1,-203,0,0]],[6,"Panel_Color Bot",["_name"],-134],[4,["_lpos"],-135,[1,46,-273.759,0]],[4,["_lrot"],-136,[3,0,0,0.09584575252022398,0.9953961983671789]],[4,["_euler"],-137,[1,0,0,11]],[6,"Panel_Edge",["_name"],-138],[4,["_lpos"],-139,[1,0,416.574,0]],[6,"Holder_Tabs",["_name"],-140],[4,["_lpos"],-141,[1,-183,0,0]],[8,"Button_Outline",["_name"],[3,["98bZFwE2RM47LCFaK1pSvM"]]],[8,"Button_Color",["_name"],[3,["d1p68GJu1P2rJFvHvS2AUz"]]],[8,"InputBlocker",["_name"],[3,["3f3YQQ0dpCsZ9v7IeILuKZ"]]],[6,"Holder_ButtonNext",["_name"],-142],[4,["_lpos"],-143,[1,179,2,0]],[4,["_lrot"],-144,[3,0,0,-0.10452846326765347,0.9945218953682733]],[4,["_euler"],-145,[1,0,0,-12]],[6,"Holder_ButtonBack",["_name"],-146],[4,["_lpos"],-147,[1,-174,0,0]],[4,["_lrot"],-148,[3,0,0,-0.043619387365336,0.9990482215818578]],[4,["_euler"],-149,[1,0,0,-5]],[8,"Button_Color",["_name"],[3,["33ZIElvdRKT4/NNiQq8eWa"]]],[8,"Button_Color",["_name"],[3,["84Fs2Wbo5MkoDJrgCgaOLl"]]],[8,"Button_Color",["_name"],[3,["00FjyT031EGL0FRvnPVjoA"]]],[8,"Button_Color",["_name"],[3,["1bsGv+0dFKMoOniEcCn2QR"]]],[8,"Button_Color",["_name"],[3,["69C+Zq9g9F47ExD0IkHvey"]]]]],9]],[328,"Widget",false,33554432,[-154,-155,-156,-157],[[45,-151,[5,305.856,581.386]],[370,18,-152],[507,-153]]],[329,"content",33554432,[-161,-162,-163,-164,-165],[[114,-158,[5,293.856,400],[0,0.5,1]],[403,2,10,10,5,-159],[282,41,220,-160]],[1,0,248.19299999999998,0]],[10,0,{},1,[9,"76Pz2epqhCxYoXCgxstZTt",-204,[199,"21PivSTtVBdIspcA6ZRkzm",null,[[8,"Content Holder_Menu",["_name"],[3,["76Pz2epqhCxYoXCgxstZTt"]]],[21,["_lpos"],[3,["76Pz2epqhCxYoXCgxstZTt"]],[1,0,0,0]],[21,["_lrot"],[3,["76Pz2epqhCxYoXCgxstZTt"]],[3,0,0,0,1]],[21,["_euler"],[3,["76Pz2epqhCxYoXCgxstZTt"]],[1,0,0,0]],[6,"Text_CurrentSpeed",["_name"],-166],[4,["_lpos"],-167,[1,-23.75999999999999,1.58,0]],[6,"Text_KMh",["_name"],-168],[4,["_lpos"],-169,[1,-18.879999999999992,-8.436,0]],[6,"Icon_Currency",["_name"],-170],[4,["_lpos"],-171,[1,-13.344999999999999,-1.552,0]],[6,"Text_Cost",["_name"],-172],[4,["_lpos"],-173,[1,-5.344999999999999,0,0]],[6,"Text_CurrentPrize",["_name"],-174],[4,["_lpos"],-175,[1,-2.009999999999998,1.58,0]],[6,"Text_%",["_name"],-176],[4,["_lpos"],-177,[1,-8.004999999999999,-8.436,0]],[6,"Icon_Currency",["_name"],-178],[4,["_lpos"],-179,[1,-13.344999999999999,-1.552,0]],[6,"Text_Cost",["_name"],-180],[4,["_lpos"],-181,[1,-5.344999999999999,0,0]],[6,"Text_Free",["_name"],-182],[4,["_lpos"],-183,[1,-21.475,0.413,0]],[6,"Particle_Wind Lateral",["_name"],-184],[4,["_lpos"],-185,[1,-997.818,-232.954,0]],[4,["_lrot"],-186,[3,0.06777318155497801,-0.703851401832742,0.067773181554978,0.7038514018327421]],[4,["_euler"],-187,[1,11,-90,0]],[6,"TopPanel",["_name"],-188],[4,["_lpos"],-189,[1,0,398,0]],[6,"Holder_Player Level",["_name"],-190],[4,["_lpos"],-191,[1,-208,0,0]],[6,"Holder_Logo",["_name"],-192],[4,["_lpos"],-193,[1,0,-109.454,0]],[8,"MidPanel",["_name"],[3,["45No7rKvVFYbwQhp8R7Djm"]]],[6,"BotPanel",["_name"],-194],[4,["_lpos"],-195,[1,0,-398,0]],[8,"Holder_Snow Panel",["_name"],[3,["29BnRHCtlJMpUutXCZk79Y"]]],[6,"Holder_Stats Info",["_name"],-196],[4,["_lpos"],-197,[1,-76.322,50,0]],[21,["_contentSize"],[3,["74x1OYuPNBgqu2bMU0ZeU3"]],[5,414,896]],[21,["_contentSize"],[3,["e1GhlHIFNAV7hnbJm8jusG"]],[5,414,896]],[6,"Panel_Edge",["_name"],-198],[4,["_lpos"],-199,[1,0,245,0]],[8,"Button_Outline",["_name"],[3,["4flnZnoytKOb0dVl+NySjs"]]],[8,"Button_Color",["_name"],[3,["18RdUwxO5GoohAFNOzzQ/4"]]],[8,"Button_Outline",["_name"],[3,["ca2JhtydlCpLsLMyuSMTUu"]]],[8,"Button_Color",["_name"],[3,["18zFLMQGhJmoJucYsreYaX"]]],[6,"Color",["_name"],-200],[4,["_lpos"],-201,[1,0.41800000000000637,-1.6750000000000114,0]],[6,"Color",["_name"],-202],[4,["_lpos"],-203,[1,0.41800000000000637,-1.6750000000000114,0]]]],7]],[10,0,{},3,[242,"deTBPmSi5J/ryhCiWbRLLB",-208,[199,"9f97jGmLRFS6+Qee0/iShJ",null,[[8,"CanvasLoading",["_name"],[3,["deTBPmSi5J/ryhCiWbRLLB"]]],[21,["_lpos"],[3,["deTBPmSi5J/ryhCiWbRLLB"]],[1,207,448.00000000000006,0]],[21,["_lrot"],[3,["deTBPmSi5J/ryhCiWbRLLB"]],[3,0,0,0,1]],[21,["_euler"],[3,["deTBPmSi5J/ryhCiWbRLLB"]],[1,0,0,0]],[8,"Icon_01",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","89L4Cwsr5I7akV5QwLDIsi"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","89L4Cwsr5I7akV5QwLDIsi"]],[1,-24,0,0]],[21,["_lscale"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","89L4Cwsr5I7akV5QwLDIsi"]],[1,0.6,0.6,1]],[8,"Icon_02",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","8cdrTYfXZOSo8yiwl+aHJV"]]],[21,["_lscale"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","8cdrTYfXZOSo8yiwl+aHJV"]],[1,0.6,0.6,1]],[8,"Icon_03",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","f65Xfe581LKKwKLtetGYKq"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","f65Xfe581LKKwKLtetGYKq"]],[1,24,0,0]],[21,["_lscale"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","1cwbs3119PIrHCOupuHZfD","f65Xfe581LKKwKLtetGYKq"]],[1,0.6,0.6,1]],[8,false,["_enabled"],[3,["f65WsEvKVBtYkOnH/ww/Fc"]]],[8,"TransitionPanel",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","6205jZMtlFwKuuqwC/MTfB"]]],[8,"Panel_White BG",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","99UgyB0vZBpoE8ILusCbo8"]]],[8,"Particle_Intro",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","8e8UYPIMRAuLxt7BhEHHPv"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","8e8UYPIMRAuLxt7BhEHHPv"]],[1,-660,-126.291,0]],[21,["_lrot"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","8e8UYPIMRAuLxt7BhEHHPv"]],[3,0.06777318155497801,-0.703851401832742,0.067773181554978,0.7038514018327421]],[21,["_euler"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","8e8UYPIMRAuLxt7BhEHHPv"]],[1,11,-90,0]],[8,"Particle_Exit",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbU7s1Z8ZJMaf86KMe9BoY"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbU7s1Z8ZJMaf86KMe9BoY"]],[1,-660,-126.291,0]],[21,["_lrot"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbU7s1Z8ZJMaf86KMe9BoY"]],[3,0.06777318155497801,-0.703851401832742,0.067773181554978,0.7038514018327421]],[21,["_euler"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbU7s1Z8ZJMaf86KMe9BoY"]],[1,11,-90,0]],[8,"Particle_Loading",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","621qLW4UBFAo9hU1Gd+h9+"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","621qLW4UBFAo9hU1Gd+h9+"]],[1,-581.499,-126.291,331.56]],[21,["_lrot"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","621qLW4UBFAo9hU1Gd+h9+"]],[3,0.06777318155497801,-0.703851401832742,0.067773181554978,0.7038514018327421]],[21,["_euler"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","621qLW4UBFAo9hU1Gd+h9+"]],[1,11,-90,0]],[8,"Holder_BlackBorders",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","b1mTinOMxGnqOWN77CqPUs"]]],[8,"Left_Border",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","5cVlewXiBPD5Tp4g0meG+O"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","5cVlewXiBPD5Tp4g0meG+O"]],[1,-420,0,0]],[8,"Right_Border",["_name"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbcn606RVOC7Vg2dcBR2ar"]]],[21,["_lpos"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","dbcn606RVOC7Vg2dcBR2ar"]],[1,420,0,0]],[8,"LabelProjectVersion",["_name"],[3,["4bKgOc3WpMgJCO0/+7/IA4"]]],[21,["_lpos"],[3,["4bKgOc3WpMgJCO0/+7/IA4"]],[1,-202,-443,0]],[8,"Camera",["_name"],[3,["a0Q5OkVxJKYYXjl6VW+V0e"]]],[21,["_lpos"],[3,["a0Q5OkVxJKYYXjl6VW+V0e"]],[1,0,0,1000]],[8,1073741824,["_layer"],[3,["a0Q5OkVxJKYYXjl6VW+V0e"]]],[21,["_contentSize"],[3,["9bOrMRx1BBIb6ChpN4gfBz"]],[5,414,896]],[21,["_contentSize"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","c0Wd8y0WRLc5no8WaXJW4O"]],[5,414,896]],[21,["_contentSize"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","f4u+C8A+BMZJNoJxyMTV7Y"]],[5,100,976]],[21,["_contentSize"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","feYVMuD5xPdZz7P2XmHKXc"]],[5,6000,976]],[21,["_contentSize"],[3,["3fKxD8dNRM5Iq40VPZlQeQ","01lisOXa9IzIx+Zmz9k1yc"]],[5,6000,976]],[6,"InputBlocker",["_name"],-206],[4,["_lpos"],-207,[1,0,0,0]]]],[[170,["_animator"],-205,[3,["e9d8Agbu9HSoPeuQCthrQ0"]]]],57]],[174,"Button_AddCoins",33554432,[-215,-216,-217],[[45,-209,[5,80,80]],[180,3,0.9,-212,[[42,"da1826xovZC4ZZz1JDgNjre","addCoins",-211]],-210],[508,10000,-214,-213]],[1,190.025,60.212,0],[1,0.92,0.92,1]],[174,"Button_DebugAction",33554432,[-223,-224,-225],[[45,-218,[5,80,80]],[180,3,0.9,-221,[[42,"6cb4bJHCfFOPaDirQn2j/2X","teleportToFinish",-220]],-219],[509,-222]],[1,190.025,60.212,0],[1,0.92,0.92,1]],[174,"Button_DebugAction",33554432,[-231,-232,-233],[[45,-226,[5,80,80]],[180,3,0.9,-229,[[42,"7cf24Q2YqRMQL5EmYda+ogI","deleteSaveAndReload",-228]],-227],[510,-230]],[1,190.025,60.212,0],[1,0.92,0.92,1]],[174,"Button_DebugAction",33554432,[-239,-240,-241],[[45,-234,[5,80,80]],[180,3,0.9,-237,[[42,"6a35dv/VthJt7aJNBa24tiS","unlockAll",-236]],-235],[511,-238]],[1,190.025,60.212,0],[1,0.92,0.92,1]],[174,"Button_DebugAction",33554432,[-247,-248,-249],[[45,-242,[5,80,80]],[180,3,0.9,-245,[[42,"ca89anhPeZOI5EercUv3UBE","debugLevelUp",-244]],-243],[512,-246]],[1,190.025,60.212,0],[1,0.92,0.92,1]],[174,"Button_Close",33554432,[-254,-255,-256],[[45,-250,[5,80,80]],[180,3,0.9,-252,[[42,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],-251],[371,34,10,5,-253]],[1,106.12799999999999,0,0],[1,0.92,0.92,1]],[274,"ScrollView",33554432,5,[-261,-262],[[[45,-257,[5,305.856,496.38599999999997]],[289,1,0,-258,53],-259,[372,45,85,240,250,-260]],4,4,1,4],[1,0,-42.5,0]],[269,"ButtonBackgroundClose",33554432,5,[[45,-263,[5,1305.856,1581.386]],[390,1,0,-264,[4,2539544158],10],[395,2,-266,[[42,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],[4,4292269782],-265,11,12,13,14],[373,45,-500,-500,-500,-500,100,40,-267]]],[274,"scrollBar",33554432,15,[-272],[[[114,-268,[5,12,496.38599999999997],[0,1,0.5]],[289,1,0,-269,21],[374,37,250,1,-270],-271],4,4,4,1],[1,152.928,0,0]],[113,"Panel_DebugButton-000",33554432,6,[-276,9],[[114,-273,[5,225.689,86.943],[0,0,0]],[179,0,-274,[4,4281539080],28],[204,-275]],[1,-102,-96.943,0]],[197,"Holder_Info",33554432,18,[-279,-280,-281],[[45,-277,[5,162.42000000000002,37.146]],[203,1,1,1,-278]],[1,61.636,49.484,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[113,"Panel_DebugButton-001",33554432,6,[-285,10],[[114,-282,[5,225.689,86.943],[0,0,0]],[179,0,-283,[4,4281539080],34],[204,-284]],[1,-102,-188.886,0]],[113,"Panel_DebugButton-002",33554432,6,[-289,11],[[114,-286,[5,225.689,86.943],[0,0,0]],[179,0,-287,[4,4281539080],40],[204,-288]],[1,-102,-280.829,0]],[113,"Panel_DebugButton-003",33554432,6,[-293,12],[[114,-290,[5,225.689,86.943],[0,0,0]],[179,0,-291,[4,4281539080],46],[204,-292]],[1,-102,-372.772,0]],[113,"Panel_DebugButton-004",33554432,6,[-297,13],[[114,-294,[5,225.689,86.943],[0,0,0]],[179,0,-295,[4,4281539080],52],[204,-296]],[1,-102,-464.715,0]],[270,"Game Snacks","e0MPhnNgVGWoCFn0nUzEqt",3,[-298,-299,-300,-301,-302]],[330,"Main Camera","c9DMICJLFO5IeO07EPon7U",3,[-305,-306],[[464,14,1083179008,-303],[513,-304]],[1,2,40,10],[3,-0.30041959421409475,0.04160054911157399,0.01311660275157995,0.9528092235374884],[1,-35,5,0]],[10,0,{},1,[9,"c5H/QavsNL/6JJSH9qHquM",-320,[164,"07WKvzIqRFfr/ol04UOTEu",[[6,"Content Holder_Character UI",["_name"],-307],[4,["_lpos"],-308,[1,0,0,0]],[4,["_lrot"],-309,[3,0,0,0,1]],[4,["_euler"],-310,[1,0,0,0]],[8,true,["_debug"],[3,["c3e9wi2+1OwpbbeX2CmMeY"]]],[6,"DEF-Head Socket",["_name"],-311],[4,["_lpos"],-312,[1,0.25532676479447997,2.5957802516058894,0.341680347076843]],[4,["_lrot"],-313,[3,0.14439738302150953,0.6227623107788529,0.08646131851862053,0.7640948493617905]],[4,["_lscale"],-314,[1,0.9999996739756835,0.9999998135935736,0.9999999759889893]],[4,["_euler"],-315,[1,6.8293115510881925,77.26849015939163,18.17858253567236]],[6,"PVT-Board Socket",["_name"],-316],[4,["_lrot"],-317,[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262]],[4,["_lscale"],-318,[1,0.9999999999999999,1,1]],[4,["_euler"],-319,[1,-90,0.00022152757132124867,-4.853141298619868e-20]],[21,["_contentSize"],[3,["2bKRjjivNA9rEZxrAc1Hat"]],[5,414,896]]]],5]],[3,["8bxcrqX2VFIZeIcKO/8lo8","15Ie77+OtESr869XYwl5IR","87uXPeuBpBo5OHiP3OaGM3"]],[331,"Content Holder_Debug",33554432,1,[5],[[45,-321,[5,414,896]],[90,45,100,100,1,-322,[0,"dcjgxUL2pIf522RYy0Ky/y"]],[514,-323,5]]],[113,"ContainerTitle",33554432,5,[-326,14],[[45,-324,[5,305.856,85]],[282,41,100,-325]],[1,0,248.19299999999998,0]],[113,"Color",33554432,14,[-329],[[45,-327,[5,88,76]],[126,-328,[4,4284440555],20]],[1,0.41800000000000637,-1.6750000000000114,0]],[113,"view",33554432,15,[6],[[45,-330,[5,293.856,496.38599999999997]],[406,-331],[375,45,12,240,250,-332]],[1,-6,0,0]],[113,"Color",33554432,9,[-335],[[45,-333,[5,88,76]],[126,-334,[4,4278250032],27]],[1,0.41800000000000637,-1.6750000000000114,0]],[113,"Color",33554432,10,[-338],[[45,-336,[5,88,76]],[126,-337,[4,4278250032],33]],[1,0.41800000000000637,-1.6750000000000114,0]],[113,"Color",33554432,11,[-341],[[45,-339,[5,88,76]],[126,-340,[4,4278250032],39]],[1,0.41800000000000637,-1.6750000000000114,0]],[113,"Color",33554432,12,[-344],[[45,-342,[5,88,76]],[126,-343,[4,4278250032],45]],[1,0.41800000000000637,-1.6750000000000114,0]],[113,"Color",33554432,13,[-347],[[45,-345,[5,88,76]],[126,-346,[4,4278250032],51]],[1,0.41800000000000637,-1.6750000000000114,0]],[212,"GameController","0aI2UEasND0p+AuJw9CTvi",3,[[515,-348],[516,-349],[517,-350]]],[3,["81zpXPXW5PqLeVPhPgobDW"]],[3,["c46/YsCPVOJYA4mWEpNYRx"]],[3,["9e6juuKcFABoHGxdLQyahb"]],[3,["6dlGtaNmhAXb/eq74wkpRt"]],[3,["c5H/QavsNL/6JJSH9qHquM"]],[3,["8bxcrqX2VFIZeIcKO/8lo8","15Ie77+OtESr869XYwl5IR","c2+W+qblxO06yYtNrPX8/7"]],[3,["05YsritIRDbKNjXUbYhwvG"]],[3,["4eQL6dVUNB7KH2Us4bqVBV"]],[3,["51aPH29eJLdaHZyp5aK3uX"]],[3,["0eROUMDhdIlp00nReMSarB"]],[3,["60d87xWd5G+ZLH7goPXkV5"]],[3,["38F7v6GzNGuavVRL2pLUdO"]],[3,["0dcwpRHuNDXb71mkN5Wjp0"]],[3,["1eOhuwHbxPjbcQAQ6tPC8A"]],[3,["beIG+8pixO1ap9iuU1PQU0"]],[269,"Background",33554432,5,[[45,-351,[5,305.856,581.386]],[179,0,-352,[4,4290624958],15],[376,45,100,100,-353]]],[80,"Label",33554432,29,[[45,-354,[5,140.16,50.4]],[437,"DEBUG",40,false,-355,16],[377,10,10,10,-356]],[1,-72.848,0,0]],[197,"Holder_Info",33554432,20,[-359],[[45,-357,[5,77.67,37.146]],[203,1,1,1,-358]],[1,62.172,46.099,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[197,"Holder_Info",33554432,21,[-362],[[45,-360,[5,128.4,37.146]],[203,1,1,1,-361]],[1,78.691,48.715,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[197,"Holder_Info",33554432,22,[-365],[[45,-363,[5,120.37,37.146]],[203,1,1,1,-364]],[1,78.691,48.715,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[197,"Holder_Info",33554432,23,[-368],[[45,-366,[5,112.02,37.146]],[203,1,1,1,-367]],[1,78.691,48.715,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[3,["6ffnLvn+hE7IvYzdF4f+Gk"]],[3,["a02nq1nIdJYJHTA9XH3GuC"]],[3,["50FHS2CUpNcrfQ6K5X4ifm"]],[3,["c46/YsCPVOJYA4mWEpNYRx"]],[3,["c46/YsCPVOJYA4mWEpNYRx"]],[3,["c9eheeVXBGgapnzgY0vxgD"]],[270,"Audio","53KI6bqzVFzrMKX3bJoGyC",3,[-369,-370,-371]],[10,0,null,3,[9,"81zpXPXW5PqLeVPhPgobDW",-372,[164,"d4wLeX0BtO3adssPw4TjRH",[[6,"LevelAssembler",["_name"],38],[4,["_lpos"],38,[1,0,0,0]],[4,["_lrot"],38,[3,0,0,0,1]],[4,["_euler"],38,[1,0,0,0]],[14,["_level"],[3,["4fBRnV0npDgYDi3icPNdf7"]],1]]],0]],[10,0,{},3,[9,"c46/YsCPVOJYA4mWEpNYRx",-373,[164,"8eeG73eUtHFqdfDi8eq1ik",[[6,"LevelEndRecord",["_name"],39],[4,["_lpos"],39,[1,0,0,50]],[4,["_lrot"],39,[3,0,0,0,1]],[4,["_euler"],39,[1,0,0,0]]]],3]],[10,0,{},1,[9,"9e6juuKcFABoHGxdLQyahb",-374,[164,"83hp8zd69Luq68nCYj3NGT",[[6,"Content Holder_Background",["_name"],40],[4,["_lpos"],40,[1,0,0,0]],[4,["_lrot"],40,[3,0,0,0,1]],[4,["_euler"],40,[1,0,0,0]],[8,"Background",["_name"],[3,["1cdZQOOpBIZ7IKO7l+C0uD"]]],[6,"Texture_Dots",["_name"],41],[4,["_lpos"],41,[1,65,326,0]],[4,["_lrot"],41,[3,0,0,-0.6427876096865393,0.766044443118978]],[4,["_euler"],41,[1,0,0,-80]],[21,["_contentSize"],[3,["83409D6f1GO5q+/LJ3DxRx"]],[5,414,896]],[21,["_contentSize"],[3,["daUm9JF3dPd4bulFfYOYi3"]],[5,414,896]]]],4]],[10,0,{},1,[9,"e7jmo1n3pB/JI4NUOv+1pK",-385,[199,"e1s1XlYCtPIY2Mv1pNAl14",null,[[8,"Content Holder_Play",["_name"],[3,["e7jmo1n3pB/JI4NUOv+1pK"]]],[21,["_lpos"],[3,["e7jmo1n3pB/JI4NUOv+1pK"]],[1,0,0,0]],[21,["_lrot"],[3,["e7jmo1n3pB/JI4NUOv+1pK"]],[3,0,0,0,1]],[21,["_euler"],[3,["e7jmo1n3pB/JI4NUOv+1pK"]],[1,0,0,0]],[6,"Text_Currency Total",["_name"],44],[4,["_lpos"],44,[1,16,0.839,0]],[4,["_lrot"],44,[3,0,0,0.006108614390678361,0.9999813422410571]],[4,["_euler"],44,[1,0,0,0.7]],[6,"TopPanel",["_name"],-375],[4,["_lpos"],-376,[1,0,398,0]],[6,"Holder_Currency Total",["_name"],-377],[4,["_lpos"],-378,[1,-90,-5,0]],[8,"MidPanel",["_name"],[3,["8325gpBVpMLZx4T7+ZJQm7"]]],[6,"Holder_Annoucement",["_name"],-379],[4,["_lpos"],-380,[1,0,65,0]],[6,"BotPanel",["_name"],-381],[4,["_lpos"],-382,[1,0,-398,0]],[21,["_contentSize"],[3,["0eVAIDuYRKfYLi9ms4DoA/"]],[5,19.04,28]],[8,"Button_CloseTutorialAndStart",["_name"],[3,["58Dfo8biRIhqWgw7z974N5"]]],[6,"Edge_Top",["_name"],-383],[4,["_lpos"],-384,[1,0,30,0]],[6,"Edge_Bot",["_name"],45],[4,["_lpos"],45,[1,0,-130,0]],[4,["_lrot"],45,[3,1,0,0,6.123233995736766e-17]],[4,["_euler"],45,[1,180,0,0]]]],6]],[3,["4elqpcRThCg6O1bZ2wbbua"]],[3,["12m+LpzldLOJH/ZIPQcZC1"]],[80,"Shadow",33554432,14,[[45,-386,[5,88,76]],[115,-387,17]],[1,0.418,-1.675,0]],[80,"Outline",33554432,14,[[45,-388,[5,88,76]],[115,-389,18]],[1,0.41800000000000637,-1.6750000000000114,0]],[332,"Icon_Plus",33554432,30,[[45,-390,[5,41,41]],[115,-391,19]],[1,3.409,1.85,0],[3,0,0,0.4134938055392706,0.9105069317587055],[1,0,0,48.849]],[275,"bar",33554432,17,[[[114,-392,[5,10,156.25],[0,0,0]],-393],4,1],[1,-11,-31.25,0]],[80,"Icon_Currency",33554432,19,[[45,-394,[5,64,64]],[290,0,-395,22]],[1,-49.21000000000001,-10.156934167604902,0]],[333,"Icon_Plus-001",33554432,19,[[45,-396,[5,16,16]],[290,0,-397,23]],[1,-8.210000000000008,0,0],[3,0,0,-0.07845909572784496,0.9969173337331279],[1,0.92,0.92,1],[1,0,0,-9]],[275,"Text_Value",33554432,19,[[[114,-398,[5,80.42,56.7],[0,0,0.5]],-399],4,1],[1,0.789999999999992,0,0]],[80,"Shadow",33554432,9,[[45,-400,[5,88,76]],[115,-401,24]],[1,0.418,-1.675,0]],[80,"Outline",33554432,9,[[45,-402,[5,88,76]],[115,-403,25]],[1,0.41800000000000637,-1.6750000000000114,0]],[80,"Icon_Plus",33554432,32,[[45,-404,[5,41,41]],[126,-405,[4,4279006754],26]],[1,4.188,4.188,0]],[80,"Text_Value",33554432,55,[[114,-406,[5,77.67,56.7],[0,0,0.5]],[230,"Finish",0,25,25,45,false,-407,29]],[1,-38.835,0,0]],[80,"Shadow",33554432,10,[[45,-408,[5,88,76]],[115,-409,30]],[1,0.418,-1.675,0]],[80,"Outline",33554432,10,[[45,-410,[5,88,76]],[115,-411,31]],[1,0.41800000000000637,-1.6750000000000114,0]],[80,"Icon_Plus",33554432,33,[[45,-412,[5,41,41]],[126,-413,[4,4279006754],32]],[1,4.188,4.188,0]],[80,"Text_Value",33554432,56,[[114,-414,[5,128.4,56.7],[0,0,0.5]],[230,"Clear save",0,25,25,45,false,-415,35]],[1,-64.2,0,0]],[80,"Shadow",33554432,11,[[45,-416,[5,88,76]],[115,-417,36]],[1,0.418,-1.675,0]],[80,"Outline",33554432,11,[[45,-418,[5,88,76]],[115,-419,37]],[1,0.41800000000000637,-1.6750000000000114,0]],[80,"Icon_Plus",33554432,34,[[45,-420,[5,41,41]],[126,-421,[4,4279006754],38]],[1,4.188,4.188,0]],[80,"Text_Value",33554432,57,[[114,-422,[5,120.37,56.7],[0,0,0.5]],[230,"Unlock all",0,25,25,45,false,-423,41]],[1,-60.185,0,0]],[80,"Shadow",33554432,12,[[45,-424,[5,88,76]],[115,-425,42]],[1,0.418,-1.675,0]],[80,"Outline",33554432,12,[[45,-426,[5,88,76]],[115,-427,43]],[1,0.41800000000000637,-1.6750000000000114,0]],[80,"Icon_Plus",33554432,35,[[45,-428,[5,41,41]],[126,-429,[4,4279006754],44]],[1,4.188,4.188,0]],[80,"Text_Value",33554432,58,[[114,-430,[5,112.02,56.7],[0,0,0.5]],[230,"Level Up!",0,25,25,45,false,-431,47]],[1,-56.01,0,0]],[80,"Shadow",33554432,13,[[45,-432,[5,88,76]],[115,-433,48]],[1,0.418,-1.675,0]],[80,"Outline",33554432,13,[[45,-434,[5,88,76]],[115,-435,49]],[1,0.41800000000000637,-1.6750000000000114,0]],[80,"Icon_Plus",33554432,36,[[45,-436,[5,41,41]],[126,-437,[4,4279006754],50]],[1,4.188,4.188,0]],[10,0,{},1,[9,"6ffnLvn+hE7IvYzdF4f+Gk",-438,[164,"53PsXm+CFDl6mfWwDRotTY",[[6,"Content Holder_VFX Transition",["_name"],59],[4,["_lpos"],59,[1,0,0,0]],[4,["_lrot"],59,[3,0,0,0,1]],[4,["_euler"],59,[1,0,0,0]],[8,"Holder_VFX",["_name"],[3,["79CZCK7lZPUb5oQyH7iCuh"]]],[6,"Particle_TransitionIn",["_name"],60],[4,["_lpos"],60,[1,-930.28,-164.343,300]],[4,["_lrot"],60,[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742]],[4,["_euler"],60,[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[6,"Particle_TransitionOut",["_name"],61],[4,["_lpos"],61,[1,-920,-164.343,300]],[4,["_lrot"],61,[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742]],[4,["_euler"],61,[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[21,["_contentSize"],[3,["9b1Ee9j29HkrWJKaI3YrUj"]],[5,414,896]],[21,["_contentSize"],[3,["85QdACeMRKE48SaV2nXZSH"]],[5,414,896]]]],54]],[10,0,{},1,[9,"c46/YsCPVOJYA4mWEpNYRx",-439,[164,"1fsYbc6FJBBJlBLRoAIh+A",[[6,"VFX_PointTest",["_name"],62],[4,["_lpos"],62,[1,-93.886,163.28,0]],[4,["_lrot"],62,[3,0,0,0,1]],[4,["_euler"],62,[1,0,0,0]]]],55]],[10,0,{},1,[9,"c46/YsCPVOJYA4mWEpNYRx",-440,[164,"51lVlzs0xHG4AQuYPnq1sb",[[6,"VFX_GachaRouletteResult",["_name"],63],[4,["_lpos"],63,[1,-3000,0,0]],[4,["_lrot"],63,[3,0,0,0,1]],[4,["_euler"],63,[1,0,0,0]]]],56]],[10,0,{},8,[355,"c9eheeVXBGgapnzgY0vxgD",-450,[13,"3fKxD8dNRM5Iq40VPZlQeQ",8,[[6,"Content Holder_Loading",["_name"],64],[4,["_lpos"],64,[1,0,0,0]],[4,["_lrot"],64,[3,0,0,0,1]],[4,["_euler"],64,[1,0,0,0]],[6,"Icon_01",["_name"],-442],[4,["_lpos"],-443,[1,-24,0,0]],[4,["_lscale"],-444,[1,0.6,0.6,1]],[6,"Icon_02",["_name"],-445],[4,["_lscale"],-446,[1,0.6,0.6,1]],[6,"Icon_03",["_name"],-447],[4,["_lpos"],-448,[1,24,0,0]],[4,["_lscale"],-449,[1,0.6,0.6,1]]]],[-441],58]],[3,["1cwbs3119PIrHCOupuHZfD","89L4Cwsr5I7akV5QwLDIsi"]],[3,["1cwbs3119PIrHCOupuHZfD","f65Xfe581LKKwKLtetGYKq"]],[350,"VFX_Ring",2,[-451,-452]],[131,"Ads",24,[[518,false,-453],[519,-454]]],[334,"Main Light","c0y6F5f+pAvI805TdmxIjx",3,[[520,true,1,-455,[521]]],[3,-0.3826834323650898,0,0,0.9238795325112867],[1,-45,0,0]],[131,"CameraPlayerTrail",25,[[310,"Camera<CameraComponent>",1,6,1,-456,[4,4286073907]]]],[131,"CameraPlayer",25,[[310,"Camera<CameraComponent>",2,6,2,-457,[4,4286073907]]]],[212,"PlayerPlacer","07nMl3KxZPg4aYfYy8x8Sk",3,[[522,-458,2]]],[212,"PlayerInput","98IfAUTTVLK5ETJ5QD7++x",3,[[523,-459]]],[212,"DebugReloadSceneByPressingR","16pvymvFBDNpEUPg+x48ow",3,[[524,-460]]],[351,"CameraUI",1,[-461],[1,0,0,1000]],[465,0,1073741824,448,2000,6,41943040,112,[4,4278190080]],[3,["22JX+BJ0hIUa02aO2eg/FT"]],[3,["93w02e4ihLZovHuehRPwpk"]],[3,["bfn70l5ORARICXzwZXA3SK"]],[3,["2fr97tx2RKNr5uZS+s8bwT"]],[3,["95Dw9nNu1Ls5+rp9z+LrWR"]],[3,["2afNSgTHRN456L12WFPkCM"]],[3,["b4Ih5FYV1Fr7fIK8bTbPfo"]],[3,["511IrP2z1GG6ODpYOOwnwd"]],[3,["78qCgkAn9FlL9DhKj0+JYy"]],[3,["24o1v5kjdEt5zFm9fqSLDU"]],[3,["f2cbNBWJ5I/5K2XwJRBgrq"]],[3,["ec5zdSuu1Jd4zEqQjjif08"]],[3,["cao+uK10dOkb3XuEKIQT0X"]],[3,["494Vi4KWZBiLxHvXWqmWIq"]],[3,["3cF0/J2qRNRaSjkP4S9aIN"]],[3,["3eZd7/UD5PQKB32tZCQF3D"]],[3,["5b0kHMv2dF1o6ji9RFFepN"]],[3,["1bSl2FYEdMB7hRQF3PWUhI"]],[3,["b6pESBJoBOrZNCUz45OB07"]],[3,["298OZaQ5RIx5BC0rx0a5ty"]],[3,["71HDiLdp1IYo12fufeg6JT"]],[3,["c5gvG2r8VGZqJYnGXN+YTw"]],[3,["e9owB8FVBA15QE2/pqdKTy"]],[3,["dclBtA33xBm7Cb5d8QI0EZ"]],[3,["aa/Bnk9l5C4rr9Tw0mxYxY"]],[3,["968UcEwvZEEK4Xs+r0oOU0"]],[3,["c0xAsyjZJNd6oHPtQgUo89"]],[3,["1bfMo/3XtMO5B7TegB8XF7"]],[3,["d66Y+nPXJFGKRoRh4fKJLi"]],[3,["7cgN3aX4VPZbilHH6qrpqB"]],[3,["6aHoKiuExP/7+jsHd70V8h"]],[3,["55G0Sx2+hNU60B+1sCXTaM"]],[3,["86oHAV9uZJL6p28NATzIxo"]],[3,["bfSFl/cwVJUZLlsPCCzBaN"]],[3,["58MkWiECpHnod+0A/vv72l"]],[3,["806Y5nEHtPeqZReKV9NeH0"]],[3,["d0KLzXgk1C+oDZgTaYW/Pp"]],[3,["df15LFkRxIQ5JMcX6i+/yk"]],[3,["7fefdi8tVBuo3F45qbLSZh"]],[3,["1cqvZNgoBBJ5gPLCCMFTgH"]],[3,["c8BT/fMwFClrjuKn0Qb3ZP"]],[3,["047QWq7qlG0qgZky7Hoq4S"]],[3,["a2qv0KvwNF1ren9OqUyuW5"]],[3,["95G2eSawRMwoOZnHdl16wG"]],[3,["c5hvzdjeNMrLVdRdToMkpN"]],[3,["9bvK2urlFOYYlHkeXR1kr6"]],[3,["9d0ZQ4+NZEGI7Ky99o56ue"]],[3,["6aGWudWjdDG4wXqLlchlN8"]],[3,["d0ouGCSUJCgqrCUXOi07kV"]],[3,["a6djpHN/xJY7EKeezRcCgC"]],[3,["efC5Gy5IdNW5fef9B5ijZA"]],[391,1,0,75],[525,1,17,165],[526,0.23,0.75,false,15,6,166],[438,"10000",0,25,25,45,false,78],[527,false,1,113],[3,["c6RUGccslCi7OEdAKtfNH+"]],[3,["1cwbs3119PIrHCOupuHZfD","8cdrTYfXZOSo8yiwl+aHJV"]],[276,0,{},[268,"New Node"],[9,"a7aqoB2wlLIJHwo8ZefODD",-462,[13,"1cwbs3119PIrHCOupuHZfD",101,[[8,"Group_Loading",["_name"],[3,["a7aqoB2wlLIJHwo8ZefODD"]]],[21,["_lpos"],[3,["a7aqoB2wlLIJHwo8ZefODD"]],[1,0,-163.189,0]],[21,["_lrot"],[3,["a7aqoB2wlLIJHwo8ZefODD"]],[3,0,0,0,1]],[21,["_euler"],[3,["a7aqoB2wlLIJHwo8ZefODD"]],[1,0,0,0]],[8,"Icon_01",["_name"],[3,["89L4Cwsr5I7akV5QwLDIsi"]]],[21,["_lpos"],[3,["89L4Cwsr5I7akV5QwLDIsi"]],[1,-24,0,0]],[21,["_lscale"],[3,["89L4Cwsr5I7akV5QwLDIsi"]],[1,0.6,0.6,1]],[8,"Icon_02",["_name"],[3,["8cdrTYfXZOSo8yiwl+aHJV"]]],[21,["_lscale"],[3,["8cdrTYfXZOSo8yiwl+aHJV"]],[1,0.6,0.6,1]],[8,"Icon_03",["_name"],[3,["f65Xfe581LKKwKLtetGYKq"]]],[21,["_lpos"],[3,["f65Xfe581LKKwKLtetGYKq"]],[1,24,0,0]],[21,["_lscale"],[3,["f65Xfe581LKKwKLtetGYKq"]],[1,0.6,0.6,1]],[21,["_contentSize"],[3,["77DUuXgGFIKr3ARVWRwHBZ"]],[5,24,24]],[21,["_contentSize"],[3,["50FhyAOINAE7GcU9UkTSyR"]],[5,24,24]],[21,["_contentSize"],[3,["ee+ghVjUBHeL8x4dKWDVYu"]],[5,24,24]],[21,["_contentSize"],[3,["d3PfmzQqxEGKC/YKSHIxlN"]],[5,72,45]],[21,["_lpos"],[3,["8cdrTYfXZOSo8yiwl+aHJV"]],[1,0,0,0]],[21,["_color"],[3,["18tabFTGNAfKMKRlPrSUmz"]],[4,4293820778]],[21,["_color"],[3,["daJ3HDMHFPiL1IQNyZ17JL"]],[4,4293820778]],[21,["_color"],[3,["ebphfC7NxF9oZFbz/lXLYq"]],[4,4293820778]]]],59]],[131,"MusicController",65,[[528,-463]]],[131,"AudioDataLoader",65,[[529,-464,60]]],[131,"LevelingUpSFX",65,[[530,-465]]],[335,"StuntTrigger",2,"acydVnDX5I47X2AqsrbQMO",3,[-466],[1,-10,-10,20]],[336,"VFX",2,176,[104]],[415,200,104,[[61,null],6,0],[136,2,[4,4286175999],[4,4289854719]],[15,3,2.4,3],[1],[1],[1],[1],[1],[85,3,6.283185307179586],[1],[15,3,1.2,2],[1],[15,3,1,3],[1],[[98,[7,5]]],[57,true,[225,3,[78,[[86,0.06473214285714285],[40,0.3348214285714286,[4,4278247935]],[40,0.8727678571428572,[4,4278716593]]],[[58,0],[18,255,0.08928571428571426],[18,255,0.7566964285714286],[18,0,1]]],[78,[[86,0.11830357142857145],[40,0.4575892857142857,[4,4278245119]],[40,0.6964285714285714,[4,4278224383]],[40,0.9665178571428571,[4,4278782405]]],[[58,0],[18,255,0.1294642857142857],[18,255,0.794642857142857],[18,0,1]]]]],[128,[1]],[63,true,[66,1,[32,[0,1],[[75,2,0.7148148148148148,0.5966183574879231,1,0.5966183574879231,1],[116,2,1,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,3.490658503988659,15.707963267948966]],[52,[1],[1]],[55,[1],[1],[20],[20],-467],[306,4,0,62]],[416,104,[[63,null],6,0],[20],[15,3,0.05,0.2],[1],[1],[15,3,3,8],[1],[1],[1],[1],[15,3,0.2,0.3],[1],[7,50],[1],[57,true,[59,1,[78,[[86,0.25],[40,0.2946428571428571,[4,4278247679]],[40,0.5245535714285714,[4,4281282537]],[40,1,[4,4283567147]]],[[18,255,0.09151785714285714],[18,200,0.625],[18,0,1]]]]],[299,true,1,2,true,3,0,0,[1]],[63,true,[66,1,[32,[0,1],[[60,2,1],[47,2,0.11851851851851852,-2.689655172413795,-2.689655172413795]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-468],[256,1,0.07,0.05,0]],[131,"On Game Ready",24,[[531,-469]]],[131,"On Game Over",24,[[532,-470]]],[131,"HighScore",24,[[533,-471]]],[131,"LevelComplete",24,[[534,-472]]]],0,[0,0,1,0,-2,169,0,0,1,0,0,1,0,83,169,0,0,1,0,-1,112,0,-2,68,0,-3,26,0,-4,69,0,-5,7,0,-6,2,0,-7,4,0,-8,28,0,-9,98,0,-10,99,0,-11,100,0,2,136,0,2,136,0,2,137,0,2,137,0,2,138,0,2,138,0,2,139,0,2,139,0,2,140,0,2,140,0,2,141,0,2,141,0,2,142,0,2,142,0,2,143,0,2,143,0,2,144,0,2,144,0,2,70,0,2,70,0,2,70,0,2,145,0,2,145,0,2,146,0,2,146,0,2,147,0,2,147,0,2,47,0,2,47,0,2,47,0,2,47,0,2,148,0,2,148,0,2,149,0,2,149,0,2,150,0,2,150,0,2,151,0,2,151,0,2,152,0,2,152,0,2,153,0,2,153,0,1,2,0,-1,66,0,-2,67,0,-3,68,0,-4,26,0,-5,69,0,-6,7,0,-8,4,0,-9,98,0,-10,99,0,-11,100,0,-12,8,0,14,8,0,28,8,0,14,7,0,28,7,0,14,4,0,28,4,0,14,8,0,28,8,0,14,7,0,28,7,0,14,7,0,28,7,0,14,4,0,28,4,0,14,4,0,28,4,0,14,4,0,28,4,0,14,26,0,28,26,0,-1,106,0,-2,25,0,-3,37,0,-4,66,0,-5,109,0,-6,67,0,-7,110,0,-8,111,0,-10,8,0,-11,65,0,-12,176,0,-13,24,0,2,154,0,2,154,0,2,155,0,2,155,0,2,156,0,2,156,0,2,157,0,2,157,0,2,158,0,2,158,0,2,159,0,2,159,0,2,48,0,2,48,0,2,48,0,2,48,0,2,160,0,2,160,0,2,49,0,2,49,0,2,49,0,2,49,0,2,71,0,2,71,0,2,71,0,2,161,0,2,161,0,2,162,0,2,162,0,2,50,0,2,50,0,2,50,0,2,50,0,2,163,0,2,163,0,2,164,0,2,164,0,2,51,0,2,51,0,2,51,0,2,51,0,2,52,0,2,52,0,2,52,0,2,52,0,1,4,0,0,5,0,0,5,0,0,5,0,-1,16,0,-2,53,0,-3,29,0,-4,15,0,0,6,0,0,6,0,0,6,0,-1,18,0,-2,20,0,-3,21,0,-4,22,0,-5,23,0,2,119,0,2,119,0,2,120,0,2,120,0,2,121,0,2,121,0,2,122,0,2,122,0,2,123,0,2,123,0,2,124,0,2,124,0,2,125,0,2,125,0,2,126,0,2,126,0,2,127,0,2,127,0,2,46,0,2,46,0,2,46,0,2,46,0,2,128,0,2,128,0,2,129,0,2,129,0,2,130,0,2,130,0,2,131,0,2,131,0,2,132,0,2,132,0,2,133,0,2,133,0,2,134,0,2,134,0,2,135,0,2,135,0,1,7,0,14,101,0,2,170,0,2,170,0,1,8,0,0,9,0,21,32,0,14,9,0,0,9,0,35,168,0,0,9,0,-1,79,0,-2,80,0,-3,32,0,0,10,0,21,33,0,14,10,0,0,10,0,0,10,0,-1,83,0,-2,84,0,-3,33,0,0,11,0,21,34,0,14,11,0,0,11,0,0,11,0,-1,87,0,-2,88,0,-3,34,0,0,12,0,21,35,0,14,12,0,0,12,0,0,12,0,-1,91,0,-2,92,0,-3,35,0,0,13,0,21,36,0,14,13,0,0,13,0,0,13,0,-1,95,0,-2,96,0,-3,36,0,0,14,0,21,30,0,0,14,0,0,14,0,-1,72,0,-2,73,0,-3,30,0,0,15,0,0,15,0,-3,167,0,0,15,0,-1,17,0,-2,31,0,0,16,0,0,16,0,21,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,-4,166,0,-1,75,0,0,18,0,0,18,0,0,18,0,-1,19,0,0,19,0,0,19,0,-1,76,0,-2,77,0,-3,78,0,0,20,0,0,20,0,0,20,0,-1,55,0,0,21,0,0,21,0,0,21,0,-1,56,0,0,22,0,0,22,0,0,22,0,-1,57,0,0,23,0,0,23,0,0,23,0,-1,58,0,-1,180,0,-2,105,0,-3,181,0,-4,182,0,-5,183,0,0,25,0,0,25,0,-1,107,0,-2,108,0,2,42,0,2,42,0,2,42,0,2,42,0,2,27,0,2,27,0,2,27,0,2,27,0,2,27,0,2,43,0,2,43,0,2,43,0,2,43,0,1,26,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,-1,54,0,0,30,0,0,30,0,-1,74,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,-1,81,0,0,33,0,0,33,0,-1,85,0,0,34,0,0,34,0,-1,89,0,0,35,0,0,35,0,-1,93,0,0,36,0,0,36,0,-1,97,0,0,37,0,0,37,0,0,37,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,-1,82,0,0,56,0,0,56,0,-1,86,0,0,57,0,0,57,0,-1,90,0,0,58,0,0,58,0,-1,94,0,-1,173,0,-2,174,0,-3,175,0,1,66,0,1,67,0,1,68,0,2,114,0,2,114,0,2,115,0,2,115,0,2,116,0,2,116,0,2,117,0,2,117,0,2,118,0,2,118,0,1,69,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,-2,165,0,0,76,0,0,76,0,0,77,0,0,77,0,0,78,0,-2,168,0,0,79,0,0,79,0,0,80,0,0,80,0,0,81,0,0,81,0,0,82,0,0,82,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,1,98,0,1,99,0,1,100,0,-1,172,0,2,102,0,2,102,0,2,102,0,2,171,0,2,171,0,2,103,0,2,103,0,2,103,0,1,101,0,-1,178,0,-2,179,0,0,105,0,0,105,0,0,106,0,0,107,0,0,108,0,0,109,0,0,110,0,0,111,0,-1,113,0,1,172,0,0,173,0,0,174,0,0,175,0,-1,177,0,18,178,0,18,179,0,0,180,0,0,181,0,0,182,0,0,183,0,84,3,1,11,3,5,11,28,6,11,31,9,11,18,10,11,20,11,11,21,12,11,22,13,11,23,14,11,29,104,11,177,166,85,167,472],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,165,168],[5,6,86,5,5,5,5,5,5,5,3,22,50,51,52,3,12,3,3,3,3,3,3,3,3,3,3,3,3,12,3,3,3,3,3,12,3,3,3,3,3,12,3,3,3,3,3,12,3,3,3,3,3,3,5,5,5,5,5,5,87,-1,7,-1,88,89,3,12],[607,295,608,609,610,611,612,613,614,615,80,80,80,227,228,616,0,20,7,14,9,617,28,14,20,7,14,9,50,0,20,7,14,9,50,0,20,7,14,9,50,0,20,7,14,9,50,0,20,7,14,9,50,189,618,226,195,619,620,621,622,73,312,73,36,623,624,0]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@e9a6d","back":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@40c10","left":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@8fd34","right":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@74afd","top":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@bb97f","bottom":"bc1a9456-29df-4538-b8a8-a57640393d08@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@e9a6d","back":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@40c10","left":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@8fd34","right":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@74afd","top":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@bb97f","bottom":"bc610c94-289b-4932-9b76-a5e6f2eb8f52@b47c0@7d38f"}]}],[11],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[[12,"LevelThemeEnd_Spring"],[88,"LevelThemeEnd_Spring",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"0f+TW7zl5NmL9D9RSBrJr1",1,0],[1,2.838,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"ee/pbJtkJCY50LIVfRY60i"],[28],[23],29]],[2,"44KUWCZvtEaagflRFxt1oP",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"8eNULCVcFF5pEd+caRgovk",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"1dvwclst1GG72tKlF9eeLF"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,313,313,235,47,48,30,27,625,16,234,17]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4286129687]]],11]]],0,0,[0],[8],[23]],[[[71,"sfx_player_stunt",".mp3",3.288],-1],0,0,[],[],[]],[[[12,"NorthernHeights_01_Cabin_02"],[11,"NorthernHeights_01_Cabin_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-4,[13,"f3jLChv6xPKrrk8SaSUD+M",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[75,8]],[[[37,"SM_CabinAutumn_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",116160388,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":73488,"length":8172,"count":2043,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":73488,"count":1531,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.793076515197754,-3.709552049636841,-0.5],"maxPosition",8,[1,2.772963047027588,3.812917470932007,5.570366382598877]]],-1],0,0,[],[],[]],[[[36],[11,"SM_CabinAutumn_01",[-2],[2,"88dmurgyhXabNCxXFbb+xN",-1,0]],[28,"SM_CabinAutumn_01",1,[[25,-3,[0,"8bXBbgvIRZdpdYwkMK4ns5"],[0],[23],1]],[2,"68U0DXfXpfEZGibsAgFtC0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[626,627]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[180,180,37]],[[[37,"SM_SnowmanAutumn_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",51812317,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":44976,"length":5508,"count":1377,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":44976,"count":937,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3130309581756592,-1.290630578994751,-0.22259792685508728],"maxPosition",8,[1,1.6575398445129395,1.3710079193115234,1.5634571313858032]]],-1],0,0,[],[],[]],[[[36],[11,"SM_SnowmanAutumn_02",[-2],[2,"a4HFpX9wNTtrN63nLs18E9",-1,0]],[28,"SM_SnowmanAutumn_02",1,[[25,-3,[0,"2fu/KOjxdYH7ZgTB/ixBPo"],[0],[23],1]],[2,"5aHgCi8JdYKro3SHPm5kbE",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[628,629]],[[[119,[[129,[89,[-8,-9,-10,-11,-12],[[92,-5,-4],[120,0,-7,-6,[[67,"intro"]]]],-3,-2,-1]]],[{},"intro",4,[77,2]]],[33,"Entry"],[137,"Empty"],[33,"Exit"],[33,"Any"],[43,"Play_Intro",[35,0]]],0,[0,24,4,0,25,3,0,26,1,0,10,2,0,9,1,0,10,5,0,9,2,0,-1,1,0,-2,3,0,-3,4,0,-4,5,0,-5,2,12],[0],[15],[173]],[[[12,"Coin"],[267,"Coin",[-5],[[535,-4,[0,"4aQaXIAzZDwZxkn9DO9syH"],-3]],[16,"4f4OsAOtpE5puCLDfJlXM+",-2,0,[-1]],[1,0,2.612,-2.242]],[3,["80MXwokcxcpJYwJcVFNKT4"]],[79,"Model",1,[-6],[2,"4diI1mRYVFKoUGtAbC+U9r",1,0]],[10,0,null,3,[9,"80MXwokcxcpJYwJcVFNKT4",-10,[13,"37HpO4LylMCoTmqIn51P0M",1,[[6,"SM_Coin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[6,1,["_materials","length"],-7],[133,["_materials","1"],-8,1],[133,["_materials","0"],-9,2]]],0]],[3,["cbd2CFqCBddauJlRRH2Erl"]]],0,[0,-1,4,0,1,1,0,90,3,0,0,1,0,-1,3,0,-1,4,0,2,5,0,2,5,0,2,5,0,1,4,0,4,1,10],[0,0,0],[5,6,6],[630,8,8]],[[[12,"Level2"],[173,"Level2",[[232,8,0.2,-5,15,-2,[0,"b1Wc0B9G5Lyr0Zq6Qyan1F"],[73,15,20],[73,35,50],[169,5],[73,20,20],[73,5,20],[169,5],[73,25,35],[73,6,8],[233]]],[2,"30ri/pS/pO+ZMkTG+GtXvT",-1,0]]],0,[0,1,1,0,0,1,0,4,1,2],[],[],[]],[[[12,"NorthernHeights_Candy_Snowman_03"],[11,"NorthernHeights_Candy_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"7cmuxLYORNH6uposO82oPM",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,15]],[[[12,"NorthernHeights_02_Cabin_02"],[11,"NorthernHeights_02_Cabin_02",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"54adzOlABEVrC1CItG/T/X",1,[[6,"NorthernHeights_02_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,1.016,0,5.283]],[4,["_lrot"],-12,[3,0,0.2508277574033399,0,0.9680317330108612]],[4,["_euler"],-13,[1,0,29.053,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"d0eN8W3QhBxIiU95VZFgNR",1,[[6,"NorthernHeights_02_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.843,0,-5.813]],[4,["_lrot"],-17,[3,0,-0.23879616595220302,0,0.971069714864246]],[4,["_euler"],-18,[1,0,-27.631,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-20,[13,"5f7FJZCxdBQLM7FQLVJIQc",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[10,0,null,5,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[75,19,132,132,10,19,10,19]],[[[12,"NorthernHeights_07_Penguim_01"],[11,"NorthernHeights_07_Penguim_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["2eu7fXgV1UlbM+tjBij0DI"]],[10,0,null,1,[9,"2eu7fXgV1UlbM+tjBij0DI",-4,[13,"a83Ji4q25OUpabmi5nBvPy",1,[[6,"SM_Penguin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7aGmwe6qNQQKSexyd1lbVf"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[170,24]],[[[37,"SM_Snowman_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Snowman_01",[-2],[2,"16hbDHDn9e76BL3pvJG8By",-1,0]],[28,"SM_Snowman_01",1,[[25,-3,[0,"cahVyJ6NJdJLwS5MuJJGkt"],[0],[23],1]],[2,"41vRQQjGxSZYhKa/RizURe",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[631,632]],[[[29,".bin",802675170,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":36000,"length":4896,"count":1224,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":36000,"count":750,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.4416042566299438,-0.9146365523338318,-0.23210862278938293],"maxPosition",8,[1,1.4416046142578125,0.7924747467041016,2.8840839862823486]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Candy_Igloo"],[11,"NorthernHeights_Candy_Igloo",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,15]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[314,314,38]],[[{"name":"UI_Button_BigHex Outline","rect":{"x":0,"y":0,"width":156,"height":152},"offset":{"x":0,"y":0},"originalSize":{"width":156,"height":152},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[633]],[[[119,[[187,"Base Layer",[89,[-14,-15,-16,-17,-18,-19,-20],[[48,0,false,-5,-4,[[72,1,[44,"enoughCurrency"]],[72,1,[44,"unlocked"]]]],[48,0,false,-7,-6,[[84,[44,"enoughCurrency"]],[72,1,[44,"unlocked"]]]],[48,0,false,-9,-8,[[84,[44,"unlocked"]],[84,[44,"equipped"]]]],[48,0,false,-11,-10,[[84,[44,"unlocked"]],[72,1,[44,"equipped"]]]],[92,-13,-12]],-3,-2,-1]],[187,"Click Layer",[89,[-30,-31,-32,-33,-34],[[92,-25,-24],[120,0,-27,-26,[[67,"click"]]],[192,0,-29,-28]],-23,-22,-21]]],[{},"enoughCurrency",4,[121,1,false],"click",4,[77,2],"equipped",4,[121,1,false],"unlocked",4,[121,1,false]]],[33,"Any"],[137,"Empty"],[33,"Entry"],[43,"WishButton_Equipped",[35,3]],[33,"Entry"],[43,"WishButton_Click",[35,4]],[33,"Exit"],[43,"WishButton_NotEnoughMoney",[35,0]],[43,"WishButton_Idle",[35,1]],[43,"WishButton_IdleEquip",[35,2]],[33,"Exit"],[33,"Any"]],0,[0,24,1,0,25,7,0,26,3,0,10,8,0,9,1,0,10,9,0,9,1,0,10,4,0,9,1,0,10,10,0,9,1,0,10,4,0,9,3,0,-1,3,0,-2,7,0,-3,1,0,-4,8,0,-5,9,0,-6,10,0,-7,4,0,24,12,0,25,11,0,26,5,0,10,2,0,9,5,0,10,6,0,9,2,0,10,2,0,9,6,0,-1,5,0,-2,11,0,-3,12,0,-4,6,0,-5,2,34],[0,0,0,0,0],[15,15,15,15,15],[89,90,91,92,59]],[[[12,"NorthernHeights_07_Snowman_02"],[11,"NorthernHeights_07_Snowman_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["e7MPxqYFheCLNxaeWePfgS"]],[10,0,null,1,[9,"e7MPxqYFheCLNxaeWePfgS",-4,[13,"e3UDMMVg9FV4YDdSFpCTv/",1,[[6,"SM_Snowman_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["0amrvQ6DNbiIgE1v3q+99a"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[62,24]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[315,23]],[[[37,"SM_Pumpkin_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Pumpkin_01",[-2],[2,"89PRF0Xw1WRajPE8iueT+O",-1,0]],[28,"SM_Pumpkin_01",1,[[25,-3,[0,"78k2gIOAVRHIutsnQQjyqz"],[0],[23],1]],[2,"8f395f8A1afq0F5PHxmuUi",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[634,635]],[[[29,".bin",2605651949,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22656,"length":5544,"count":1386,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22656,"count":472,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.7773326635360718,-0.7801852822303772,-0.4863584637641907],"maxPosition",8,[1,0.7790687084197998,0.7762672305107117,0.8228132128715515]]],-1],0,0,[],[],[]],[[[29,".bin",35952344,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3312,"length":804,"count":201,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3312,"count":69,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2075723260641098,0.00004646197339752689,0],"maxPosition",8,[1,0.16329354047775269,0.6243953704833984,0]]],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Autumn_Tree_02"],[11,"NorthernHeights_Autumn_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"d54j/0XgdLmZfKg33XsFdk",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,18]],[[[12,"LevelTheme_07"],[88,"LevelTheme_07",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],33,34],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],35]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27,28]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[29,30,31,32]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-4,-1,-2,-3,-4,20,7,29],[243,16,49,139,140,141,142,139,140,141,142,139,140,141,142,139,140,141,142,316,317,318,316,317,318,319,320,321,322,319,320,321,322,244,17,636]],[[[29,".bin",1692747690,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":82032,"length":19224,"count":4806,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":82032,"count":1709,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4907677173614502,-0.652924120426178,-0.8105564713478088],"maxPosition",8,[1,0.8406721353530884,0.652924120426178,0.7384620904922485]]],-1],0,0,[],[],[]],[[[37,"SM_Penguin_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_Penguin_01",[-2],[2,"2eu7fXgV1UlbM+tjBij0DI",-1,0]],[28,"SM_Penguin_01",1,[[25,-3,[0,"7aGmwe6qNQQKSexyd1lbVf"],[0],[23],1]],[2,"e1TYmQKb9RFKOOUmN2vsLp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[637,638]],[[[12,"NorthernHeights_Christmas_Cabin_01"],[11,"NorthernHeights_Christmas_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["dfMqWlbjpXio5LC5AQ9crP"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"e5htbKJrpNXJwf3bVhu+Nr",1,[[6,"NorthernHeights_Christmas_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,6.006]],[4,["_lrot"],-12,[3,0,-0.2442582016393053,0,0.9697102303945919]],[4,["_euler"],-13,[1,0,-28.276,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"e0YHpt6YND0oZaSSjxFj8B",1,[[6,"NorthernHeights_Christmas_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.636,0,-5.536]],[4,["_lrot"],-17,[3,0,0.22646431329885913,0,0.9740194632562925]],[4,["_euler"],-18,[1,0,26.178,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"dfMqWlbjpXio5LC5AQ9crP",-20,[13,"74HWcJnfVDqZG4MEQVRP5u",1,[[6,"SM_ChristmasCabin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["06vaaOWtlQno5QB8gIpr4v"]],1]]],0]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[10,0,null,5,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[639,29,133,133,10,134,10,134]],[[[71,"sfx_player_collect_coin_1",".mp3",0.287347],-1],0,0,[],[],[]],[[{"name":"Icon_Level v3 Outline","rect":{"x":0,"y":2,"width":64,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[640]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[27,25]],[[[12,"NorthernHeights_02_Tree_02"],[11,"NorthernHeights_02_Tree_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["25GQKtinlUoJShX4KIrA0w"]],[10,0,null,1,[9,"25GQKtinlUoJShX4KIrA0w",-4,[13,"387047NrBNh4xbCRSXDcCD",1,[[6,"SM_Tree_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7e5RYai9tQsrPOQ5YB1wyw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[64,19]],[[{"name":"UI_Confirmation Outline","rect":{"x":0,"y":0,"width":352,"height":340},"offset":{"x":0,"y":0},"originalSize":{"width":352,"height":340},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[641]],[[[12,"NorthernHeights_05_EndFlag_01"],[11,"NorthernHeights_05_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[26,42]],[[{"name":"UI_Panel_Stats Color","rect":{"x":0,"y":0,"width":192,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":192,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[642]],[[[12,"Content Holder_Character UI"],[163,"Content Holder_Character UI",33554432,[-13,-14],[[[5,-4,[0,"2bKRjjivNA9rEZxrAc1Hat"],[5,414,896]],[90,45,100,100,1,-5,[0,"fbu+i6RedPspR+25nrqmQM"]],[248,false,-6,[0,"21bRyt0vVAHpzsrOa0Awcc"],[5,6,7,8,9,10,11]],-7,[284,true,-9,[0,"c3e9wi2+1OwpbbeX2CmMeY"],-8],[536,-10,[0,"56Xjm7ABlEY5PRn9R/0Yhy"]],[385,-12,[0,"159bUE6QBOtr4a4uRiFwe/"],[-11]]],4,4,4,1,4,4,4],[16,"c5H/QavsNL/6JJSH9qHquM",-3,0,[-1,-2]]],[196,0,null,[9,"83yYEVbixRL5ZsYAVRZfdA",-36,[215,"15Ie77+OtESr869XYwl5IR",-35,[[234,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[-33,-34]]],[[190,[3,["72K185M+VeQaG9OVHg/pe8"]],[[257,[0,"8ch5tVtUlGRZlyAsXkMDtm"]],[243,[0,"aah5B7fT1Pt6UzJFZKYylv"]]]],[190,[3,["83yYEVbixRL5ZsYAVRZfdA"]],[[224,-32,[0,"2fD/ivLH1GL7As29Aa3OCz"],2]]]],[[6,"SK_Armature",["_name"],-15],[4,["_lpos"],-16,[1,0,0,0]],[4,["_lrot"],-17,[3,0,0,0,1]],[4,["_euler"],-18,[1,0,0,0]],[133,["_materials","0"],-19,3],[217,["_skinningRoot"],-21,-20],[133,["_materials","0"],-22,4],[217,["_skinningRoot"],-24,-23],[6,2,["_sockets","length"],-25],[218,["_sockets","0"],-27,[162,"SK_Armature/DEF-ROOT/CTRL-COG/DEF-SpineB/DEF-SpineC/DEF-Neck/DEF-Head",-26]],[218,["_sockets","1"],-29,[162,"SK_Armature/DEF-ROOT/PVT-Board",-28]],[6,8388608,["_layer"],-30],[8,8388608,["_layer"],[3,["1aETFLNnpUyrzqsbYSX1oY"]]],[8,8388608,["_layer"],[3,["45WIlVUKBYCI7aqXsWOzZ5"]]],[8,8388608,["_layer"],[3,["03l3u1nLha8bBAAuWzbbRD"]]],[8,8388608,["_layer"],[3,["28tzY+16NSbom2b3ja/8Zm"]]],[8,8388608,["_layer"],[3,["b7M7VQAEhTH7iAwIqCbaYM"]]],[8,8388608,["_layer"],[3,["7f6NkFTBNYebHPfkjoZKJv"]]],[8,8388608,["_layer"],[3,["57j9gDVJRRZ7RmnbipMl2X"]]],[8,8388608,["_layer"],[3,["689zN6A5tUioN/MRmMO7yK"]]],[8,8388608,["_layer"],[3,["06OhWVSk5R44gZF07OECn/"]]],[8,8388608,["_layer"],[3,["b8zRda/PdbWY2GLaNkeEhA"]]],[8,8388608,["_layer"],[3,["d9XANdQOxcE5IqxBYg1/rn"]]],[8,8388608,["_layer"],[3,["06LTyPm9JclpfeLHEX1O+z"]]],[8,8388608,["_layer"],[3,["53TAej7+FRmbGIvuvb/Zzu"]]],[8,8388608,["_layer"],[3,["4e9DpEXF9TL6tLR/XciP3n"]]],[8,8388608,["_layer"],[3,["09DB4i5ulTdbTt0g2ov7ku"]]],[8,8388608,["_layer"],[3,["c04GHtL+dVjKGb5dxGJA+7"]]],[8,8388608,["_layer"],[3,["f2sJnjZ9ZWXaAEVrrydpZZ"]]],[8,8388608,["_layer"],[3,["6f8P+ZWLNcd4rakEQ8xJu4"]]],[8,8388608,["_layer"],[3,["4bir84c9FchY1htP3/5J2X"]]],[8,8388608,["_layer"],[3,["dcb+0Q7BxVg4ket6gwkyll"]]],[8,8388608,["_layer"],[3,["7aednaSMVfI6OYLybTU8RA"]]],[8,8388608,["_layer"],[3,["16hK99H51dUpgx6wYg1C56"]]],[8,8388608,["_layer"],[3,["5baf56MBZacZM+3pibQIE9"]]],[8,8388608,["_layer"],[3,["984JbYsVtXCLHtMqVz842U"]]],[8,8388608,["_layer"],[3,["7fOX3jZYFXOq+WneTm8lpD"]]],[8,8388608,["_layer"],[3,["f47v0tKP9Rm52QYsFN/Gr8"]]],[8,8388608,["_layer"],[3,["524q9MP1xb0Is7hyL2iez0"]]],[8,8388608,["_layer"],[3,["d0YBoMtI9fTrRPAaV2NbrL"]]],[8,8388608,["_layer"],[3,["a4z86+tzxePbJS4RfxLozo"]]],[8,8388608,["_layer"],[3,["0e0ilYB3xcMbMcFRF3NKsQ"]]],[8,8388608,["_layer"],[3,["21v622JsBfxK2vufo9CfyB"]]],[8,8388608,["_layer"],[3,["f6jc1Xdy5U7oJPQUVC51WD"]]],[8,8388608,["_layer"],[3,["10RV4J6d1Zro60XwIzhLKx"]]],[8,8388608,["_layer"],[3,["53s5LGERlUlqXbf6P8N6YT"]]],[8,8388608,["_layer"],[3,["8bkfWCamhafbHlO7EXp3Gj"]]],[6,false,["_useBakedAnimation"],-31]]],1]],[10,0,{},1,[242,"e7UKk3shNCNb06y1Oa6Api",-41,[13,"8bxcrqX2VFIZeIcKO/8lo8",1,[[6,"UICharacterModel",["_name"],-37],[4,["_lpos"],-38,[1,0,-132,-200]],[4,["_lrot"],-39,[3,0.14094279857633085,0.13134760953608512,0.06371841237180413,0.9791950249686958]],[4,["_euler"],-40,[1,15.233,14.032,9.312]]]],[[170,["_body"],2,[3,["aajcY4kBBd8476dCQyztSa"]]],[170,["_pivotHelmet"],2,[3,["87uXPeuBpBo5OHiP3OaGM3"]]],[170,["_pivotSnowboard"],2,[3,["c2+W+qblxO06yYtNrPX8/7"]]]],0]],[68,"EventListeners",33554432,1,[-43,-44,-45,-46],[[27,-42,[0,"07sbqNc5dBzL7+8sZkQTup"]]],[2,"c9Blv5MuJLGJadCFnWv2lY",1,0]],[3,["83yYEVbixRL5ZsYAVRZfdA"]],[3,["e7UKk3shNCNb06y1Oa6Api"]],[3,["b2Q11wxwRRY7wG7RK/G5o9"]],[26,"ListenStoreMenu",33554432,4,[[27,-47,[0,"c5XfB7DHFN+aYsDi1307IC"]],[74,16,-48,[0,"c31k9UXIZCrZftFnxML5Pe"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStore",1]]],[74,3,-49,[0,"c31k9UXIZCrZftFnxML5Pe"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickBack",1]]]],[2,"cd7eQiu01G4anvcHGGas1L",1,0]],[26,"ListenPlay",33554432,4,[[27,-50,[0,"f14djjhVVHTrh7FcXJzYYV"]],[74,5,-51,[0,"5cCLIyyjpB9ailF2wxWYlC"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]]],[2,"5acN1ZxtJBkIEYhW5XmBhK",1,0]],[26,"ListenStoreRewardsOpen",33554432,4,[[27,-52,[0,"c4+oDJ2E9DOaB3kR0Bvruw"]],[74,2,-53,[0,"6bZgaKNBFGVIhyOFMC6kv6"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStoreRewards",1]]]],[2,"a63h50OsJJB63hbaV/9i9w",1,0]],[26,"ListenStoreRewardsClose",33554432,4,[[27,-54,[0,"d0SZNc1thAg5+VKAMl4F2X"]],[74,4,-55,[0,"b1aiK6kblEq6s8X2ch3aiP"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]]],[2,"76oEEBrKhNw4mjTW71Ho4M",1,0]],[208,"DEF-Head Socket",8388608,2,[2,"87uXPeuBpBo5OHiP3OaGM3",3,0],[1,0.21121055500876035,2.469569303796788,0.03970563571509993],[3,0.16508034576965108,0.6078599253230407,0.15089803513336153,0.7618953820580042],[1,4.327227328887806,76.18766046802284,25.50745202584509]],[209,"PVT-Board Socket",8388608,2,[2,"c2+W+qblxO06yYtNrPX8/7",3,0],[3,-0.7071067811852262,0.0000013669737041030883,0.0000013669737041030876,0.7071067811852262],[1,-90,0.00022152757132124867,-4.853141298619868e-20]],[3,["46r2eLwu1fPqtmJsINAqA0"]],[3,["aajcY4kBBd8476dCQyztSa"]],[97,1,[0,"f6KlUnoa1Adpo+URWtARGQ"]]],0,[0,-1,3,0,-2,2,0,1,1,0,0,1,0,0,1,0,0,1,0,-4,16,0,30,16,0,0,1,0,0,1,0,-1,3,0,0,1,0,-1,3,0,-2,4,0,2,5,0,2,5,0,2,5,0,2,5,0,2,14,0,6,2,0,2,14,0,2,15,0,6,2,0,2,15,0,2,7,0,14,12,0,2,7,0,14,13,0,2,7,0,2,5,0,2,7,0,0,2,0,-1,12,0,-2,13,0,39,3,0,1,2,0,2,6,0,2,6,0,2,6,0,2,6,0,1,3,0,0,4,0,-1,9,0,-2,10,0,-3,11,0,-4,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,4,1,2,11,3,55],[0,0,0,0,0,0,0,0,0,0,0,0,16],[5,5,23,6,6,-1,-2,-3,-4,-5,-6,-7,23],[643,99,101,34,34,306,307,305,308,309,310,311,644]],[[[71,"sfx_player_air_loop",".mp3",7.993469],-1],0,0,[],[],[]],[[[71,"sfx_ui_prize_level_up",".mp3",0.261224],-1],0,0,[],[],[]],[[[71,"sfx_ui_char_level_up",".mp3",2.037551],-1],0,0,[],[],[]],[[[12,"NorthernHeights_Candy_Cabin_02"],[11,"NorthernHeights_Candy_Cabin_02",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"d9Aze79z1B4o3RquDgkxGH",1,[[6,"NorthernHeights_Candy_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,2.613,0,5.894]],[4,["_lrot"],-12,[3,0,-0.25955231892977776,0,0.9657290477862696]],[4,["_euler"],-13,[1,0,-30.087,0]]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"8dL0gjUHNI0Y2UY450giGJ",1,[[6,"NorthernHeights_Candy_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.499,0,-6.923]],[4,["_lrot"],-17,[3,0,0.2718771702346486,0,0.962331961593919]],[4,["_euler"],-18,[1,0,31.552,0]]]],3]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["b4HgqkzfdUWqFmkq1J+mto"]],[3,["b4HgqkzfdUWqFmkq1J+mto"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-20,[13,"5f7FJZCxdBQLM7FQLVJIQc",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]],[10,0,null,3,[9,"b4HgqkzfdUWqFmkq1J+mto",-21,[13,"7cPP63ELhEo6YeLSOAxXIb",1,[[6,"SM_CandyLogs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["2csK3wTPNX87q5ryFBs4a3"]],5]]],4]],[10,0,null,5,[9,"b4HgqkzfdUWqFmkq1J+mto",-22,[13,"7cPP63ELhEo6YeLSOAxXIb",1,[[6,"SM_CandyLogs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["2csK3wTPNX87q5ryFBs4a3"]],7]]],6]]],0,[0,-1,9,0,-2,3,0,-3,10,0,-4,5,0,-5,11,0,1,1,0,-1,9,0,-2,3,0,-3,5,0,2,4,0,2,4,0,2,4,0,2,4,0,1,3,0,2,6,0,2,6,0,2,6,0,2,6,0,1,5,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0],[5,6,5,5,5,6,5,6],[75,15,98,98,79,15,79,15]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[211,25]],[[[12,"SM_Number_3"],[140,"SM_Number_3",[-2],[2,"26WbSQ+Y9R5JtaR6QI3Hfo",-1,0],[1,1.5,1.5,1.5]],[28,"SM_Number_3",1,[[25,-3,[0,"2bmzc5iexSOJbKUUcR93Np"],[0],[23],1]],[2,"3ddUd1tVpebppuBwx4tOHN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[35,645]],[[[537,"ArgentumNovus-ExtraBoldItalic","ArgentumNovus-ExtraBoldItalic.ttf"],-1],0,0,[],[],[]],[[[12,"NorthernHeights_06_Penguim_01"],[11,"NorthernHeights_06_Penguim_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["2eu7fXgV1UlbM+tjBij0DI"]],[10,0,null,1,[9,"2eu7fXgV1UlbM+tjBij0DI",-4,[13,"a83Ji4q25OUpabmi5nBvPy",1,[[6,"SM_Penguin_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7aGmwe6qNQQKSexyd1lbVf"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[170,22]],[[[71,"sfx_ui_generic_tap_1",".mp3",0.156735],-1],0,0,[],[],[]],[[[261,"../Internal/Effects/custom-unlit-scroll",[{"hash":2445729569,"name":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Noise1TexCoords","stageFlags":1,"binding":1,"members":[{"name":"noise1TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_1"]},{"name":"Noise2TexCoords","stageFlags":1,"binding":2,"members":[{"name":"noise2TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_2"]},{"name":"Constant","stageFlags":16,"binding":3,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_TEXTURE"]},{"name":"noise1Texture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_NOISE_1"]},{"name":"noise2Texture","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_NOISE_2"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]},{"name":"v_noise1_uv","type":14,"count":1,"stageFlags":17,"location":3,"defines":["USE_NOISE_1"]},{"name":"v_noise2_uv","type":14,"count":1,"stageFlags":17,"location":4,"defines":["USE_NOISE_2"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  layout(location = 3) out vec2 v_noise1_uv;\n  layout(set = 1, binding = 1) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  layout(location = 4) out vec2 v_noise2_uv;\n  layout(set = 1, binding = 2) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 4) uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  layout(location = 3) in vec2 v_noise1_uv;\n  layout(set = 1, binding = 5) uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  layout(location = 4) in vec2 v_noise2_uv;\n  layout(set = 1, binding = 6) uniform sampler2D noise2Texture;\n#endif\nlayout(set = 1, binding = 3) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  out vec2 v_noise1_uv;\n  layout(std140) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  out vec2 v_noise2_uv;\n  layout(std140) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  in vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  in vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n      uniform vec4 noise1TilingOffset;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n      uniform vec4 noise2TilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture2D(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture2D(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":200,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NOISE_1","type":"boolean","defines":[]},{"name":"USE_NOISE_2","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"NOISE_1_BLEND_ADD","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MIX","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_2_BLEND_ADD","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MIX","type":"boolean","defines":["USE_NOISE_2"]}]}],[{"name":"opaque","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[12,"NorthernHeights_Spring_Flower_01"],[11,"NorthernHeights_Spring_Flower_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["91oMlxUelSQrket2i9iG50"]],[10,0,null,1,[9,"91oMlxUelSQrket2i9iG50",-4,[13,"ffksdRtCNJ965s/CpFGug3",1,[[6,"SM_FlowerSpring_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["d1z6+YsFFZT4UGA3Pb0OqA"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[646,6]],[[[12,"NorthernHeights_Spring_Cabin"],[11,"NorthernHeights_Spring_Cabin",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[10,0,null,1,[9,"cabsO5BWlZpbsY3dx0SB4M",-4,[13,"c4I7uV/wxAcoc2kr3CXCtC",1,[[8,"SM_CabinSpring_01",["_name"],[3,["cabsO5BWlZpbsY3dx0SB4M"]]],[21,["_lpos"],[3,["cabsO5BWlZpbsY3dx0SB4M"]],[1,0,0,0]],[21,["_lrot"],[3,["cabsO5BWlZpbsY3dx0SB4M"]],[3,0,0,0,1]],[21,["_euler"],[3,["cabsO5BWlZpbsY3dx0SB4M"]],[1,0,0,0]],[14,["_materials","0"],[3,["0cvq1HnbhV8bOuFVo66pGG"]],1],[21,["_lrot"],[3,["9eBNf940dXyKqgLH8LxO9X"]],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474]],[21,["_euler"],[3,["9eBNf940dXyKqgLH8LxO9X"]],[1,-90.00000000000001,-0.0000025044781562438674,0]]]],0]]],0,[0,-1,2,0,1,1,0,-1,2,0,1,2,0,4,1,4],[0,0],[5,6],[647,6]],[[[12,"NorthernHeights_06_EndFlag_01"],[11,"NorthernHeights_06_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[22,42]],[[[71,"sfx_player_smooth_bonus_2",".mp3",0.574694],-1],0,0,[],[],[]],[[[12,"StuntTrigger"],[102,"StuntTrigger",2,[-3],[[538,-4.5,-2,[0,"b2tl+tGT1AyraXlRCC/NZX"]]],[2,"4f4OsAOtpE5puCLDfJlXM+",-1,0]],[352,"VFX_Ring",2,[-4,-5],[2,"15wXHJmUhLDp/ifwpz2PEl",1,0]],[337,"VFX",2,1,[2],[2,"e6iJpfKuVLYJlFtM2bF27+",1,0]],[417,200,2,[0,"3dT/OvUkNCDqmIFT/uoSyV"],[[0,null],6,0],[136,2,[4,4286175999],[4,4289854719]],[15,3,2.4,3],[1],[1],[1],[1],[1],[85,3,6.283185307179586],[1],[15,3,1.2,2],[1],[15,3,1,3],[1],[[98,[7,5]]],[57,true,[225,3,[78,[[86,0.06473214285714285],[40,0.3348214285714286,[4,4278247935]],[40,0.8727678571428572,[4,4278716593]]],[[58,0],[18,255,0.08928571428571426],[18,255,0.7566964285714286],[18,0,1]]],[78,[[86,0.11830357142857145],[40,0.4575892857142857,[4,4278245119]],[40,0.6964285714285714,[4,4278224383]],[40,0.9665178571428571,[4,4278782405]]],[[58,0],[18,255,0.1294642857142857],[18,255,0.794642857142857],[18,0,1]]]]],[128,[1]],[63,true,[66,1,[32,[0,1],[[75,2,0.7148148148148148,0.5966183574879231,1,0.5966183574879231,1],[116,2,1,1,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,3.490658503988659,15.707963267948966]],[52,[1],[1]],[55,[1],[1],[20],[20],-6],[306,4,0,1]],[135,2,[0,"eb9kx9/YZB4LpGyzJKfAFM"],[[2,null],6,0],[20],[15,3,0.05,0.2],[1],[1],[15,3,3,8],[1],[1],[1],[1],[15,3,0.2,0.3],[1],[7,50],[1],[57,true,[59,1,[78,[[86,0.25],[40,0.2946428571428571,[4,4278247679]],[40,0.5245535714285714,[4,4281282537]],[40,1,[4,4283567147]]],[[18,255,0.09151785714285714],[18,200,0.625],[18,0,1]]]]],[299,true,1,2,true,3,0,0,[1]],[63,true,[66,1,[32,[0,1],[[60,2,1],[47,2,0.11851851851851852,-2.689655172413795,-2.689655172413795]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[1]],[52,[1],[1]],[55,[1],[1],[20],[20],-7],[256,1,0.07,0.05,0]]],0,[0,1,1,0,0,1,0,-1,3,0,-1,4,0,-2,5,0,18,4,0,18,5,0,4,1,2,11,3,7],[0,0,0],[-1,7,-1],[73,312,73]],[[{"name":"UI_Panel_Painted Edge v3","rect":{"x":0,"y":0,"width":840,"height":100},"offset":{"x":0,"y":0},"originalSize":{"width":840,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[648]],[[{"name":"UI_Panel_Equip","rect":{"x":0,"y":0,"width":84,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":36},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[649]],[[[36],[11,"SM_GrassSpring_02",[-2],[2,"457FHn4QZasI12t5ee3DN6",-1,0]],[28,"SM_GrassSpring_02",1,[[25,-3,[0,"07qmKEfLhU4pGpiSm675m+"],[0],[23],1]],[2,"f5z4uqJIVez4BAfyRUc4VE",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[650,651]],[[[29,".bin",129035127,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2160,"length":324,"count":81,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2160,"count":45,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.1143457889556885,-1.0429456233978271,-0.11928534507751465],"maxPosition",8,[1,0.8370630145072937,0.7274700999259949,2.3380286693573]]],-1],0,0,[],[],[]],[[[37,"SM_GrassSpring_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1760908979,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5424,"length":1776,"count":444,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5424,"count":113,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9272969365119934,-0.8929151296615601,-1.3070465326309204],"maxPosition",8,[1,0.7736635804176331,1.3252359628677368,5.792426109313965]]],-1],0,0,[],[],[]],[[[37,"SM_DeadTreeSpring_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_DeadTreeSpring_01",[-2],[2,"cfDBGgqlFdVqj6BKWmmZHm",-1,0]],[28,"SM_DeadTreeSpring_01",1,[[25,-3,[0,"97KBB1qCtSYogaujdGijNH"],[0],[23],1]],[2,"359STnhphaKJmnGCynjdZh",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[652,653]],[[{"name":"Icon_Stuns","rect":{"x":3,"y":4,"width":75,"height":72},"offset":{"x":0.5,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[654]],[[[12,"NorthernHeights_02_Logs_01"],[11,"NorthernHeights_02_Logs_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"6dgP8j2aRZD5EHMUZgqMY7",-4,[13,"1bC7OwLylABIG6zgGwTUP7",1,[[6,"SM_Logs_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[10,19]],[[[71,"sfx_player_slide_landing_3",".mp3",1.358367],-1],0,0,[],[],[]],[[[12,"NorthernHeights_05_Tree_03"],[11,"NorthernHeights_05_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"96Wkphaa9DCrR2PWH48Z08",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,26]],[[{"name":"Icon_Level v3 Color","rect":{"x":5,"y":6,"width":55,"height":49},"offset":{"x":0.5,"y":1.5},"originalSize":{"width":64,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[655]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[169,25]],[[[12,"NorthernHeights_Spring_Flower_06"],[11,"NorthernHeights_Spring_Flower_06",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["29Ao9RxsdQeoRWNWuB92h6"]],[10,0,null,1,[9,"29Ao9RxsdQeoRWNWuB92h6",-4,[13,"14MXitzAhAHKB9hsuhTAcf",1,[[6,"SM_FlowerSpring_06",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["aa/SbZPpRbzJIPWAoLsCfB"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[656,6]],[[[36],[11,"SM_FlowerSpring_04",[-2],[2,"dfCXFbNMZXZasu15umd1c4",-1,0]],[28,"SM_FlowerSpring_04",1,[[25,-3,[0,"a9IQsuhvRRcZG2Y8X3hiQS"],[0],[23],1]],[2,"ca4k8IxuNVAbsb3HdTwtyL",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[657,658]],[[[29,".bin",4212745674,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12960,"length":3120,"count":780,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12960,"count":270,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.9081901907920837,-0.9331831932067871,-0.582107663154602],"maxPosition",8,[1,0.9395622611045837,1.089128017425537,1.6364878416061401]]],-1],0,0,[],[],[]],[[[37,"SM_FlowerSpring_04__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"LevelTheme_Autumn"],[88,"LevelTheme_Autumn",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],41,42],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],43]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-21,-22,-23],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-24],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-25],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-26],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-27,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-28,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,1,12],[1,0,0.2,18],[3,4,5,6,7]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,35],[1,0,0.5,25],[8,9,10,11,12]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-31,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,1,-12],[1,0,0.2,18],[13,14,15,16,17]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-32,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,-36],[1,0,0.5,25],[18,19,20,21,22]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-33,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[23,24,25]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-34,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,4,-25],[1,0,0,23],[26,27,28]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-35,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[29,30,31]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-36,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[32,33,34]]],[2,"00YmllBslEkIKTHU7APzih",1,0]],[17,"LeftProps_3",1,[[19,15,5,2.5,0.25,true,-37,[0,"ecVA9O0oNOS4aJi/B6QQDu"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,35],[1,0,0.5,25],[35,36,37]]],[2,"5dOQHSwtFL064LOWkixsGx",1,0]],[17,"RightProps_3",1,[[19,15,5,2.5,0.25,true,-38,[0,"c0TmHRczxEDbGUk9iPOFB2"],[1,0,0,-10],[1,0,0,10],[1,0,2.5,-36],[1,0,0.5,25],[38,39,40]]],[2,"3eIq/OA9pFdpV4UCpR4BxB",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-12,19,0,-13,20,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,0,19,0,0,20,0,4,1,38],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-4,-5,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-2,-3,20,7,29],[293,16,49,143,144,145,146,147,143,144,145,146,147,143,144,145,146,147,143,144,145,146,147,323,324,325,323,324,325,326,327,328,326,327,328,329,330,331,329,330,331,294,17,659]],[[{"name":"UI_GlowCross","rect":{"x":0,"y":0,"width":28,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[660]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[185,23]],[[[29,".bin",645010690,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14848,"length":2148,"count":537,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14848,"count":232,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-7.549791902761172e-9,-8.000001907348633,0],"maxPosition",8,[1,7.549791902761172e-9,8.000001907348633,30.00000762939453]]],-1],0,0,[],[],[]],[[{"name":"UI_Panel_HexSide Shadow","rect":{"x":0,"y":0,"width":88,"height":76},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":76},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[661]],[[[12,"LevelTheme_06"],[88,"LevelTheme_06",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[93,-5,[0,"32tlqVvShMibAeK84ls4/s"],[-2,-3,-4]],[152,true,1,-6,[0,"348aYNj21Ik4NJKgrxEEf+"],[1,-90,-90,0],[7,1],[7,1],33,34],[94,-7,[0,"dcNntbrnVLCYp+5A/gu3GD"],35]],[2,"48azJ8/b5Je6/JCtYeLJHJ",-1,0]],[79,"__spline_node_root__",1,[-19,-20,-21],[2,"59J3H+Vo9FR69fpi+Hh38I",1,0]],[24,"SplineNode",2,[-22],[2,"a7PToqL29FyJNwmAcmcF3q",1,0]],[149,3,[0,"30A8KxNNdO/ZQNGZxjaApN"]],[24,"SplineNode",2,[-23],[2,"4bZ9GPmclH2KGi3EY8DHEb",1,0]],[38,5,[0,"777NnslsBHELbZWUAxcGsM"],[1,0,10,-50],[1,0,9.850711182743044,-60.50689835021296]],[24,"SplineNode",2,[-24],[2,"caEuldezpEdatU3ewLGrED",1,0]],[38,7,[0,"53t6exYx1EJKeGa16jJWos"],[1,0,0,-100],[1,0,0,-103]],[17,"Ground",1,[[153,true,2,-25,[0,"88aMu3T7dKPJ8FeoGzmICO"],[1,-90,-90,0],[7,1],[7,1],0,1]],[2,"eexOX9QgxINLEmYKX/0h+t",1,0]],[17,"Coins",1,[[154,2,1,-26,[0,"49GKEZtAVCwomYBsHa7edd"],[1,0,1,0],[2]]],[2,"a1XBOUeABD/b1kDLNgA87i",1,0]],[17,"LeftTrees_1",1,[[19,15,5,1.5,0.25,true,-27,[0,"1d/rTf57dLoqlVAZrcXIkk"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[3,4,5,6]]],[2,"7cda+kX6xOhpnAfDgEa/OD",1,0]],[17,"LeftTrees_2",1,[[19,15,5,1.5,0.25,true,-28,[0,"b4r0RoK71MS5Efabog/GIc"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[7,8,9,10]]],[2,"a89OcBUANNTJPWSYUmVDHk",1,0]],[17,"RightTrees_1",1,[[19,15,5,1.5,0.25,true,-29,[0,"28fJC6RPFN3L9MbOOL1SgO"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[11,12,13,14]]],[2,"8dV71uN/JHyIfn1+o+QKyE",1,0]],[17,"RightTrees_2",1,[[19,15,5,1.5,0.25,true,-30,[0,"22lqqkG6JAQ78gDTdQ5w/i"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[15,16,17,18]]],[2,"dcAQZDk/VCUrDLI20GNSQG",1,0]],[17,"LeftCabin_1",1,[[54,65,10,true,-31,[0,"19tacxtuhFqb5h3nonI7d9"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[19,20,21]]],[2,"06/7MQJjFKu7eUGoAv1Wrv",1,0]],[17,"RightCabin_1",1,[[54,65,10,true,-32,[0,"30Qejlo3lMtbMLe/65ZdnE"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[22,23,24]]],[2,"a6Uxa/QqVCqLrXt6YEjckx",1,0]],[17,"RightSnowman_1",1,[[19,80,5,1.5,0.25,true,-33,[0,"c9oTTGgNBAmYYXfckBYCvR"],[1,0,90,-10],[1,0,-90,10],[1,0,1,-8],[1,0,0.25,5],[25,26,27,28]]],[2,"22vbHDXdlKoZsBjv+ZT0Yi",1,0]],[17,"LeftSnowman_1",1,[[19,80,5,1.5,0.25,true,-34,[0,"75AY87vddOqrJwhTrTMFfh"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[29,30,31,32]]],[2,"00YmllBslEkIKTHU7APzih",1,0]]],0,[0,1,1,0,-1,4,0,-2,6,0,-3,8,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,9,0,-3,10,0,-4,11,0,-5,12,0,-6,13,0,-7,14,0,-8,15,0,-9,16,0,-10,17,0,-11,18,0,-1,3,0,-2,5,0,-3,7,0,-1,4,0,-1,6,0,-1,8,0,0,9,0,0,10,0,0,11,0,0,12,0,0,13,0,0,14,0,0,15,0,0,16,0,0,17,0,0,18,0,4,1,34],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[20,7,-1,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-4,-1,-2,-3,-4,20,7,29],[209,16,49,148,149,150,151,148,149,150,151,148,149,150,151,148,149,150,151,188,332,188,188,332,662,333,334,335,336,333,334,335,336,210,17,663]],[[[29,".bin",536351645,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24624,"length":5016,"count":1254,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24624,"count":513,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.0449059009552,-1.4957852363586426,-0.5349304676055908],"maxPosition",8,[1,1.497073769569397,1.6982271671295166,2.040611505508423]]],-1],0,0,[],[],[]],[[[37,"SM_FlowerSpring_05__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_FlowerSpring_05",[-2],[2,"3ahgNZzBhd1KBtCM/ETlIX",-1,0]],[28,"SM_FlowerSpring_05",1,[[25,-3,[0,"59Og79xE9TmJi1grNgz/0a"],[0],[23],1]],[2,"49vMLGVSpQh4mLcPLweZRs",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[664,665]],[[[36],[11,"SM_ChristmasSnowman_01",[-2],[2,"afzS+X6JBTj7ZK5x/kINtt",-1,0]],[28,"SM_ChristmasSnowman_01",1,[[25,-3,[0,"bdhl8lHShRRqcRIplZQ3nk"],[0],[23],1]],[2,"99pOovO2NdE4dU2nLIpUnP",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[666,667]],[[[37,"SM_ChristmasSnowman_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1688740710,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47616,"length":6648,"count":1662,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47616,"count":992,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3003618717193604,-0.9146365523338318,-0.23210862278938293],"maxPosition",8,[1,1.4088363647460938,0.8018474578857422,2.4997873306274414]]],-1],0,0,[],[],[]],[[[29,".bin",1876262758,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5328,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5328,"count":111,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0649467706680298,-1.0650538206100464,-2.8358912467956543],"maxPosition",8,[1,1.0650935173034668,1.0649864673614502,4.490630149841309]]],-1],0,0,[],[],[]],[[[36],[11,"SM_TreeAutumn_02",[-2],[2,"84XkwkP29X8ZzAyABT0pML",-1,0]],[28,"SM_TreeAutumn_02",1,[[25,-3,[0,"db9mz7wxFdJYS1lx48iTd3"],[0],[23],1]],[2,"a4VjRN7OtVz4FoFx/Hl7l9",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[668,669]],[[[37,"SM_TreeAutumn_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[71,"sfx_ui_final_meter_growing_loop",".mp3",6.974694],-1],0,0,[],[],[]],[[{"name":"Icon_Play","rect":{"x":0,"y":0,"width":60,"height":68},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":68},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[670]],[[[36],[11,"SM_Tree_03",[-2],[2,"cdp8jEgddTwrC1yCihMl2M",-1,0]],[28,"SM_Tree_03",1,[[25,-3,[0,"62hyj5uilQ/I1xztMqM/oR"],[0],[23],1]],[2,"66JFlBADJWMrYAbeWI0xy9",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[671,672]],[[[37,"SM_Tree_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",1656633026,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5376,"length":1152,"count":288,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5376,"count":112,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.250575304031372,-1.2505755424499512,-2.8358912467956543],"maxPosition",8,[1,1.250575304031372,1.250575065612793,5.556077003479004]]],-1],0,0,[],[],[]],[[[37,"SM_FlowerSpring_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",4288966192,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18000,"length":3660,"count":915,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18000,"count":375,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3598692417144775,-1.7014336585998535,-0.548612117767334],"maxPosition",8,[1,1.597337007522583,1.632856011390686,1.2413729429244995]]],-1],0,0,[],[],[]],[[[36],[11,"SM_FlowerSpring_03",[-2],[2,"9cxpBaphVZvIToIVmR+I6a",-1,0]],[28,"SM_FlowerSpring_03",1,[[25,-3,[0,"630cMRBGRdNoqPhaYY1Uh3"],[0],[23],1]],[2,"ea89U+qnBaSb5D/f9ejkdx",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[673,674]],[[[12,"NorthernHeights_05_Cabin_01"],[11,"NorthernHeights_05_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"f8UfN/WNFJ1KBrf5UhK1IL",1,[[6,"NorthernHeights_01_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,5.595]],[4,["_lrot"],-12,[3,0,0.2951744758657925,0,0.9554433676557469]],[4,["_euler"],-13,[1,0,34.336,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],3]]],2]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"56qFSMTmdD/p1qMtFLMmlo",1,[[6,"NorthernHeights_01_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.812,0,-6.011]],[4,["_lrot"],-17,[3,0,-0.27324575741241686,0,0.9619442582894887]],[4,["_euler"],-18,[1,0,-31.715,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],4],[4,["_lpos"],4,[1,0,0,0]],[4,["_lrot"],4,[3,0,0,0,1]],[4,["_euler"],4,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,2,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",2,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",3,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],9]]],8]]],0,[0,-1,9,0,-2,2,0,-3,10,0,-4,3,0,-5,11,0,1,1,0,-1,9,0,-2,2,0,-3,3,0,2,5,0,2,5,0,2,5,0,2,5,0,1,2,0,2,6,0,2,6,0,2,6,0,2,6,0,1,3,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0,0,0],[5,6,5,6,5,6,5,6,5,6],[72,26,39,26,39,26,10,8,10,8]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[184,23]],[[[12,"NorthernHeights_07_Snowman_03"],[11,"NorthernHeights_07_Snowman_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c5SYjPwgRcuL97U87Vl4M2"]],[10,0,null,1,[9,"c5SYjPwgRcuL97U87Vl4M2",-4,[13,"d6ZfKOhiBP1JGSkMpo5vAh",1,[[6,"SM_Snowman_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["02CzqvZAtcc7DrBai4T6a0"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[58,24]],[[[71,"music_gameplay_loop",".mp3",75.598367],-1],0,0,[],[],[]],[[[12,"NorthernHeights_06_Igloo_01"],[11,"NorthernHeights_06_Igloo_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,22]],[[[448,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[337,25]],[[[12,"NorthernHeights_Spring_Snowman_01"],[11,"NorthernHeights_Spring_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["c3TD40tENRmpNmA+1hIUc4"]],[10,0,null,1,[9,"c3TD40tENRmpNmA+1hIUc4",-4,[13,"24fKznZ3xHmYM9vZQ6RPtl",1,[[6,"SM_SnowmanSpring_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["5aEmTLcx5fuI6Xmv0h71iB"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[675,6]],[[[12,"LevelThemeEnd_02"],[88,"LevelThemeEnd_02",[-5,-6],[[147,-4,[0,"3a31Fn7mJHI44g1L5nA/Wp"],-3,-2]],[2,"6bh4pjtVdHgKDPPP+Zkh09",-1,0]],[143,"LevelTheme_01",1,[-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[[93,-12,[0,"f4Vn0TlDtNHYcfAQjo5ih6"],[-7,-8,-9,-10,-11]],-13,[94,-14,[0,"3diGXu7g9DZrH+tMzcqQQT"],27]],4,1,4],[2,"farzyFTIpJKogz/NiS2XJV",1,0]],[79,"__spline_node_root__",2,[-26,-27,-28,-29,-30],[2,"a00ETlYHxHR78wGZxHs1Vh",1,0]],[142,"VFX",1,[-31,-32],[2,"acgAsityVPKKW2CCFvZTKE",1,0],[1,1.748,0,0]],[24,"SplineNode",3,[-33],[2,"6cf/g2iytG9LA+oaccvmGS",1,0]],[148,5,[0,"9c8cXsnUdBaK3QswSNlgSI"],[1,0,0,-1]],[24,"SplineNode",3,[-34],[2,"c1xIVvGY9LtY6TrYOB2W68",1,0]],[38,7,[0,"580+IFkr9BVKjAOCf5PCly"],[1,0,0,-1000],[1,0,0,-1001]],[24,"SplineNode",3,[-35],[2,"24BOYynQNOF7OhPPbE/fgR",1,0]],[38,9,[0,"a8pqglbp5D4IbEv+mqfIxw"],[1,0,0,-1250],[1,0,0,-1251]],[24,"SplineNode",3,[-36],[2,"34Wr1B8YpEqbtrJjVQqwpP",1,0]],[38,11,[0,"31p2gBG0RFUJSq16IeWe+7"],[1,0,0,-1500],[1,0,0,-1501]],[24,"SplineNode",3,[-37],[2,"de7EIripBJdaB3AV849Jm9",1,0]],[38,13,[0,"92Uld/AFNG4LlCV6w/eO6D"],[1,0,0,-2000],[1,0,0,-2001]],[24,"Ground",2,[-38],[2,"9ba82JXcBNu75C5zZxtvUS",1,0]],[150,true,2,15,[0,"15iWjE+gRIeZf9NRYTkGZd"],[1,-90,-90,0],[7,1],[7,1]],[30,"LeftTrees_1",false,2,[[19,15,5,1.5,0.25,true,-39,[0,"1dlrEthkFCdILJpAcKGrTp"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,12],[1,0,0.25,18],[0,1,2,3]]],[2,"8bl3R/+6ZPD6Bpxvi+EEYn",1,0]],[30,"LeftTrees_2",false,2,[[19,15,5,1.5,0.25,true,-40,[0,"83piL6pkJL3I4f+J0GToxz"],[1,0,0,-10],[1,0,0,10],[1,0,2,35],[1,0,0.25,25],[4,5,6,7]]],[2,"99hWagmQpNe5kqPHcyzitd",1,0]],[30,"RightTrees_1",false,2,[[19,15,5,1.5,0.25,true,-41,[0,"1apzfOCn1KCpdMIeCIa23R"],[1,0,0,-10],[1,0,0,10],[1,0,0.25,-12],[1,0,0.25,18],[8,9,10,11]]],[2,"25CFn/9XxGg7XGhcDrzRlR",1,0]],[30,"RightTrees_2",false,2,[[19,15,5,1.5,0.25,true,-42,[0,"33ZP7Y/I5GG42RYVq9CaS2"],[1,0,0,-10],[1,0,0,10],[1,0,2,-36],[1,0,0.25,25],[12,13,14,15]]],[2,"e9EdneQz1IC7lr3iaY+mOi",1,0]],[30,"LeftCabin_1",false,2,[[54,65,10,true,-43,[0,"7aBc3P+0hJD4OuFDi6SymM"],[1,0,-30,-10],[1,0,30,10],[1,0,3,23],[1,0,0,25],[16,17,18]]],[2,"1dX393ZhxI8ZBGeTev74R8",1,0]],[30,"RightCabin_1",false,2,[[54,65,10,true,-44,[0,"0d1/x75+9Ncrm0oBNyNhWU"],[1,0,30,-10],[1,0,-30,10],[1,0,3,-25],[1,0,0,23],[19,20,21]]],[2,"27QPvSx1tImIzTKHUuRyDo",1,0]],[30,"LeftSnowman_1",false,2,[[19,80,5,1.5,0.25,true,-45,[0,"ffKax6RfJC6pCcOPzfr6cE"],[1,0,-90,-10],[1,0,90,10],[1,0,1,8],[1,0,0.25,5],[22,23,24]]],[2,"aed7a3aZVCLr18EyqUTWnN",1,0]],[17,"RightEndFlag_1",2,[[95,100,true,-46,[0,"40gYMBHjhDxoCORbH8uE1x"],[1,0,1,-8],[1,0,0,5],[25]]],[2,"01LF5R0/hOkp7785kJDZ5w",1,0]],[17,"LeftEndFlag_2",2,[[95,100,true,-47,[0,"b8pSyDxh5Pw6CENiSRaQro"],[1,0,1,8],[1,0,0,5],[26]]],[2,"7fJ1Tsw8RLzbQD9QX9h6CD",1,0]],[151,true,1,2,[0,"42X6obsoxGoZ5zv6QZ7/rC"],[1,-90,-90,0],[7,1],[7,1]],[109,"VFX-EndWallA",4,[[25,-48,[0,"41Qy1r5xlG9JOdB1Kr8k24"],[28],[23],29]],[2,"e3KzR9WNFH0IHrmVXcLLNT",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[144,"VFX-EndMotes",4,[-49],[2,"3fuzuCSNJHWK7Gt+Ayvr4L",1,0],[1,-0.431,0,0],[3,-0.49999999999999994,0.49999999999999994,0.5000000000000001,0.49999999999999994],[1,1.342,1.719,2.906],[1,90,-90,180]],[135,28,[0,"93DCqtIDJHwYlkROSEQ27O"],[[30,null],6,0],[106,2,[4,1845493759]],[15,3,1,2],[1],[1],[15,3,-2,-1],[1],[1],[85,3,6.283185307179586],[1],[15,3,2,4],[1],[7,10],[1],[57,true,[59,1,[78,[[86,0.11830357142857142],[40,0.6428571428571428,[4,4291799310]],[40,1,[4,4285019188]]],[[58,0],[18,255,0.06473214285714285],[18,255,0.10491071428571429],[18,0,1]]]]],[146,true,0,[1],[1,0,0,15],[1,1,16,30]],[63,true,[66,1,[32,[0,0.29743589743589743,1],[[75,2,0.7296296296296296,1.484567901234568,0.13246760362143067,1.484567901234568,1],[60,2,0.9777777777777777],[75,2,0.4222222222222222,-1.6143790849673199,1,-1.6143790849673199,1]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,-3.141592653589793,3.141592653589793]],[52,[1],[1]],[55,[1],[1],[20],[20],-50],[61,31]]],0,[0,1,1,0,33,16,0,34,26,0,0,1,0,-1,2,0,-2,4,0,-1,6,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,0,2,0,-2,26,0,0,2,0,-1,3,0,-2,15,0,-3,17,0,-4,18,0,-5,19,0,-6,20,0,-7,21,0,-8,22,0,-9,23,0,-10,24,0,-11,25,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,13,0,-1,27,0,-2,28,0,-1,6,0,-1,8,0,-1,10,0,-1,12,0,-1,14,0,-1,16,0,0,17,0,0,18,0,0,19,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,0,27,0,-1,29,0,18,29,0,4,1,50],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,26,26],[-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-4,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,-1,29,-1,7,-1,17,20,7,20,7],[2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,11,12,13,11,12,13,31,32,33,338,338,36,47,48,30,27,248,16,255,17]],[[[71,"sfx_ui_generic_tap_2",".mp3",0.156735],-1],0,0,[],[],[]],[[[12,"NorthernHeights_02_Igloo"],[11,"NorthernHeights_02_Igloo",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["46AKCJeXlXdZX/zpHket8X"]],[10,0,null,1,[9,"46AKCJeXlXdZX/zpHket8X",-4,[13,"b2+c1s135POJlyr+v26/9H",1,[[6,"SM_Igloo_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["24OuBDRGNdSL6nTbWV63FN"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[53,19]],[[[12,"Content Holder_Rewards"],[163,"Content Holder_Rewards",33554432,[-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[[[5,-2,[0,"c5UfhEXZFGsZK8uHi9J7WP"],[5,414,896]],[90,45,100,100,1,-3,[0,"7fAJFHmb1DQ5EffGV4kcdy"]],[134,false,-4,[0,"53UCLrVLJNfr6V3u1FGT4n"],[104,105,106,107],108],-5,[249,-9,[0,"abIARDfSpBlajSyorYHZqn"],[[145,"playWindTransition",[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-6]]],[382,"currencyParticle"],[145,"coinBonusReceiveFinished",[[42,"04734e5Zp1KiYseHUCwDl6y","onCoinBonusReceiveFinished",-7]]],[145,"tweenCoinToValueWithBonus",[[42,"a2904hJ73FIZZGvsAnIQZ4d","changeToAfterBonus",-8]]]]],-10,[167,-12,[0,"91t4LoHVJHVLfGnzz+vmY6"],-11],[250,-19,[0,"42xGrew/lD6rSJxuT1XfDm"],-18,[-13,-14,-15,-16,-17]]],4,4,4,1,4,1,4,4],[357,"deK4EAFEpOwKyES4+zZD0+",[],-1,0]],[132,"Panel_Speed",33554432,[-34,-35,-36,-37,-38,-39,-40],[[[41,-30,[0,"211Vm59LtHaLN3TyNQaBJq"],[5,192,64],[0,0,0]],[34,-31,[0,"28t1Wc76ZMP6Tx4tfFu9cq"],[4,4281539080],58],[82,-32,[0,"4aCgIHWZBOpLIpsA8f5QZY"]],-33],4,4,4,1],[2,"98nDA0xuBH862+IocH3IQs",1,0],[1,-112,-3,0]],[132,"Panel_Prize",33554432,[-45,-46,-47,-48,-49,-50,-51],[[[41,-41,[0,"62fviBLuVJIZIqr5v21ATe"],[5,192,64],[0,0,0]],[34,-42,[0,"2dhaQdl/BAgKplbt5PXenD"],[4,4281539080],82],[82,-43,[0,"64H2t7XjJM04OojMnzjaD+"]],-44],4,4,4,1],[2,"2dURMv+6dD2YnSAMG1QMVR",1,0],[1,-80,-86,0]],[237,"Holder_Player Level",33554432,[-57,-58,-59,-60],[[[5,-52,[0,"7f5DgsI7VHioQ3mGIz3nNx"],[5,240,100]],[378,false,18,270,-8,109,1,-53,[0,"e92qNldbhKPIhzFc4ex8Wb"]],[283,-54,[0,"bd2T89NCNPEqtkq5mspryD"],[29],30],[82,-55,[0,"a6HUCsTfdGg57KKS3niL1I"]],-56],4,4,4,4,1],[2,"4elqpcRThCg6O1bZ2wbbua",1,0],[1,-8,109,0],[1,1.4,1.4,1]],[102,"Holder_Snow Panel",33554432,[-63,-64,-65,-66,-67,-68],[[5,-61,[0,"f5TQ9mfLpEnbZgapy+Eclt"],[5,414,100]],[124,44,100,1,-62,[0,"16VLyCWHNLPrT3sLn9X3sA"]]],[2,"4aYkO75xlDxIEPL+IvaYVQ",1,0]],[175,"Button_Ad",false,33554432,2,[-73,-74,-75,-76],[[[5,-69,[0,"61J0fgEGxM1LGOoT6fOpsj"],[5,80,80]],-70,[127,"sfx_ui_prize_level_up",-71,[0,"5dXfdHoiNFcYUTnnTqF6+p"]],[118,true,-72,[0,"d5kZ8i0blPAZscIyHeBwer"],[56],57]],4,1,4,4],[2,"22AOi1Io5E+poJa1qMMotA",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[175,"Button_Ad",false,33554432,3,[-81,-82,-83,-84],[[[5,-77,[0,"9cyBcn5uRNyKsvPdL9cVtE"],[5,80,80]],-78,[127,"sfx_ui_prize_level_up",-79,[0,"8aQQTS8cVPvKYvzUQYUrQ+"]],[118,true,-80,[0,"457LIXQtREc5t6PlLvfxlU"],[80],81]],4,1,4,4],[2,"15h7d9TLFLn4kR7dwE8USs",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[163,"LevelDirector",33554432,[-92],[[[27,-85,[0,"f13CQ8nrNCioeUU4nP2Bf6"]],-86,-87,-88,-89,[313,-91,[0,"d1To9fDihJXJHYysBhrnKL"],-90]],4,1,1,1,1,4],[2,"92TM+uVppNSayILsKJhzwz",1,0]],[49,"TopPanel",33554432,1,[-95,-96,-97,-98],[[5,-93,[0,"d5j0eh/TZM+oKZTZad6P6y"],[5,414,100]],[124,41,100,1,-94,[0,"c5UKlmAr1DyI89/XsyBVWN"]]],[2,"6aHoKiuExP/7+jsHd70V8h",1,0],[1,0,398,0]],[49,"Button_Menu",33554432,9,[-105,-106],[[5,-99,[0,"dbaHsKTOZN1qJsOVFhL+Fe"],[5,72,72]],[31,0,-100,[0,"87O8Vv3ZJB0pml430+rk2W"],11],[110,3,0.9,-103,[0,"f0bAADGRpOvbHd1Mpj4dQJ"],[[42,"aecc3eyrV5CIJ3gY0IvvvqR","goToMenu",-102]],-101,12],[318,-104,[0,"36JPgLWWRABYw16GpGUmbs"]]],[2,"30TRDricZNCYEMSKjEsImJ",1,0],[1,142.946,-5.987,0]],[49,"XP_Bar Outline",33554432,4,[-109,-110,-111,-112,-113],[[5,-107,[0,"a60e4+nY9AH4xE9rUyvcee"],[5,220,64]],[34,-108,[0,"70wInQsL5EBojMPpaT2M45"],[4,4281539080],23]],[2,"f4dNsyZQRN0rwZ7P6ZXy9G",1,0],[1,7.741,-4.007,0]],[157,"Button_MAX",false,33554432,2,[-117,-118,-119],[[5,-114,[0,"5d7Ym3CU9I5rZlMyiQS00l"],[5,80,80]],[222,3,0.9,-115,[0,"edUWzLMUtEbqRDLZq9U5Zo"]],[181,"sfx_ui_speed_level_up",null,-116,[0,"ba4kBJi5NKFrpmFfahPr0P"]]],[2,"816x8/hG1JELZpYVyts1Yw",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[157,"Button_MAX",false,33554432,3,[-123,-124,-125],[[5,-120,[0,"247NZg/9FJura0UrSkXyum"],[5,80,80]],[222,3,0.9,-121,[0,"17STSml3VNFqHyPmE9FVYq"]],[181,"sfx_ui_speed_level_up",null,-122,[0,"a4KcVrlKVE3aA3120QD6v1"]]],[2,"2dapyemh1LgqXS921q5AhO",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[49,"Button_SkinShop",33554432,5,[-132,-133],[[5,-126,[0,"212cMIOKlIYL/TwALKTkEe"],[5,108,96]],[31,0,-127,[0,"e5fYUMbglNZojCJUeYwoMe"],90],[110,3,0.9,-130,[0,"28RJ9cK5VKbImXTbuM7ok1"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-129]],-128,91],[104,2,-131,[0,"a9lEk+23JCHZHI0TPYgQr+"]]],[2,"f5KVaGCsdFA5zZmUikbLx6",1,0],[1,122,18,0]],[49,"Button_Play",33554432,5,[-140,-141],[[5,-134,[0,"deNWZKGeJA3739yTxlU3to"],[5,148,148]],[31,0,-135,[0,"79X2KKbixKaLrCCvL65oY6"],95],[110,3,0.9,-138,[0,"f6oAn53GZA/ZKYSHVr28Dt"],[[42,"aecc3eyrV5CIJ3gY0IvvvqR","restartGame",-137]],-136,96],[318,-139,[0,"0aO0db1EhD1osKCUi9s7Jq"]]],[2,"34r3N7RO5DQ4/WLeUAmh4C",1,0],[1,91.24,222.945,0]],[49,"Level_Outline",33554432,4,[-144,-145,-146,-147],[[5,-142,[0,"d9bvelFgJFbreztT/uekIm"],[5,64,64]],[125,0,false,-143,[0,"c3G56Ki5RKZI7/4bEE8sY0"],[4,4281539080],27]],[2,"23YRPBc09Dlqf+Vpy93zju",1,0],[1,-89.061,-27.334,0]],[214,"Button_Upgrade",33554432,2,[-151,-152,-153],[[[5,-148,[0,"fdTCsGSxFCF4ZIUUGkPHdS"],[5,80,80]],-149,[127,"sfx_ui_speed_level_up",-150,[0,"23yvf5gwBBlLwnlBUjyz5L"]]],4,1,4],[2,"302/9Df2ZMnqp2e+icpYU7",1,0],[1,163.94299999999998,53.69200000000001,0],[1,0.92,0.92,1]],[157,"Button_NotEnough Money",false,33554432,2,[-158,-159],[[5,-154,[0,"564CgRXm5OrKp1CpXNkRJh"],[5,80,80]],[223,false,3,0.9,-156,[0,"73q1ZzUrJPXqvkKwnscqsg"],-155],[127,"sfx_ui_speed_level_up",-157,[0,"bf1wlO1ENLhbNRfTchDHp9"]]],[2,"32SFVijflNkJqzgoOrMJGu",1,0],[1,163.94299999999998,53.692000000000036,0],[1,0.92,0.92,1]],[214,"Button_Upgrade",33554432,3,[-163,-164,-165],[[[5,-160,[0,"beeoEPP9pC6atqC3SFqugE"],[5,80,80]],-161,[127,"sfx_ui_prize_level_up",-162,[0,"fcvuFL99ZEFKN8UH1MlmMT"]]],4,1,4],[2,"a6oNb564lGCJoL34Wxz+jN",1,0],[1,164.216,53.01599999999999,0],[1,0.92,0.92,1]],[157,"Button_NotEnough Money",false,33554432,3,[-170,-171],[[5,-166,[0,"fcM45NmPxOR7Imb7xQ5XPf"],[5,80,80]],[223,false,3,0.9,-168,[0,"94WDil6+BBY7dq8BlEGXy+"],-167],[127,"sfx_ui_speed_level_up",-169,[0,"9ftSHwe2RP1ofeHAmUVlQ/"]]],[2,"73NbLnX6pGZLr2jtvs9jTl",1,0],[1,163.94299999999998,53.692000000000036,0],[1,0.92,0.92,1]],[194,"Holder_VFX",false,33554432,1,[-174,-175,-176],[[5,-172,[0,"36YfYbq9ZN5b6S+oUDcpSF"],[5,414,896]],[50,45,100,100,-173,[0,"afv16NZZJOerVNdK3Bzb0h"]]],[2,"78oZPiCVdF7LelLpxGIiZB",1,0]],[49,"Holder_Currency Total",33554432,9,[-180,-181],[[5,-177,[0,"baTxaqK4ZFq4HAA4E17RIO"],[5,180,90]],[281,17,10,-90,-178,[0,"f8Qkw5DoJERb4TuI90qh5P"]],[82,-179,[0,"bazYc8/lJDnbQxCUwc0OUG"]]],[2,"df15LFkRxIQ5JMcX6i+/yk",1,0],[1,-90,-5,0]],[69,"Panel_Color",33554432,22,[-185,-186],[[41,-182,[0,"c9N+LVvJ9PoqGpFOUD8r6T"],[5,53.04,36],[0,0,0.5]],[39,0,-183,[0,"36RBwpMGhKTaZHaxuZtEeS"],[4,4288169471],6],[293,1,1,16,18,-184,[0,"1ePvBrsYNCNZtMm2WbfSTo"]]],[2,"330z8qkmpLupWGN/ORcIXD",1,0],[1,-59.605,-3.402,0],[3,0,0,0.03489949670250097,0.9993908270190958],[1,0,0,4]],[156,"Holder_Bonus",33554432,[-190,-191],[[41,-187,[0,"ebNxOep1pMUKxjUYTJLdwb"],[5,80,30],[0,0,0.5]],[404,1,-188,[0,"72HptSC0lDMIhOB+HByCSW"]],[408,0,-189,[0,"f9G3O+13FCga+hLULPcsCA"]]],[2,"edRLCrvPxD5bjpmL5mbzmc",1,0],[1,-39.377,-34.799,0]],[239,"Text_PrizeStats",33554432,24,[-197],[[[41,-192,[0,"18wVYjapZOCKDrCxNsyxns"],[5,47.510000000000005,32.92],[0,0,0.5]],-193,[91,2.6,-194,[0,"4bgP+29SFDRa1Di+beOqS7"],[4,4282914694]],[539,-196,[0,"43IFzuwwBI5p7L5ZPs82Av"],-195]],4,1,4,4],[2,"806Y5nEHtPeqZReKV9NeH0",1,0],[1,54.46,3.191,0]],[68,"Button_Color",33554432,10,[-201],[[5,-198,[0,"19ID7eVaRMHI0wp6WXSyRZ"],[5,72,72]],[39,0,-199,[0,"df+YTvnNJCTak8KmFfhED/"],[4,4294893341],10],[50,45,156,152,-200,[0,"365JkvhvpPa6OqEQZPK5Rt"]]],[2,"73mzw5YBRPAqAbjaFmk+KN",1,0]],[68,"MidPanel",33554432,1,[4,-204],[[5,-202,[0,"d0gTXt2cRCNLC17KiEqaCT"],[5,414,896]],[90,45,100,100,1,-203,[0,"54yaPtsd5LuoMY71T2le3r"]]],[2,"07lcokye5Ij63cEIfK+fpU",1,0]],[69,"Holder_UpgradeCost",33554432,2,[-207,-208],[[5,-205,[0,"15aHBP/4xKbo51MyTboEMy"],[5,40.69,20]],[105,1,1,1,-206,[0,"5dUf89oPlE9rlKrqd0vm3j"]]],[2,"9eP/jkiRNIgqhZgLEASuZf",1,0],[1,157.321,91.62900000000002,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[69,"Holder_UpgradeCost",33554432,3,[-211,-212],[[5,-209,[0,"d2/+zea1JGOIuDwPZ9ezr4"],[5,40.69,20]],[105,1,1,1,-210,[0,"d4V6ktY0FCFpPKcRlHWu9J"]]],[2,"01kcBEx59Dzolw/hMNxs+n",1,0],[1,157.594,90.953,0],[3,0,0,0.07845909572784496,0.9969173337331279],[1,0,0,9]],[68,"Button_Color",33554432,14,[-216],[[5,-213,[0,"9a4f0V4jBFzaanchwkH3UJ"],[5,108,96]],[39,0,-214,[0,"43g/wDJzVGYIIFLhRk9iRa"],[4,4294400626],89],[50,45,88,76,-215,[0,"6bTHjA4lxHaIeuheId70HW"]]],[2,"dc0yVr/8lPaJEOJIKvFFFc",1,0]],[68,"Button_Color",33554432,15,[-220],[[5,-217,[0,"4aHMvdopJA45J9u6HpdfV9"],[5,148,148]],[39,0,-218,[0,"e25Ym7LOhHHrqD+WsyKEf8"],[4,4292759605],94],[50,45,156,152,-219,[0,"44DFQvKO5GLKFlalQPRPrX"]]],[2,"fa4wDRIutPLYfbDBnO1nEf",1,0]],[68,"Scripts",33554432,1,[-222,-223,8,-224],[[27,-221,[0,"4an+h6JixBSqYb793I3XcQ"]]],[2,"5duz4U6ydO56eMJu6Tnu/3",1,0]],[26,"Rewards",33554432,32,[[27,-225,[0,"e0P+9hFWtIvpoVe73RdzOk"]],[540,-227,[0,"eeXbrPF5pIfJjuMKu9krV8"],[[42,"51cbayfFYRI0b4PXBU6JCiq","raise",-226]]],[541,-229,[0,"16lHn4ZpBGJL2hS2jlJ4gu"],-228],[104,17,-230,[0,"e3wgLvNFxIFJAvw7GcvGje"]]],[2,"ednmIk1a5IS4huo76wKn3V",1,0]],[141,"Particle Snow",false,33554432,1,[[418,true,2,0.4,true,10,-231,[0,"48jcwSbAhD2b4uei6pFiVa"],[[1,null],6,0],[136,2,[4,2532059597],[4,2525818401]],[424,3,200,30,20],[15,3,14,8],[1],[1],[1],[1],[15,3,0.13962634015954636,0.22689280275926282],[1],[7,2],[15,3,4,8],[7,6],[1],[57,true,[59,1,[100,[[58,0],[18,255,0.5491071428571428],[18,0,1]]]]],[428,true,0,true,1,1,3,5,0,30,0,[7,1],[1,50,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,2]],[76,-232,[0,"6fYVJ7ltNMlb9llxse+m29"]],[5,-233,[0,"4cMnvM7L1LjYUcWQTIYaJY"],[5,100,900]],[221,8,157,1,-234,[0,"ff2nAybyJEubMQLLsTOamg"]]],[2,"2bCiejLT1FI6OkQ2LdOb3c",1,0],[1,0,500,0],[3,-0.7071067811865475,-9.813077866773593e-18,9.813077866773595e-18,0.7071067811865476],[1,-90,0,1.5902773407317584e-15]],[22,"Text_%",33554432,25,[[5,-235,[0,"3de3mbVcJEzrzY13b+dHNj"],[5,16.5,29.14]],[260,"%",0,14,14,19,false,-236,[0,"deWLuajvZJ+7ynTAL69vzS"],5],[91,2.6,-237,[0,"caOrIVHtFMqY4yooaVHco0"],[4,4282914694]],[379,32,-12,-238,[0,"b59dog2s1FiZdneFJt90ke"]]],[2,"d0KLzXgk1C+oDZgTaYW/Pp",1,0],[1,51.260000000000005,-4.255,0]],[238,"Text_DistanceValue",33554432,[-242],[[[41,-239,[0,"2eGjPut2FPcJBQ0Rye+QEz"],[5,168.78,87.6],[0,1,0.5]],-240,[91,6,-241,[0,"3aEvND6R5BLYAr1EC9WJFU"],[4,4281539080]]],4,1,4],[2,"82N++vrrBFUYmEMe8/cYdr",1,0],[1,56.575,16.514,0],[3,0,0,0.052335956242943835,0.9986295347545738],[1,0,0,6]],[271,"Panel_Color",33554432,[-245,-246],[[5,-243,[0,"5brv3GVIhFtJLWiSZtKRGp"],[5,110,54]],[39,0,-244,[0,"eagZKX5gVCBqiZA5J4Pot7"],[4,4281539080],18]],[2,"bda6DHtIRIV4ri5hHfVdw9",1,0],[1,28.065,11.757,0],[1,0.5,0.5,1]],[271,"Panel_Color",33554432,[-249,-250],[[5,-247,[0,"04NcMT68hEQbPvwMoqg8TD"],[5,154,66]],[31,0,-248,[0,"b4l3IyvZhNbanAT2oYMfsP"],22]],[2,"0aDP/dgYdEGJf1o0Nxjzog",1,0],[1,20.086,11.757,0],[1,0.5,0.5,1]],[49,"BotPanel",33554432,1,[5],[[5,-251,[0,"e22yHz6eRABrbe/Z25y4bg"],[5,414,100]],[124,44,100,1,-252,[0,"006/E4HDVMWpwZosEDH0hj"]]],[2,"55G0Sx2+hNU60B+1sCXTaM",1,0],[1,0,-398,0]],[69,"Panel_Color",33554432,5,[-256],[[5,-253,[0,"5cKFn6w/pF6LO/I+bdLkwY"],[5,1000,390]],[201,3,0,1,-254,[0,"beIlT0MHVAMaGf63urXhV6"],34],[380,false,44,-247,-339,-213.75900000000001,60,1,-255,[0,"994PLaBtdB8bJSPwXMMjL8"]]],[2,"83/habo9ZEa4bVkbdlj1V2",1,0],[1,46,-73.75900000000001,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[49,"Holder_Stats Info",33554432,5,[2,3],[[5,-257,[0,"07Indu7iRBM7nDSykNsQ3x"],[5,260,200]],[245,20,-76.322,1,-258,[0,"2038FAyFBPL6DoAwfCF/PX"]]],[2,"86oHAV9uZJL6p28NATzIxo",1,0],[1,-76.322,50,0]],[69,"Holder_CurrentSpeed",33554432,2,[-261,-262],[[41,-259,[0,"b1i6TNx3NBeqbdfTj41SqS"],[5,80.88,40],[0,1,0.5]],[105,1,1,-14,-260,[0,"6aQUFaXkhNX6TaXjWUptat"]]],[2,"ffHBodf/5DL68x/ozvq4jo",1,0],[1,129.422,41.32600000000002,0],[3,0,0,0.06975647374412529,0.9975640502598243],[1,0,0,8]],[49,"Color",33554432,17,[-265],[[5,-263,[0,"492oa8TL5If7RsIwNBtPNH"],[5,88,76]],[34,-264,[0,"00nKRDMuhDLJK00mEHe1j6"],[4,4278250032],42]],[2,"7fefdi8tVBuo3F45qbLSZh",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,18,[-268],[[5,-266,[0,"dc5NsTltdH4qof6vl/ytN3"],[5,88,76]],[34,-267,[0,"d31i5cJZtOHJX+cWefMVFh"],[4,4286936683],45]],[2,"253YEwyRpILaV9IZMGj8tx",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[210,"Holder_FreeUpgrade",33554432,6,[-272],[[5,-269,[0,"88run0etlAOr9tUgs9oyOy"],[5,42.95,18]],[105,1,1,1,-270,[0,"9alCmRHoxMuZcIV5v2wxfn"]],[31,0,-271,[0,"daTkkISghA3rLfzGTY7lCX"],51]],[2,"030nnp+s1MeL3BXlAIMHXu",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,1.0869565217391306,1.0869565217391306,1],[1,0,0,8.999999999999998]],[69,"Holder_CurrentPrize",33554432,3,[-275,-276],[[41,-273,[0,"9cqXwfS/pGrJ5uNi3McJjI"],[5,59.129999999999995,40],[0,1,0.5]],[105,1,1,-14,-274,[0,"bfB30pl59JTJWMC2DkBwMm"]]],[2,"0eYbK60/dB+5szrmckraap",1,0],[1,126.785,40.241,0],[3,0,0,0.06975647374412529,0.9975640502598243],[1,0,0,8]],[49,"Color",33554432,19,[-279],[[5,-277,[0,"74dCIA2Y9MhJPiHnt08Y6X"],[5,88,76]],[34,-278,[0,"00s3YFJ4BIIJ99GajVWKXo"],[4,4278250032],66]],[2,"1cqvZNgoBBJ5gPLCCMFTgH",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,20,[-282],[[5,-280,[0,"aaPy0/i4pJT6c4792pYIZU"],[5,88,76]],[34,-281,[0,"133XBXwLBHUqKK5rB9+QVV"],[4,4286936683],69]],[2,"0bckplidhNpqSUOTOhm+xP",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[210,"Holder_FreeUpgrade",33554432,7,[-286],[[5,-283,[0,"a02AQeCuVMXrZvXZPqz7dR"],[5,42.95,18]],[105,1,1,1,-284,[0,"ff1MArWYBKY5rcTpBqzHAu"]],[31,0,-285,[0,"80rPEujmpHUbzPRSmVu8sm"],75]],[2,"22OjaJkilIU7Inv5jxAGtF",1,0],[1,-7.197826086956553,41.2358695652174,0],[3,0,0,0.07845909572784494,0.9969173337331279],[1,1.0869565217391306,1.0869565217391306,1],[1,0,0,8.999999999999998]],[156,"Panel_Color",33554432,[-289,-290],[[5,-287,[0,"39AiQbyaFKYof/dbC/Y8lO"],[5,132,64]],[34,-288,[0,"91qhG2+5JC46U3AEtQQySl"],[4,4281539080],85]],[2,"a4CaoylxRBQYrYaFXjTrnH",1,0],[1,18.007,3.769,0]],[141,"Particle_Intro",false,33554432,21,[[182,1,false,4,false,true,-291,[0,"d05AECqhhCbpn7UGA6ijlI"],[[97,null],6,0],[106,2,[4,4292759605]],[107,40,20],[1],[1],[15,3,900,200],[1],[1],[7,0.19198621771937624],[1],[7,4],[1],[1],[1],[[98,[7,40]],[83,0.2,[7,20]],[83,0.4,[7,30]]],[168,true,true,2,5,0,40,0,[7,1],[1,50,90,10]],[160,true,true,[1],[65,1,30,[32,[0,1],[[64,2,4.4183006535947715,4.4183006535947715],[47,2,0.0037037037037037034,-3.5525525525525525,-3.5525525525525525]]]],[65,1,5,[32,[0,1],[[64,2,5.055555555555555,5.055555555555555],[64,2,-3.2048611111111094,-3.2048611111111094]]]],[1]],[161,true,1,3,30,true,1,[107,1,3],[15,3,1,3]],[61,98]],[76,-292,[0,"22oOqx7JlEmbXStnYiOAJU"]],[5,-293,[0,"151qYMy/hJ7blmr5lFguKn"],[5,100,900]],[221,8,-1088.915,1,-294,[0,"05tlOLOYhCpIoWdtd4MmB/"]]],[2,"a5Boiem/pOE4pc1TvmCkoq",1,0],[1,-1245.915,-297.135,0],[3,0.067773181554978,-0.7038514018327419,0.06777318155497801,0.703851401832742],[1,10.999999999999998,-89.99999999999999,1.5902773407317584e-15]],[239,"VFX_CoinTrail",33554432,21,[-298],[[-295,[76,-296,[0,"4fdrvaiulKx5eKaZoMET5i"]],[27,-297,[0,"e5BAYNKOdExqbUEKsZtFYw"]]],1,4,4],[2,"bfyM1znnxHQ6Px0cPf58zI",1,0],[1,-159.34,387.454,0]],[68,"EventListeners",33554432,1,[-300,-301,-302],[[27,-299,[0,"23v/akFeNGNoUXURtdM8Vb"]]],[2,"16LFzfwvpP/oryppGu+fKn",1,0]],[26,"InputBlocker",33554432,1,[[5,-303,[0,"84/QgT2EpGGZTcWFWJfSwk"],[5,914,1396]],[252,-304,[0,"e95T1vrqdCa6S8eUCinh/A"]],[165,45,-250,-250,-250,-250,100,100,-305,[0,"a14gR9WaNFqJdzjyRoi96v"]]],[2,"05U6lC/P9EO61vPUyn2yqM",1,0]],[262,"Overlay_BG",false,33554432,1,[[5,-306,[0,"eaEfsbTOxKza+1iNisZtsQ"],[5,414,896]],[39,0,-307,[0,"5a4vDmILBPw7eYELu4/Vty"],[4,1022843449],0],[50,45,40,36,-308,[0,"8cjLxJ1zBLxLn2O4P7KwIZ"]]],[2,"a9G2Hl6qNCYJ58+v/iWxSP",1,0]],[141,"Texture_Dots",false,33554432,9,[[5,-309,[0,"36+eNpnExMhLRkNWcDRpHd"],[5,380,380]],[34,-310,[0,"99OLR05zJDPq/R5TuZwZQc"],[4,4292759605],3],[244,33,-48,-68,1,-311,[0,"dcwj5Qf0FKp7jKcLqpxZku"]]],[2,"41IKr9MWhCF5K6BKML6pKL",1,0],[1,65,-72,0],[3,0,0,-0.6427876096865393,0.766044443118978],[1,0,0,-80]],[26,"Text_Bonus",33554432,24,[[41,-312,[0,"95WAYLYUlH1rW+fkNdBAe/"],[5,54.46,29.14],[0,0,0.5]],[99,"bonus",16,16,19,false,-313,[0,"80bjmSHwJNE7MW5MANB7tG"],4],[91,2.6,-314,[0,"b0FYAadu9BeqMpTqDt7kJL"],[4,4282914694]]],[2,"eexdXDkfRACot18pNbq89i",1,0]],[26,"Button_Outline",33554432,10,[[5,-315,[0,"c4YBK97aBOXrP6UuOqqd16"],[5,72,72]],[31,0,-316,[0,"4c2b6mLHBNw5Ze4mszKsfp"],8],[50,45,156,152,-317,[0,"b92EJ7fWpEIqxw7hXBAvi5"]]],[2,"bb34EI3shJC4E6YuT8aTA0",1,0]],[49,"Holder_Distance",33554432,9,[-320],[[5,-318,[0,"77ciwwvndB6J4tSXvp4WPd"],[5,280,100]],[82,-319,[0,"f3U7sqiRBA7ZmksuyIPVfc"]]],[2,"6bTlJatYJG2I+PI3C2X2ot",1,0],[1,0,-224,0]],[68,"Panel_Distance",33554432,59,[36],[[5,-321,[0,"81K2zRYepDdbuSTFA7WxFA"],[5,264,104]],[34,-322,[0,"6cT9n6wclL6oBmE/BWDrnK"],[4,4281539080],14]],[2,"36C5qAEltPc7URob7LWZCm",1,0]],[22,"Text_m",33554432,36,[[41,-323,[0,"eddk1PedZByq3siSOJOGje"],[5,66.96000000000001,87.6],[0,0,0.5]],[260,"m",0,60,60,60,false,-324,[0,"57BwQ/kO1DFpZGwqzpwJ8t"],13],[91,6,-325,[0,"d9rhGw5HBPNpqyPYF/R4y8"],[4,4281539080]]],[2,"4bEl3Fp7lLVLjcK5cZzbJt",1,0],[1,-8.211,0,0]],[175,"Holder_CurrencyGain",false,33554432,11,[37],[[[41,-326,[0,"b7DAtDr0BOG5GzCahjQ49t"],[5,60,36],[0,0,0]],-327],4,1],[2,"dbBZ2JDixApIsBBvWduq45",1,0],[1,45.414,25.041,0],[1,1.1,1.1,1]],[158,"Text_CurrencyValue",33554432,37,[[[41,-328,[0,"3bGoH/3sVGG7YDCaRzZJw5"],[5,90,60],[0,1,0.5]],-329,[91,4,-330,[0,"75CSZT5PxP+JMuLXPGPJWA"],[4,4281539080]]],4,1,4],[2,"68uOQl4IRMUK9ewb6Ji4Ir",1,0],[1,35.851,13.585,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[141,"Text_Levelup",false,33554432,11,[[41,-331,[0,"54HOMLW+pGcZXFTLrSwH9n"],[5,74.35,24.16],[0,0,0]],[108,"Level up!",16,16,16,false,-332,[0,"c4vgnlLSdNHaqhpCZbiQnF"],[4,4279017215],19],[186,-333,[0,"6fV6B55ANGh5EX2jKS1u8E"],[4,4281539080]]],[2,"c80Cb7updBQ5ycOWqdQvWW",1,0],[1,-75.32,-2.091,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[175,"Holder_ThemeUnlocked",false,33554432,11,[38],[[[41,-334,[0,"b9oyvgR4FOd5exlkx8XJ/w"],[5,60,36],[0,0,0]],-335],4,1],[2,"45OfQxTwFARoMIl57Cdx6+",1,0],[1,45.414,25.041,0],[1,1.1,1.1,1]],[46,"Text_NewTheme",33554432,38,[[41,-336,[0,"c7VN9rC5FP5LCeT/DZxlXf"],[5,102.67,29.42],[0,1,0.5]],[439,"New theme",2,17,17,17,false,false,-337,[0,"8ajUh1zSpDuojDsvOO604J"],20],[91,4,-338,[0,"74z1C6gx9ETbB705dD1PPc"],[4,4281539080]]],[2,"6fGsr/arBF8JdypjcVuMIq",1,0],[1,63.984,31.822,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[46,"Text_Unlocked",33554432,38,[[41,-339,[0,"f4PyIlNAFFh7/kfyl8QNyC"],[5,138.92,42.02],[0,1,0.5]],[440,"unlocked!",2,27,27,27,false,false,-340,[0,"41AfZdgt9DuKAJZc7C0Vsh"],[4,4280789503],21],[91,4,-341,[0,"a8j/pE7FVDw5VLOjMYcTXD"],[4,4281539080]]],[2,"9ciJ8W5ypM0q0IAeiVLEY3",1,0],[1,67.767,10.781,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[46,"Text_Level v2",33554432,16,[[5,-342,[0,"31SObLyHhMs5siD+8Pmn7b"],[5,40,30]],[441,"Level",15,22,22,2,false,-343,[0,"ebO+zQ4vJOYYigVtuHV85f"],26],[91,3,-344,[0,"fdS7g2ZLhDTobxQLKytppQ"],[4,4281539080]]],[2,"b8OsDzjNNDO4Gt03kqvfh9",1,0],[1,-3.474,29.16,0],[3,0,0,0.06104853953485687,0.9981347984218669],[1,0,0,7]],[141,"Text_+XP",false,33554432,4,[[5,-345,[0,"0d6QsSiwRChoTvCoUWXJvM"],[5,101.3,54.4]],[258,"+ 6990 xp",20,20,false,-346,[0,"d3JTZTLjdMlZNztevF7HAp"],[4,16703261],28],[444,-347,[0,"99GWToLkVD/LdVuSnLtdXV"]]],[2,"a0Ho2vy0RCj4rjJWV7F3ce",1,0],[1,10.878,-2.176,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[342,"VFX_Experience Gain",33554432,27,[[-348,[76,-349,[0,"3eSUnRAiNLLos3xEsZ7WcU"]],[27,-350,[0,"81RlJM4ZxP763yeCAbRIuN"]]],1,4,4],[2,"0c0Bbx6vVM6bjPQpp/yo8A",1,0],[1,1.354,79.029,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,80,80,1],[1,0,0,9]],[22,"Panel_Edge",33554432,40,[[5,-351,[0,"c5JNhuLjFDqb0DWdGwIotJ"],[5,1000,100]],[201,3,0,1,-352,[0,"acbylyj+FMZKNRJRuM7Fui"],33],[246,17,-100,1,-353,[0,"24x2OqOqNKPrtCNzisHqC+"]]],[2,"bfSFl/cwVJUZLlsPCCzBaN",1,0],[1,0,245,0]],[141,"Texture_Dots",false,33554432,5,[[5,-354,[0,"2e+j+HflFAeId5Pb2XHovN"],[5,260,260]],[39,0,-355,[0,"61tXvMna9IM5P9XuGCxMDd"],[4,4293913591],35],[221,8,-11.973000000000013,1,-356,[0,"8ans1ReS1A6a6rEvJWvaR1"]]],[2,"57vOdvfHJN9LS3rYGppMKj",1,0],[1,-88.97300000000001,4.673,0],[3,0,0,0.766044443118978,0.6427876096865394],[1,0,0,100]],[46,"Text_Speed",33554432,2,[[5,-357,[0,"996bSpN4pHbaicxgPJ2fSI"],[5,55.010000000000005,29.14]],[99,"Speed",16,16,19,false,-358,[0,"38R79uLuNJQoUmwfNuzToy"],36],[91,2.6,-359,[0,"12soQ/FuBDAq6X3KR1Ngyq"],[4,4281539080]]],[2,"2c2Tb4lDVCJIHMKZfDTOFX",1,0],[1,25.565,55.329,0],[3,0,0,0.05233595624294384,0.9986295347545739],[1,0,0,6.000000000000002]],[22,"Text_KMh",33554432,42,[[5,-360,[0,"925jFBWpBJ3oJIPNA4nfYl"],[5,37.76,16.6]],[99,"km/h",12,12,10,false,-361,[0,"a5AvNmVqJBx5tQZbSy7N+3"],37],[186,-362,[0,"e2CZhAPs1IMbVVNeptrJEl"],[4,4281539080]]],[2,"dclBtA33xBm7Cb5d8QI0EZ",1,0],[1,-18.88,-8.436,0]],[22,"Text_Free",33554432,45,[[41,-363,[0,"56abSqBctICIX9tBpMoA0a"],[5,42.95,17.64],[0,0,0.5]],[228," FREE! ",0,13,13,14,false,-364,[0,"3bK+iMbk9MUrm528SyBRod"],[4,4278234623],49],[200,true,-365,[0,"59B68W83RPJppVA5gelbNI"],[50]]],[2,"0a0WHUavJE86d8GYnKiiav",1,0],[1,-21.475,0.413,0]],[22,"Outline",33554432,6,[[5,-366,[0,"85fQTqjkRMPrFL6xDw4CSX"],[5,88,76]],[34,-367,[0,"bbQzjSmWRDJpqE+RAdwyXW"],[4,4278250032],53]],[2,"44FpKepPhKSZpdx8TvZADL",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,6,[-370],[[5,-368,[0,"6egBREHqJLuodDLUwM4PEv"],[5,88,76]],[34,-369,[0,"988Jx1hv1Cjq6+Ilk5el5m"],[4,4278250032],55]],[2,"fbNAZGAmlEGqjB/0grZG/H",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_Prize",33554432,3,[[5,-371,[0,"33hALBHgVLl5Qztw8qrHX5"],[5,95.41,29.14]],[260,"Coin Bonus",0,16,16,19,false,-372,[0,"06kcgLvUdNV5BQfNsipqq2"],60],[91,2.6,-373,[0,"4cCbMRqdJP4pLMqQ5adPoB"],[4,4281539080]]],[2,"1bii+zG2NJmZqcFBkmS76a",1,0],[1,45.452,56.714,0],[3,0,0,0.05233595624294384,0.9986295347545739],[1,0,0,6.000000000000002]],[22,"Text_%",33554432,46,[[5,-374,[0,"e20w1PzYROs4GDUEtECJSE"],[5,16.009999999999998,16.6]],[99,"%",12,12,10,false,-375,[0,"edzIn4PI1JtrGpvq6EB6vR"],61],[186,-376,[0,"c9Iv6/K61B+aseB/+Xq608"],[4,4281539080]]],[2,"1bfMo/3XtMO5B7TegB8XF7",1,0],[1,-8.004999999999999,-8.436,0]],[22,"Text_Free",33554432,49,[[41,-377,[0,"59douBm7VISryCcNLnBWq4"],[5,42.95,17.64],[0,0,0.5]],[228," FREE! ",0,13,13,14,false,-378,[0,"31AI+aQahHGoML4ORp5BbT"],[4,4278234623],73],[200,true,-379,[0,"6eAxebKhRCRo+nX3eMbA2z"],[74]]],[2,"a3Vi0BGq5BOaGgZ+WNqcrP",1,0],[1,-21.475,0.413,0]],[22,"Outline",33554432,7,[[5,-380,[0,"3dKDDonnxBVJPB7vn17CA5"],[5,88,76]],[34,-381,[0,"6699V3nmFB1KYTHrUPipRC"],[4,4278250032],77]],[2,"e2BFDpsxlN0bX2Sz1x+faH",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Color",33554432,7,[-384],[[5,-382,[0,"f28vtj5WVDq4bYCnqhrqk6"],[5,88,76]],[34,-383,[0,"8bt774bzFMo7SJh6vI1geo"],[4,4278250032],79]],[2,"9cXiIk/pNB8JsSQA3mNeTN",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[49,"Holder_Currency Total",33554432,5,[50],[[5,-385,[0,"4cMW2wEaFIXZaCU9IfFn/u"],[5,180,90]],[82,-386,[0,"61wi3MT9pO6oMVZ2IrqM0L"]]],[2,"f8+rkfOAJPo63HXh0OGWDk",1,0],[1,-101.947,182,0]],[26,"Button_Outline",33554432,14,[[5,-387,[0,"dbtHd61hVBtoh0a0vMJzzf"],[5,108,96]],[31,0,-388,[0,"b8DJgIMmJIiLp7ilQrhsTM"],86],[50,45,88,76,-389,[0,"01NJfyRgNOCbSNkPWAKGQI"]]],[2,"acAebK2y1GHYCZ7p99bHcO",1,0]],[69,"Text_Skin",33554432,30,[-392],[[5,-390,[0,"52nizTvc9PJ7Uuhc2mU+4d"],[5,68.98,34.02]],[108,"Shop",27,27,27,false,-391,[0,"88FmmVnrpD/q4mn8dL4xLf"],[4,4294174947],88]],[2,"63l9/1NrBGCqM/5cKFNIhA",1,0],[1,2.6000000000000227,7,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[26,"Button_Outline",33554432,15,[[5,-393,[0,"d6oxCoONZASYXu8mh/HUQg"],[5,148,148]],[31,0,-394,[0,"20okxibClCGIFYufC3iAHJ"],92],[50,45,156,152,-395,[0,"9briUW+nRHDLVeNS+wqjed"]]],[2,"780cR3q6dO3qWHTBIhBlRj",1,0]],[343,"VFX_CoinCollectedUIRewards",false,8388608,21,[[-396,[76,-397,[0,"9a2va2T6RNtZE62xYlxz/M"]],[27,-398,[0,"ack6yU8LtM2J7jVqg+ipZr"]]],1,4,4],[2,"c1N2os9e1IpZipFA4evNYR",1,0],[1,-119.938,387.144,0]],[195,"RaiseTransition",33554432,[[27,-399,[0,"3duJW7H/FKqY2IVIawfckT"]],[104,15,-400,[0,"31+ZwR4uBM4Iq8eu01eU7u"]]],[2,"a0ZmmSyCJIvZcQ2JpyKI0T",1,0]],[26,"UpgradesEndGame",33554432,32,[[27,-401,[0,"d3obHy2DhJPIvwDUjuT9BO"]],[314,-407,[0,"91x9GyAplIsJkdNmxa9mR8"],-406,28,-405,-404,12,-403,18,-402],[315,-413,[0,"54b4QGTy9DB7xrXqU+2wMV"],-412,29,-411,-410,13,-409,20,-408]],[2,"29FoXFDpVOKInPrnK6rOIh",1,0]],[26,"MatchCoinCounter",33554432,32,[[27,-414,[0,"a4Z49fUKtB/q90YcwYIaRf"]],[542,-416,[0,"ddDlcsqftBE6xjnogfX4/D"],-415]],[2,"d36x1kqFlOxJN2JG92EwAJ",1,0]],[158,"Text_Currency Total",33554432,23,[[[41,-417,[0,"e4/EpcxGBKRod/XFHmPj0H"],[5,19.04,35.28],[0,0,0.5]],-418],4,1],[2,"0eROUMDhdIlp00nReMSarB",1,0],[1,16,0.839,0],[3,0,0,0.006108614390678361,0.9999813422410571],[1,0,0,0.7]],[49,"Holder",33554432,23,[24],[[5,-419,[0,"82aO2zH4tHhYYJoqMNuFLN"],[5,0,0]]],[2,"58MkWiECpHnod+0A/vv72l",1,0],[1,35.04,0,0]],[46,"Icon_Currency",33554432,22,[[5,-420,[0,"2aSa7YxnxObKZdXagRv5Rx"],[5,46,46]],[31,0,-421,[0,"87pD95H3xC074VcpSdqCUO"],7]],[2,"8aNCqIrqxOaKsi9utC8KXS",1,0],[1,-69.02750609880627,-6.5521936080647265,0],[3,0,0,0.04100373874394507,0.9991589930581711],[1,0,0,4.700000000000001]],[46,"Icon_Menu",33554432,26,[[5,-422,[0,"55OuqqL2xMQoSG+JznpjUb"],[5,36,36]],[70,-423,[0,"41U+FcVitHo6Nt4PRIKv6o"],9]],[2,"78qS2jSyZJJarCaxKplebU",1,0],[1,2.119000000000028,5.071000000000026,0],[3,0,0,0.008726535498373935,0.9999619230641713],[1,0,0,1]],[22,"Level_Outline Back",33554432,4,[[5,-424,[0,"23xPEYJQhEH6jNxBJQDpcC"],[5,64,64]],[125,0,false,-425,[0,"aaf3KhAuVEw4vYoPntLUsZ"],[4,4281539080],15]],[2,"9cIndIA45Of77dtkdgHAe2",1,0],[1,-89.061,-27.334,0]],[22,"XP_Bar Shadow",33554432,11,[[5,-426,[0,"daj60zT0tOWo3f1DhAdJ19"],[5,180,52]],[392,0,0.1,1,-427,[0,"19UkAyOB1NXpNvG0LTAJtQ"],[4,4294827735],16]],[2,"564qTOTB5DRYbZqFOthnA1",1,0],[1,15,2,0]],[123,"XP_Bar Fill",33554432,11,[[[5,-428,[0,"fcnu3F4plLjrnp4bmJrwkz"],[5,180,52]],-429],4,1],[2,"c9nQMby0ZBbL92vVv7VynJ",1,0],[1,15,2,0]],[235,"Icon_Currency",33554432,37,[[5,-430,[0,"d0GK0IM+tJyIfDD/HEtr9g"],[5,52,52]],[31,0,-431,[0,"68erP6g99AeZu2HZhSJKAU"],17]],[2,"fcPwWL4phMfIH9SDoy8/Bq",1,0],[1,55.001,12.562,0],[1,0.8,0.8,1]],[22,"Level_Color Base",33554432,16,[[5,-432,[0,"f20x3TxyNFrbZUcr7+S45O"],[5,64,64]],[125,0,false,-433,[0,"98gYTP/0FEspT8JH0FqsmU"],[4,4294400569],24]],[2,"cbn5uMobBAbJCJiLDSUDJQ",1,0],[1,0,2.07,0]],[155,"Level_Color",false,33554432,16,[[5,-434,[0,"95Mjb7bphIbK2SaLPfLbgL"],[5,55,49]],[34,-435,[0,"e0p8vOpvtO3I1kY9ryT58F"],[4,4294400569],25]],[2,"17Duzzbk5GoJYDHbaCPd9p",1,0],[1,0,2.07,0]],[158,"Text_Level",33554432,16,[[[5,-436,[0,"05ZFYzZqtG754ZSstI829G"],[5,40,30]],-437],4,1],[2,"51SgoS7BtDrJJoHV995VrZ",1,0],[1,0.372,4.022,0],[3,0,0,0.07845909572784494,0.996917333733128],[1,0,0,9]],[123,"Text_CurrentSpeed",33554432,42,[[[41,-438,[0,"0be+G4jENMMp9JW/UC/kLd"],[5,57.12,50.4],[0,1,0.5]],-439],4,1],[2,"e9owB8FVBA15QE2/pqdKTy",1,0],[1,-23.759999999999998,1.58,0]],[22,"Icon_Currency",33554432,28,[[5,-440,[0,"07I9ygcrJApaPl6Da9lr34"],[5,14,14]],[31,0,-441,[0,"93SYke2JBFGo3x4wy++yfm"],38]],[2,"aa/Bnk9l5C4rr9Tw0mxYxY",1,0],[1,-13.344999999999999,-1.552,0]],[123,"Text_Cost",33554432,28,[[[41,-442,[0,"cfBdpCZ/VG6qr85u+meZ3L"],[5,25.69,17.64],[0,0,0.5]],-443],4,1],[2,"968UcEwvZEEK4Xs+r0oOU0",1,0],[1,-5.344999999999999,0,0]],[22,"Shadow",33554432,17,[[5,-444,[0,"4enYM7FEFMBYz/N9xgeL/Y"],[5,88,76]],[70,-445,[0,"aaTvcbWTxDOZbSv3XGJApH"],39]],[2,"a8tRShX4lERbYpR0p8T/X3",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,17,[[5,-446,[0,"2aX+mNFnxEq5I+Z9HMJy3t"],[5,88,76]],[70,-447,[0,"55T+qhMvVOvItBsD+1lhoO"],40]],[2,"0f8RzUSQZAp7HAFsXFVF+7",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,43,[[5,-448,[0,"a9S3+Z6stObIkoOFpLF4qf"],[5,41,41]],[34,-449,[0,"6dXJThe7xC0LtNTzeFc+/c"],[4,4279006754],41]],[2,"05FyHyToJFuIQwlVestcoe",1,0],[1,4.188,4.188,0]],[22,"Outline",33554432,18,[[5,-450,[0,"68ahbEPgFIK7TbBKEqGEu9"],[5,92,80]],[34,-451,[0,"e5NN2+xEtJAZNx+PkMBvwk"],[4,4281539080],43]],[2,"cfJqPge5hL+Ijh6cBhSrR5",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,44,[[5,-452,[0,"a0aKO1OKxE65UPcLz1Z8PX"],[5,41,41]],[34,-453,[0,"a3KO6rck5LzJjbsVNg1X7N"],[4,4281539080],44]],[2,"faIfD1MoBM6b5db29jmZIN",1,0],[1,4.188,4.188,0]],[22,"Shadow",33554432,12,[[5,-454,[0,"10DXu/WGJHKr6J49fZ3iAv"],[5,88,74]],[70,-455,[0,"bcsAJnzNhO3a8RypTWZM6X"],46]],[2,"4fSWWOK1dOi6EdWd48MdGI",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,12,[[5,-456,[0,"50PzjYPEtH66LaZbp44HNc"],[5,88,76]],[34,-457,[0,"68JsAthINFFbxUpLRxoYYm"],[4,4281539080],47]],[2,"d4GGDa/61CT60/diGR6UlJ",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_MAX",33554432,12,[[5,-458,[0,"3a/7iyxs9D5ZPWw/C/jPAs"],[5,53.62,30.24]],[108,"MAX",24,24,24,false,-459,[0,"29mk8G29BEwJQxoKwtc4rK"],[4,4283222527],48]],[2,"43w761CVtPy4rBQf2rlxfE",1,0],[1,1.792,0.252,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[22,"Shadow",33554432,6,[[5,-460,[0,"3arbYTUUhGTZCM9BU13ML9"],[5,90,76]],[31,0,-461,[0,"3edabC9jBG6KyRWhQTi2Ej"],52]],[2,"36xIaUqGtByYbfnCZkjhAr",1,0],[1,0.418,-1.675,0]],[22,"Icon_Add",33554432,77,[[5,-462,[0,"62Kq9zLb1J9JhjWY5DiNsS"],[5,60,60]],[96,0,false,-463,[0,"8aduV/4ONA5q6tfAwAavBc"],54]],[2,"1bS7Jmn6dJS4NxvZhpLN58",1,0],[1,2.25,4.618,0]],[123,"Text_CurrentPrize",33554432,46,[[[41,-464,[0,"529TpUeZFApYmLM69l+Fwa"],[5,57.12,50.4],[0,1,0.5]],-465],4,1],[2,"c0xAsyjZJNd6oHPtQgUo89",1,0],[1,-2.009999999999998,1.58,0]],[22,"Icon_Currency",33554432,29,[[5,-466,[0,"69Tj8WIPlJMb0pcNPu8vGV"],[5,14,14]],[31,0,-467,[0,"28IUes1a1OmZz3W7JJ/gZY"],62]],[2,"d66Y+nPXJFGKRoRh4fKJLi",1,0],[1,-13.344999999999999,-1.552,0]],[123,"Text_Cost",33554432,29,[[[41,-468,[0,"dfWxUluEFHGYyKpxSw/ewP"],[5,25.69,17.64],[0,0,0.5]],-469],4,1],[2,"7cgN3aX4VPZbilHH6qrpqB",1,0],[1,-5.344999999999999,0,0]],[22,"Shadow",33554432,19,[[5,-470,[0,"fdofFQ3DpNuIrH/GIuzb0S"],[5,88,76]],[70,-471,[0,"bbp8TxiyVCi7eocFjf8Nsv"],63]],[2,"18R+jRYAVKXJDlNm9Dvfph",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,19,[[5,-472,[0,"36eYFCyWRPjKSVsDA4AAt/"],[5,88,76]],[70,-473,[0,"1dROIwFjdA4YRSBaQ07/87"],64]],[2,"322e7290dM24JeWbKWprko",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,47,[[5,-474,[0,"7cZ0ElH0JDOKToCjyKF1WE"],[5,41,41]],[34,-475,[0,"0bFTKupN9Ay4NWuEYer3jC"],[4,4279006754],65]],[2,"23UKJ66tdJ2aihkOphfk8j",1,0],[1,4.188,4.188,0]],[22,"Outline",33554432,20,[[5,-476,[0,"68ahbEPgFIK7TbBKEqGEu9"],[5,92,80]],[34,-477,[0,"eco/fUtiRBhbD7nwdI8y9G"],[4,4281539080],67]],[2,"7708/Bbz1NyrV0aeddULQE",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[22,"Icon_Plus",33554432,48,[[5,-478,[0,"a3uR+FGL1OWaYtbBs1k4RQ"],[5,41,41]],[34,-479,[0,"1duFk3uhFHGaBNVOiT/Wyx"],[4,4281539080],68]],[2,"afpQ03E6pFpLZny3847n++",1,0],[1,4.188,4.188,0]],[22,"Shadow",33554432,13,[[5,-480,[0,"4eJqp3nU5PgKtoA/qV4nQ8"],[5,88,74]],[70,-481,[0,"4bmgkDg9BDC4yXjdDAxEKw"],70]],[2,"5b/4UxVYhIFI9iA9RqvGY2",1,0],[1,0.418,-1.675,0]],[22,"Outline",33554432,13,[[5,-482,[0,"20M4wEhSdO+KJhrbijeQPf"],[5,88,76]],[34,-483,[0,"591HLLPrZN8LJWC7ngE0sB"],[4,4281539080],71]],[2,"35VXT1rt5CFI2tMEHUNxA/",1,0],[1,0.41800000000000637,-1.6750000000000114,0]],[46,"Text_MAX",33554432,13,[[5,-484,[0,"20kIz/Z6JIJYLFHNpEiLtE"],[5,53.62,30.24]],[108,"MAX",24,24,24,false,-485,[0,"c7vQt/gtlOsYFNAEwrUlvZ"],[4,4283222527],72]],[2,"0c4FOBjTRLVLZcVTXk8LIr",1,0],[1,1.792,0.252,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[22,"Shadow",33554432,7,[[5,-486,[0,"feDDYU67BMfKrDHsmqdynD"],[5,90,76]],[31,0,-487,[0,"e2i2IhpBNI6YdJma8lqT8+"],76]],[2,"551632GolMn7y8ta09l85I",1,0],[1,0.418,-1.675,0]],[22,"Icon_Add",33554432,82,[[5,-488,[0,"0b+19rR5RFqLYje0pHMELV"],[5,60,60]],[96,0,false,-489,[0,"50JnUDo4tPLI06meCS++DB"],78]],[2,"9bM4L6KRRHNrAM4hEed404",1,0],[1,2.25,4.618,0]],[22,"Icon_Currency",33554432,50,[[5,-490,[0,"6eW5evrHdC7JyLndIwaofC"],[5,58,58]],[31,0,-491,[0,"78hrnPbQpEirSA/MHC/J5P"],84]],[2,"393FJDW41Iqr08N8L4jIcH",1,0],[1,-69.934,-13.400000000000006,0]],[158,"Text_Currency Total",33554432,50,[[[41,-492,[0,"2aRNdeUEVO3YJnRN/OhcoX"],[5,96,50.4],[0,0,0.5]],-493],4,1],[2,"13ePvDcnpDKZlKwIozvpA4",1,0],[1,-37.689,-8.376,0],[3,0,0,0.09584575252022398,0.9953961983671789],[1,0,0,11]],[155,"Text_Shop",false,33554432,85,[[5,-494,[0,"bdql/EeoFIkp7K6zxWKwQR"],[5,46.45,20.16]],[108,"shop",19,19,16,false,-495,[0,"1cp9SY3oBOhIY5PRQ/h73E"],[4,4286587440],87]],[2,"e2IhNQzfhATZY0EpC5HCFQ",1,0],[1,0,-17.244,0]],[46,"Icon_Play",33554432,31,[[5,-496,[0,"edrenPiDNK8YkfRI1YEXba"],[5,60,68]],[70,-497,[0,"9b7Qmz9k5JJpiXUBwsREj2"],93]],[2,"97YYDyU+JKwokZ3/hSXVVf",1,0],[1,10.494000000000028,6.745999999999981,0],[3,0,0,0.008726535498373935,0.9999619230641713],[1,0,0,1]],[264,"Icon Currency",33554432,52,[[5,-498,[0,"57yWc84PRG642bUgFitECY"],[5,40,40]],[31,0,-499,[0,"38TF2HZ41Az4aKHVNosw2J"],101]],[2,"22yf2RVg9M44GvJ+pH3q4p",1,0],[1,0,0,1]],[68,"EventRaisers",33554432,1,[88],[[27,-500,[0,"37URMgO49HcoqoVqdeb7aO"]]],[2,"5camyZCWdBX4oO1O6sQVIb",1,0]],[26,"ListenActivateRewards",33554432,53,[[27,-501,[0,"fdEAyALHxCOolsLL0DdwOC"]],[74,17,-502,[0,"d4Zsa5Y0dElYTN6HAvX0Fu"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","activate",1]]]],[2,"30VL+erRpEE53AX4Aw51Kq",1,0]],[26,"ListenClickStore",33554432,53,[[27,-503,[0,"63Xq1cXihEMorAQPJREeEg"]],[74,2,-504,[0,"3179/xa5lPoaUKeMpk9QXw"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickStore",1]]]],[2,"56xCBU3qdGKoHxM1rRtqbc",1,0]],[26,"ListenClickStoreBack",33554432,53,[[27,-505,[0,"55SYTMsK1G5aauP+AtyhA6"]],[74,4,-506,[0,"ffhak5wMpG8IGou5TYS2q2"],[[81,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickBack",1]]]],[2,"cfDVaKzpNHy4TxJ5i1Tc2r",1,0]],[26,"LevelUpReward",33554432,8,[[27,-507,[0,"6fshkhKZxHSqJ57+cmlGyV"]],[543,-510,[0,"6brTwN8w1N7LS2305bjHKP"],-509,-508]],[2,"a1Ufh42wZNk7Wp3Y7gdgCl",1,0]],[442,"0",0,28,28,28,false,false,91,[0,"4a0VqC189LZ5Vxt6yFWKp9"]],[443,"999",22,22,22,false,25,[0,"69CT883ZBIF43WLaEa3TEr"],[4,4288169471]],[259,"6990",2,60,60,60,false,36,[0,"cc/sOorpZMtadjqa3f1jxW"]],[288,3,0,0.5,97,[0,"dcGVjAi3FEY6weKYg6U+jG"],[4,4294400569]],[227,"200",2,40,50,50,2,false,false,63,[0,"51PmKkTlBBdbm/J+J5Qq+o"]],[82,62,[0,"6cRN0QYMhLlo4qFl7r4zD8"]],[82,65,[0,"01b5DuU9dLSbwgY33yPRXW"]],[307,"27",23,22,22,2,false,101,[0,"ebmqCzQF1ILbhO2giKXqoG"]],[97,4,[0,"d2BwgJYK1FS62T14fhtmIl"]],[419,1,false,1.3,300,0,70,[0,"d3NYs8ccFOpo/VsBt/PBYM"],[[31,null],6,0],[136,2,[4,1191182335],[4,4292253996]],[15,3,0.2,0.4],[1],[1],[15,3,800,240],[1],[1],[85,3,3.141592653589793],[1],[15,3,0.5,1],[7,40],[1],[1],[[98,[7,30]],[83,0.1,[7,20]]],[206,[20]],[429,true,4,0.5,[7,1],[1,60,0,0]],[63,true,[66,1,[32,[0.005128205128205128,1],[[64,2,3.9934640522875817,3.9934640522875817],[64,2,-4.055555555555556,-4.055555555555556]]]],[1],[1],[1]],[62,[1],[1],[1],[7,1]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[87,true,[1],[1],[15,3,0.5235987755982988,3.141592653589793]],[431,1,4,1,1,[66,1,[32,[0,1],[[60,2,1],[60,2,1]]]],[7,2]],[456,false,1,[7,1],[7,20],[184,[4,4278716671]],[59,1,[100,[[58,255],[18,0,0.9799107142857143]]]],-511],[61,32]],[229,"20 ",2,40,false,102,[0,"1e2zB9Fy5C4oDpTljyplLR"],[4,4294893341]],[205,"250",0,13,13,14,false,104,[0,"03VgtP9uxCUaA5K3iTFG9M"],[4,4281539080]],[159,3,0.9,17,[0,"e983IT6fRB9rFNQUvopN/4"],43],[159,3,0.9,6,[0,"7fkSAP6mRKrKg3XaLJsNrK"],76],[166,2,[0,"9e7bl66MVLIIzGJYWwGrRP"],[59]],[229,"20 ",2,40,false,115,[0,"ffE0du7jdNsLTMiFhIWXc6"],[4,4288169471]],[205,"250",0,13,13,14,false,117,[0,"acRVMvn2RLYJVigMchTbea"],[4,4281539080]],[159,3,0.9,19,[0,"78AvWc0HhFiYDQHByAXQ94"],47],[159,3,0.9,7,[0,"34ulYVBhhHJJTueGWFsi5j"],81],[166,3,[0,"9e7bl66MVLIIzGJYWwGrRP"],[83]],[227,"99999",0,29,32,32,2,false,false,129,[0,"feMb3DJhdI6oDVxwHct6Pt"]],[420,false,1,false,87,[0,"57SXM8ZtpE/7vaNbkfFZfT"],[[99,null],6,0],[184,[4,4286151033]],[15,3,20,60],[1],[1],[7,40],[1],[1],[1],[1],[15,3,0.6,0.9],[1],[1],[1],[[98,[7,10]]],[206,[20]],[300,true,1,1,1,[1]],[63,true,[66,1,[32,[0,1],[[64,2,6.485838779956426,6.485838779956426],[64,2,-1.8267973856209145,-1.8267973856209145]]]],[1],[1],[1]],[207,true,[1],[1],[1],[65,1,25,[32,[0,0.5435897435897435,0.7923076923076923],[[116,2,1,0.9999999999999999,0.9999999999999999],[116,2,-0.4666666666666666,0.9999999999999999,0.9999999999999999],[60,2,-0.28888888888888886]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[15,3,-5.235987755982989,5.235987755982989]],[52,[1],[1]],[55,[1],[1],[20],[20],-512],[61,100]],[421,3,3000,0,52,[0,"79vvsLqbFP1avaSXA12rVm"],[[102,null],6,0],[136,2,[4,4278227185],[4,4282137838]],[15,3,15,30],[1],[1],[15,3,5,10],[1],[1],[1],[1],[15,3,0.3,0.6],[7,10],[1],[7,0.1],[206,[20]],[300,true,1,1,1,[1]],[63,true,[66,1,[32,[0,1],[[47,2,1,-0.041269841269840714,-0.041269841269840714],[64,2,-1.8267973856209145,-1.8267973856209145]]]],[1],[1],[1]],[62,[1],[1],[1],[65,1,25,[32,[0,0.5435897435897435,0.7923076923076923],[[116,2,1,0.9999999999999999,0.9999999999999999],[116,2,-0.4666666666666666,0.9999999999999999,0.9999999999999999],[60,2,-0.28888888888888886]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[15,3,-5.235987755982989,5.235987755982989]],[52,[1],[1]],[55,[1],[1],[20],[20],-513],[61,103]],[544,8,[0,"37WYKlr4pEz74TcATcB53V"],158],[545,8,[0,"f2BCy+QXROw7dBMGRxcdpD"],142],[485,1,1.5,8,[0,"a9B6/sfgBASb+biO8WRap9"],141],[483,0.1,8,[0,"8a9OtDEhRITr7JK3A2H6zU"],145,163,161,162,146],[97,1,[0,"b0oKNY389JC4y5igm8Uc41"]],[82,1,[0,"52lQqFq6lKnIUPXKHBRojH"]]],0,[0,1,1,0,0,1,0,0,1,0,0,1,0,-4,165,0,14,88,0,14,8,0,14,90,0,0,1,0,-6,166,0,30,165,0,0,1,0,-1,9,0,-2,27,0,-3,39,0,-4,21,0,-5,54,0,36,166,0,0,1,0,-1,55,0,-2,34,0,-3,9,0,-4,27,0,-5,39,0,-6,21,0,-7,133,0,-8,53,0,-9,32,0,-10,54,0,0,2,0,0,2,0,0,2,0,-4,152,0,-1,73,0,-2,42,0,-3,28,0,-4,17,0,-5,18,0,-6,12,0,-7,6,0,0,3,0,0,3,0,0,3,0,-4,157,0,-1,78,0,-2,46,0,-3,29,0,-4,19,0,-5,20,0,-6,13,0,-7,7,0,0,4,0,0,4,0,0,4,0,0,4,0,-5,146,0,-1,95,0,-2,11,0,-3,16,0,-4,69,0,0,5,0,0,5,0,-1,40,0,-2,72,0,-3,41,0,-4,83,0,-5,14,0,-6,15,0,0,6,0,-2,151,0,0,6,0,0,6,0,-1,45,0,-2,113,0,-3,76,0,-4,77,0,0,7,0,-2,156,0,0,7,0,0,7,0,-1,49,0,-2,126,0,-3,81,0,-4,82,0,0,8,0,-2,161,0,-3,162,0,-4,163,0,-5,164,0,53,164,0,0,8,0,-1,137,0,0,9,0,0,9,0,-1,56,0,-2,22,0,-3,10,0,-4,59,0,0,10,0,0,10,0,21,26,0,14,10,0,0,10,0,0,10,0,-1,58,0,-2,26,0,0,11,0,0,11,0,-1,96,0,-2,97,0,-3,62,0,-4,64,0,-5,65,0,0,12,0,0,12,0,0,12,0,-1,110,0,-2,111,0,-3,112,0,0,13,0,0,13,0,0,13,0,-1,123,0,-2,124,0,-3,125,0,0,14,0,0,14,0,21,30,0,14,14,0,0,14,0,0,14,0,-1,84,0,-2,30,0,0,15,0,0,15,0,21,31,0,14,15,0,0,15,0,0,15,0,-1,86,0,-2,31,0,0,16,0,0,16,0,-1,99,0,-2,100,0,-3,101,0,-4,68,0,0,17,0,-2,150,0,0,17,0,-1,105,0,-2,106,0,-3,43,0,0,18,0,21,44,0,0,18,0,0,18,0,-1,108,0,-2,44,0,0,19,0,-2,155,0,0,19,0,-1,118,0,-2,119,0,-3,47,0,0,20,0,21,48,0,0,20,0,0,20,0,-1,121,0,-2,48,0,0,21,0,0,21,0,-1,51,0,-2,87,0,-3,52,0,0,22,0,0,22,0,0,22,0,-1,23,0,-2,93,0,0,23,0,0,23,0,0,23,0,-1,91,0,-2,92,0,0,24,0,0,24,0,0,24,0,-1,57,0,-2,25,0,0,25,0,-2,139,0,0,25,0,43,139,0,0,25,0,-1,35,0,0,26,0,0,26,0,0,26,0,-1,94,0,0,27,0,0,27,0,-2,70,0,0,28,0,0,28,0,-1,103,0,-2,104,0,0,29,0,0,29,0,-1,116,0,-2,117,0,0,30,0,0,30,0,0,30,0,-1,85,0,0,31,0,0,31,0,0,31,0,-1,131,0,0,32,0,-1,33,0,-2,89,0,-4,90,0,0,33,0,14,33,0,0,33,0,35,140,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,35,0,0,36,0,-2,140,0,0,36,0,-1,61,0,0,37,0,0,37,0,-1,98,0,-2,63,0,0,38,0,0,38,0,-1,66,0,-2,67,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,-1,71,0,0,41,0,0,41,0,0,42,0,0,42,0,-1,102,0,-2,74,0,0,43,0,0,43,0,-1,107,0,0,44,0,0,44,0,-1,109,0,0,45,0,0,45,0,0,45,0,-1,75,0,0,46,0,0,46,0,-1,115,0,-2,79,0,0,47,0,0,47,0,-1,120,0,0,48,0,0,48,0,-1,122,0,0,49,0,0,49,0,0,49,0,-1,80,0,0,50,0,0,50,0,-1,128,0,-2,129,0,0,51,0,0,51,0,0,51,0,0,51,0,-1,160,0,0,52,0,0,52,0,-1,132,0,0,53,0,-1,134,0,-2,135,0,-3,136,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,-1,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,-2,143,0,0,63,0,-2,142,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,-2,144,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,-1,147,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,-1,114,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,82,0,0,82,0,-1,127,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,-1,130,0,0,86,0,0,86,0,0,86,0,-1,159,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,40,152,0,41,151,0,42,150,0,54,149,0,55,148,0,0,89,0,40,157,0,41,156,0,42,155,0,56,154,0,43,153,0,0,89,0,0,90,0,35,138,0,0,90,0,0,91,0,-2,138,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,-2,141,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,-2,145,0,0,102,0,-2,148,0,0,103,0,0,103,0,0,104,0,-2,149,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,-2,153,0,0,116,0,0,116,0,0,117,0,-2,154,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,-2,158,0,0,130,0,0,130,0,0,131,0,0,131,0,0,132,0,0,132,0,0,133,0,0,134,0,0,134,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,91,144,0,92,143,0,0,137,0,18,147,0,18,159,0,18,160,0,4,1,2,11,41,3,11,41,4,11,27,5,11,39,8,11,32,24,11,92,36,11,60,37,11,62,38,11,65,50,11,83,88,11,133,513],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,139,140,141,142,145,146,148,149,152,153,154,157,158,165],[3,-1,17,3,12,12,3,3,3,3,3,3,22,12,3,3,3,3,3,12,12,12,3,3,3,3,12,3,12,-1,19,-1,17,3,3,3,12,12,3,3,3,3,3,3,3,3,3,3,12,12,-1,3,3,3,3,3,-1,19,3,-1,12,12,3,3,3,3,3,3,3,3,3,3,12,12,-1,3,3,3,3,3,-1,19,3,-1,3,3,3,12,12,3,3,22,3,3,3,3,22,-1,17,-1,17,3,-1,17,-1,-2,-3,-4,19,12,12,12,3,12,12,23,12,12,19,12,12,19,12,23],[21,676,337,102,0,0,219,218,177,677,178,74,74,0,172,115,179,28,172,0,0,0,678,241,176,176,0,115,0,166,166,679,291,84,21,102,0,40,28,20,7,14,9,7,14,9,55,7,0,0,116,21,55,7,117,9,56,56,50,57,0,40,28,20,7,14,9,7,14,9,55,7,0,0,116,21,55,7,117,9,56,56,50,57,28,152,7,0,0,9,20,20,177,67,178,74,74,60,61,680,256,28,681,339,183,245,246,247,183,0,0,0,179,0,0,682,40,0,57,40,0,57,0,683]],[[[12,"NorthernHeights_Autumn_Mushroom_02"],[11,"NorthernHeights_Autumn_Mushroom_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["89AY9/foRfX52ZYHQAlUKT"]],[10,0,null,1,[9,"89AY9/foRfX52ZYHQAlUKT",-4,[13,"f2zJDUI6NIJa7ZZ9gug02N",1,[[6,"SM_Mushroom_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["80TovTdpJVJqwt7bVncq9z"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[684,18]],[[[71,"sfx_ui_final_meter_landing",".mp3",1.306122],-1],0,0,[],[],[]],[[[29,".bin",4204449813,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5952,"length":1488,"count":372,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5952,"count":124,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23898372054100037,0.000040277402149513364,0],"maxPosition",8,[1,0.27710777521133423,0.6333593130111694,0]]],-1],0,0,[],[],[]],[[[36],[11,"SM_FlowerSpring_07",[-2],[2,"1dpk+pkORW3I5277SxjQ8D",-1,0]],[28,"SM_FlowerSpring_07",1,[[25,-3,[0,"93QRHNpxlVUJIFI1NLRQBE"],[0],[23],1]],[2,"6cj+1KlotfsYRvcbjhYTyN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[685,686]],[[[29,".bin",3604832231,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18000,"length":3660,"count":915,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18000,"count":375,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3598692417144775,-1.7014336585998535,-0.548612117767334],"maxPosition",8,[1,1.597337007522583,1.632856011390686,1.2413729429244995]]],-1],0,0,[],[],[]],[[[37,"SM_FlowerSpring_07__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[29,".bin",2582234322,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":3600,"count":900,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.19346220791339874,-0.6382933855056763,-0.7323049902915955],"maxPosition",8,[1,0.19346220791339874,0.6382912397384644,0.732305645942688]]],-1],0,0,[],[],[]],[[[36],[11,"SM_Coin_01",[-2],[2,"80MXwokcxcpJYwJcVFNKT4",-1,0]],[28,"SM_Coin_01",1,[[25,-3,[0,"cbd2CFqCBddauJlRRH2Erl"],[0],[23],1]],[2,"53bDCXd05UYKMybYOYZebU",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[687,688]],[[[37,"SM_Coin_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[71,"sfx_player_smooth_bonus_1",".mp3",0.574694],-1],0,0,[],[],[]],[[[111,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[16,8],[339,25]],[[[12,"VFX_CoinCollectedUI"],[344,"VFX_CoinCollectedUI",8388608,[[-2,[76,-3,[0,"52NFmyoYVHCIvSVowv/0No"]],[27,-4,[0,"167RSkrXRCPYowqsm5MMrg"]]],1,4,4],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[253,0.4,false,1,[0,"e2bB9o1ZRIvbAUeLeubc5F"],[0],[184,[4,4286151033]],[15,3,50,55],[1],[1],[7,40],[1],[1],[1],[1],[7,0.5],[1],[1],[1],[[98,[7,5]]],[206,[20]],[430,true,3,[1]],[185,[66,1,[32,[0,1],[[47,2,1,0.5909090909090914,0.5909090909090914],[64,2,-0.1289682539682539,-0.1289682539682539]]]],[1],[1],[1]],[207,true,[1],[1],[1],[65,1,25,[32,[0,0.5435897435897435,0.8282051282051283],[[116,2,1,0.9999999999999999,0.9999999999999999],[116,2,-0.4666666666666666,0.9999999999999999,0.9999999999999999],[60,2,-0.007407407407407408]]]]],[51,[1],[1],[1]],[53,[1],[1],[1],[1]],[101,[1],[1],[15,3,-5.235987755982989,5.235987755982989]],[52,[1],[1]],[55,[1],[1],[20],[20],-5],[61,1]]],0,[0,1,1,0,-1,2,0,0,1,0,0,1,0,18,2,0,4,1,5],[0,0],[-1,17],[689,205]],[[[12,"NorthernHeights_07_Cabin_02"],[11,"NorthernHeights_07_Cabin_02",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["dbUd/SI9hUnqHCpdADe+yO"]],[10,0,null,1,[9,"dbUd/SI9hUnqHCpdADe+yO",-4,[13,"f3jLChv6xPKrrk8SaSUD+M",1,[[6,"SM_Cabin_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["7cRIW03WRaOoemTdaVOGDq"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[75,24]],[[{"name":"UI_Button_SmallHex Outline","rect":{"x":0,"y":0,"width":84,"height":84},"offset":{"x":0,"y":0},"originalSize":{"width":84,"height":84},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[690]],[[[37,"SM_ChristmasCabin_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_ChristmasCabin_02",[-2],[2,"0d4EP+x8hSIaK8k0a5McE+",-1,0]],[28,"SM_ChristmasCabin_02",1,[[25,-3,[0,"24P2EhUBpaJoAM1MhVBk53"],[0],[23],1]],[2,"a2vbnYqtBR1ovIw3wDM9zc",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[691,692]],[[[29,".bin",946934063,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":514032,"length":60936,"count":15234,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":514032,"count":10709,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-4.0128254890441895,-4.282245635986328,-0.5662473440170288],"maxPosition",8,[1,3.6958889961242676,4.211568832397461,8.01072883605957]]],-1],0,0,[],[],[]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[315,114,37]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"tilingOffset",8,[2,0.1,0.05,0,0],"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[65,97,38]],[[[12,"NorthernHeights_06_Tree_03"],[11,"NorthernHeights_06_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["4eI/yZMG9aIa/A0XCchiO0"]],[10,0,null,1,[9,"4eI/yZMG9aIa/A0XCchiO0",-4,[13,"6eXAQe3fRICotu07YkTPH6",1,[[6,"SM_Tree_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["9djWvqhtBaEo66M8KZhh9b"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[71,22]],[[[12,"NorthernHeights_Autumn_Tree_03"],[11,"NorthernHeights_Autumn_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"96Wkphaa9DCrR2PWH48Z08",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,18]],[[[29,".bin",2090051672,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5664,"length":2256,"count":564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5664,"count":118,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4499029517173767,-0.6455376744270325,-2.3307998180389404],"maxPosition",8,[1,0.5348137617111206,0.42308419942855835,4.772946357727051]]],-1],0,0,[],[],[]],[[[37,"SM_DeadTreeSpring_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[36],[11,"SM_DeadTreeSpring_02",[-2],[2,"2cxL6p7a1ZpocvH+ANJ3Kn",-1,0]],[28,"SM_DeadTreeSpring_02",1,[[25,-3,[0,"a34v/yDaVayo4nrN+1Gp18"],[0],[23],1]],[2,"f7CB/1AfBQ46E4dM8TCTfR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[693,694]],[[[36],[11,"SM_Snowman_03",[-2],[2,"c5SYjPwgRcuL97U87Vl4M2",-1,0]],[28,"SM_Snowman_03",1,[[25,-3,[0,"02CzqvZAtcc7DrBai4T6a0"],[0],[23],1]],[2,"66pl7i+T9UprBQP+aCPY/w",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[695,696]],[[[29,".bin",626537253,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46848,"length":6264,"count":1566,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46848,"count":976,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.3003618717193604,-0.9146365523338318,-0.23210862278938293],"maxPosition",8,[1,1.4088363647460938,0.7924747467041016,2.612739086151123]]],-1],0,0,[],[],[]],[[[37,"SM_Snowman_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[8],[1]],[[[12,"NorthernHeights_05_Snowman_01"],[11,"NorthernHeights_05_Snowman_01",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["16hbDHDn9e76BL3pvJG8By"]],[10,0,null,1,[9,"16hbDHDn9e76BL3pvJG8By",-4,[13,"b8Z9O8mrNJq4LTBHLAHgBI",1,[[6,"SM_Snowman_01",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["cahVyJ6NJdJLwS5MuJJGkt"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[54,26]],[[[119,[[129,[89,[-16,-17,-18,-19,-20,-21,-22],[[48,0,false,-5,-4,[[67,"clickBack"],[84,[44,"fromMenu"]]]],[48,0,false,-7,-6,[[67,"clickBack"],[72,1,[44,"fromMenu"]]]],[120,0,-9,-8,[[67,"clickStore"]]],[92,-11,-10],[192,0,-13,-12],[192,0,-15,-14]],-3,-2,-1]],[187,"Confirmation Layer",[89,[-34,-35,-36,-37,-38,-39],[[92,-27,-26],[120,0,-29,-28,[[84,[44,"confirmationPanel"]]]],[48,0,false,-31,-30,[[72,1,[44,"confirmationPanel"]]]],[48,0,false,-33,-32,[[84,[44,"confirmationPanel"]]]]],-25,-24,-23]]],[{},"fromMenu",4,[121,1,true],"clickBack",4,[77,2],"clickStore",4,[77,2],"confirmationPanel",4,[121,1,false]]],[137,"Empty"],[43,"Store_Intro",[35,1]],[43,"Store_Confirmation Intro",[35,3]],[33,"Entry"],[43,"Store_ExitMenu",[35,0]],[43,"Store_ExitRewards",[35,2]],[33,"Entry"],[137,"Empty"],[43,"Store_Confirmation Exit",[35,4]],[33,"Exit"],[33,"Any"],[33,"Exit"],[33,"Any"]],0,[0,24,11,0,25,10,0,26,4,0,10,5,0,9,2,0,10,6,0,9,2,0,10,2,0,9,1,0,10,1,0,9,4,0,10,1,0,9,6,0,10,1,0,9,5,0,-1,4,0,-2,10,0,-3,11,0,-4,5,0,-5,2,0,-6,6,0,-7,1,0,24,13,0,25,12,0,26,7,0,10,8,0,9,7,0,10,3,0,9,8,0,10,9,0,9,3,0,10,3,0,9,9,0,-1,7,0,-2,12,0,-3,13,0,-4,8,0,-5,3,0,-6,9,39],[0,0,0,0,0],[15,15,15,15,15],[201,200,202,203,163]],[[[29,".bin",3879057249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12432,"length":4464,"count":1116,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":12432,"count":259,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.2280012369155884,-1.2122793197631836,-0.23136602342128754],"maxPosition",8,[1,0.8641063570976257,1.2247369289398193,0.2114408016204834]]],-1],0,0,[],[],[]],[[{"name":"Icon_Currency DarkBlue","rect":{"x":0,"y":0,"width":88,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":88,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[697]],[[[12,"NorthernHeights_07_Tree_03"],[11,"NorthernHeights_07_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"96Wkphaa9DCrR2PWH48Z08",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,24]],[[{"name":"UI_Panel_Currency","rect":{"x":0,"y":0,"width":132,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":132,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[1],0,[0],[13],[698]],[[[12,"NorthernHeights_Spring_EndFlag_01"],[11,"NorthernHeights_Spring_EndFlag_01",[-2],[2,"9dQQ23jzdeWqG1gwNY5jWt",-1,0]],[28,"SM_EndFlag_01",1,[[25,-3,[0,"8dxxg7Mblf2JxAWTBHtg2y"],[0],[23],1]],[2,"3fXHKUFC9UUIIFdQdCmkWt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,1,1,0,-1,2,0,0,2,0,4,1,3],[0,0],[-1,7],[6,42]],[[[12,"NorthernHeights_Candy_SugarCane_02"],[11,"NorthernHeights_Candy_SugarCane_02",[-3],[16,"07n1tRMqlerJp1ZqlaO3y3",-2,0,[-1]]],[3,["88E3jC1h1aSIWnkuZKL+tB"]],[10,0,null,1,[9,"88E3jC1h1aSIWnkuZKL+tB",-4,[13,"19RqgdAwdMrKvQtBI19U0X",1,[[6,"SM_SugarCane_02",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["f3+XpPze5Uiq0peYaNFZkm"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[699,15]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[114,114,37]],[[[56,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true},{},{}],[[[{"roughness":0.57,"metallic":0,"specularIntensity":0.711},"emissive",8,[4,4287137928],"mainTexture",6,0,"emissiveMap",6,1],{},{}],11,0,0]]],0,0,[0,0,0],[16,27,8],[182,182,37]],[[[12,"NorthernHeights_Autumn_Cabin_01"],[11,"NorthernHeights_Autumn_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"f8UfN/WNFJ1KBrf5UhK1IL",1,[[6,"NorthernHeights_01_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,5.595]],[4,["_lrot"],-12,[3,0,0.2951744758657925,0,0.9554433676557469]],[4,["_euler"],-13,[1,0,34.336,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],1]]],0]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"56qFSMTmdD/p1qMtFLMmlo",1,[[6,"NorthernHeights_01_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.812,0,-6.011]],[4,["_lrot"],-17,[3,0,-0.27324575741241686,0,0.9619442582894887]],[4,["_euler"],-18,[1,0,-31.715,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],3]]],2]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["88dmurgyhXabNCxXFbb+xN"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"88dmurgyhXabNCxXFbb+xN",-20,[13,"19ND6kbWdOerwfooxux398",1,[[6,"SM_CabinAutumn_01",["_name"],6],[4,["_lpos"],6,[1,0,0,0]],[4,["_lrot"],6,[3,0,0,0,1]],[4,["_euler"],6,[1,0,0,0]],[14,["_materials","0"],[3,["8bXBbgvIRZdpdYwkMK4ns5"]],5]]],4]],[10,0,null,2,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",2,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",3,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],9]]],8]]],0,[0,-1,2,0,-2,10,0,-3,3,0,-4,11,0,-5,9,0,1,1,0,-1,2,0,-2,3,0,-3,9,0,2,4,0,2,4,0,2,4,0,2,4,0,1,2,0,2,5,0,2,5,0,2,5,0,2,5,0,1,3,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0,0,0],[5,6,5,6,5,6,5,6,5,6],[39,18,39,18,700,18,10,8,10,8]],[[[12,"NorthernHeights_07_Cabin_01"],[11,"NorthernHeights_07_Cabin_01",[-7,-8,-9],[16,"981Bhxadtc+I+VPKuWbHh0",-6,0,[-1,-2,-3,-4,-5]]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-14,[13,"f8UfN/WNFJ1KBrf5UhK1IL",1,[[6,"NorthernHeights_01_Logs_01",["_name"],-10],[4,["_lpos"],-11,[1,0,0,5.595]],[4,["_lrot"],-12,[3,0,0.2951744758657925,0,0.9554433676557469]],[4,["_euler"],-13,[1,0,34.336,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],3]]],2]],[10,0,{},1,[9,"981Bhxadtc+I+VPKuWbHh0",-19,[13,"56qFSMTmdD/p1qMtFLMmlo",1,[[6,"NorthernHeights_01_Logs_02",["_name"],-15],[4,["_lpos"],-16,[1,-0.812,0,-6.011]],[4,["_lrot"],-17,[3,0,-0.27324575741241686,0,0.9619442582894887]],[4,["_euler"],-18,[1,0,-31.715,0]],[14,["_materials","0"],[3,["1bC7OwLylABIG6zgGwTUP7","3bUZwrIC1bKL4D1OgSOiqw"]],5]]],4]],[3,["cd0zRxMplV+rCfMtT5BGEi"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["981Bhxadtc+I+VPKuWbHh0"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[3,["6dgP8j2aRZD5EHMUZgqMY7"]],[10,0,null,1,[9,"cd0zRxMplV+rCfMtT5BGEi",-20,[13,"c20WwDn9BGyJmHlhyObxN9",1,[[6,"SM_Cabin_01",["_name"],4],[4,["_lpos"],4,[1,0,0,0]],[4,["_lrot"],4,[3,0,0,0,1]],[4,["_euler"],4,[1,0,0,0]],[14,["_materials","0"],[3,["b9Yg+wvW5UlYWCDPMedtCL"]],1]]],0]],[10,0,null,2,[9,"6dgP8j2aRZD5EHMUZgqMY7",-21,[13,"1bC7OwLylABIG6zgGwTUP7",2,[[6,"SM_Logs_01",["_name"],7],[4,["_lpos"],7,[1,0,0,0]],[4,["_lrot"],7,[3,0,0,0,1]],[4,["_euler"],7,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],7]]],6]],[10,0,null,3,[9,"6dgP8j2aRZD5EHMUZgqMY7",-22,[13,"1bC7OwLylABIG6zgGwTUP7",3,[[6,"SM_Logs_01",["_name"],8],[4,["_lpos"],8,[1,0,0,0]],[4,["_lrot"],8,[3,0,0,0,1]],[4,["_euler"],8,[1,0,0,0]],[14,["_materials","0"],[3,["3bUZwrIC1bKL4D1OgSOiqw"]],9]]],8]]],0,[0,-1,9,0,-2,2,0,-3,10,0,-4,3,0,-5,11,0,1,1,0,-1,9,0,-2,2,0,-3,3,0,2,5,0,2,5,0,2,5,0,2,5,0,1,2,0,2,6,0,2,6,0,2,6,0,2,6,0,1,3,0,1,9,0,1,10,0,1,11,0,4,1,22],[0,0,0,0,0,0,0,0,0,0],[5,6,5,6,5,6,5,6,5,6],[72,24,39,24,39,24,10,8,10,8]],[[[12,"NorthernHeights_02_Tree_03"],[11,"NorthernHeights_02_Tree_03",[-3],[16,"981Bhxadtc+I+VPKuWbHh0",-2,0,[-1]]],[3,["cdp8jEgddTwrC1yCihMl2M"]],[10,0,null,1,[9,"cdp8jEgddTwrC1yCihMl2M",-4,[13,"6aWm+w+oxNGbBbxbznZwYp",1,[[6,"SM_Tree_03",["_name"],2],[4,["_lpos"],2,[1,0,0,0]],[4,["_lrot"],2,[3,0,0,0,1]],[4,["_euler"],2,[1,0,0,0]],[14,["_materials","0"],[3,["62hyj5uilQ/I1xztMqM/oR"]],1]]],0]]],0,[0,-1,3,0,1,1,0,-1,3,0,1,3,0,4,1,4],[0,0],[5,6],[76,19]],[[{"name":"default_scrollbar_vertical_bg","rect":{"x":0,"y":0,"width":15,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":30},"rotated":false,"capInsets":[4,10,4,10],"packable":true}],[1],0,[0],[13],[701]]]]
